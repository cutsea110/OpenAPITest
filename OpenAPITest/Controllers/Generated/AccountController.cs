//---------------------------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by peppapig from database table definition.
//	Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Security.Claims;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using LinqToDB;
using LinqToDB.Data;

using peppa.util;
using OpenAPITest.CustomPolicyProvider;
using OpenAPITest.CustomFilter;
using OpenAPITest.Domain;

namespace OpenAPITest.Controllers
{
	/// <summary>
	/// アカウントのWebAPI
	/// </summary>
    [ServiceFilter(typeof(ClientIpCheckFilter))]
	[Authorize]
	[Route("api/[controller]")]
	[ApiController]
	public partial class AccountController : ControllerBase
	{
        /// <summary>
        /// Current Account ID
        /// </summary>
        public int CurrentAccountId => int.Parse(this.User.FindFirst(ClaimTypes.Name).Value);

		/// <summary>
		/// アカウントの件数
		/// </summary>
		/// <param name="c"></param>
		/// <returns code="200">ヒットした件数</returns>
		[PermissionTypeAuthorize("Read_Account")]
		[HttpGet("count")]
		[ProducesResponseType(typeof(int), StatusCodes.Status200OK)]
		public IActionResult Count([FromQuery]AccountCondition c)
		{
#if DEBUG
			DataConnection.TurnTraceSwitchOn();
			DataConnection.WriteTraceLine = (msg, context) => Debug.WriteLine(msg, context);
#endif
			using (var db = new peppaDB())
			{
				var count =
					c == null ? db.Account.Count() :
					db.Account.Count(predicate: c.CreatePredicate());
				return Ok(count);
			}
		}

		/// <summary>
		/// アカウントの検索
		/// </summary>
		/// <param name="c"></param>
		/// <param name="with_Staff">StaffをLoadWithするか</param>
		/// <param name="with_Teacher">TeacherをLoadWithするか</param>
		/// <param name="with_User">UserをLoadWithするか</param>
		/// <param name="with_AccountRoleList">AccountRoleListをLoadWithするか</param>
		/// <param name="with_PasswordList">PasswordListをLoadWithするか</param>
		/// <param name="order">Prop0[.Prop1.Prop2...] [Asc|Desc], ...</param>
		/// <param name="currentPage">ページ指定</param>
		/// <param name="pageSize">ページサイズ</param>
		/// <param name="p_when">この指定日時において有効なデータのみに限定する.null(デフォルト)なら限定しない.</param>
		/// <returns code="200">Accountのリスト</returns>
		[PermissionTypeAuthorize("Read_Account")]
		[HttpGet("search")]
		[ProducesResponseType(typeof(IEnumerable<Account>), StatusCodes.Status200OK)]
		public IActionResult Search([FromQuery]AccountCondition c, [FromQuery]bool with_Staff, [FromQuery]bool with_Teacher, [FromQuery]bool with_User, [FromQuery]bool with_AccountRoleList, [FromQuery]bool with_PasswordList, [FromQuery]string[] order, int currentPage = 1, int pageSize = 10, DateTime? p_when = null)
		{
#if DEBUG
			DataConnection.TurnTraceSwitchOn();
			DataConnection.WriteTraceLine = (msg, context) => Debug.WriteLine(msg, context);
#endif
			using (var db = new peppaDB())
			{
				var q = db.Account
					.LoadWith(with_Staff, _ => _.Staff)
					.LoadWith(with_Teacher, _ => _.Teacher)
					.LoadWith(with_User, _ => _.User)
					.LoadWith(with_AccountRoleList, _ => _.AccountRoleList)
					.LoadWith(with_PasswordList, _ => _.PasswordList)
					.IsActiveAt(p_when)
					;
                var filtered = c == null ? q : q.Where(c.CreatePredicate());
                var ordered = order.Any() ? filtered.SortBy(order) : filtered;
				var result = ordered.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();

				#region アソシエーションでLoadWithしたものもフィルタする
				result.ForEach(_ =>
				{
					_.AccountRoleList = _.AccountRoleList?.Where(_ => _.IsActiveAt(p_when));
					_.PasswordList = _.PasswordList?.Where(_ => _.IsActiveAt(p_when));
				});
				#endregion

                return Ok(result);
			}
		}

		/// <summary>
		/// アカウントの取得
		/// </summary>
		/// <param name="with_Staff">StaffをLoadWithするか</param>
		/// <param name="with_Teacher">TeacherをLoadWithするか</param>
		/// <param name="with_User">UserをLoadWithするか</param>
		/// <param name="with_AccountRoleList">AccountRoleListをLoadWithするか</param>
		/// <param name="with_PasswordList">PasswordListをLoadWithするか</param>
		/// <param name="accountId">アカウントID(account_id)</param>
		/// <returns code="200">Accountオブジェクト</returns>
		/// <returns code="404">無効な識別子</returns>
		[PermissionTypeAuthorize("Read_Account")]
		[HttpGet("get/{accountId}")]
		[ProducesResponseType(typeof(Account), StatusCodes.Status200OK)]
		[ProducesResponseType(StatusCodes.Status404NotFound)]
		public IActionResult Get(int accountId, [FromQuery]bool with_Staff, [FromQuery]bool with_Teacher, [FromQuery]bool with_User, [FromQuery]bool with_AccountRoleList, [FromQuery]bool with_PasswordList)
		{
#if DEBUG
			DataConnection.TurnTraceSwitchOn();
			DataConnection.WriteTraceLine = (msg, context) => Debug.WriteLine(msg, context);
#endif
			using (var db = new peppaDB())
			{
				var q = db.Account
					.LoadWith(with_Staff, _ => _.Staff)
					.LoadWith(with_Teacher, _ => _.Teacher)
					.LoadWith(with_User, _ => _.User)
					.LoadWith(with_AccountRoleList, _ => _.AccountRoleList)
					.LoadWith(with_PasswordList, _ => _.PasswordList)
					;
				var o = q.Find(accountId);
				return o == null ? (IActionResult)NotFound() : Ok(o);
			}
		}

		/// <summary>
		/// アカウントの作成
		/// </summary>
		/// <param name="o"></param>
		/// <returns code="201">Accountオブジェクト</returns>
		[PermissionTypeAuthorize("Create_Account")]
		[HttpPost("create")]
		[ProducesResponseType(typeof(int), StatusCodes.Status201Created)]
		[ProducesResponseType(StatusCodes.Status400BadRequest)]
		public IActionResult Create([FromBody]Account o)
		{
#if DEBUG
			DataConnection.TurnTraceSwitchOn();
			DataConnection.WriteTraceLine = (msg, context) => Debug.WriteLine(msg, context);
#endif
			if (ModelState.IsValid) {
				using (var db = new peppaDB())
				{
					o.created_by = CurrentAccountId;
					o.modified_by = CurrentAccountId;
					o.uid = db.InsertWithInt32Identity<Account>(o);
					return CreatedAtAction(nameof(Get), new { accountId = o.account_id }, o);
				}
			}
			return BadRequest();
		}

		/// <summary>
		/// アカウントの更新(必要時作成)
		/// </summary>
		/// <param name="o"></param>
		/// <returns code="200">ヒットした件数</returns>
		/// <returns code="404"></returns>
		[PermissionTypeAuthorize("Create_Account")]
		[PermissionTypeAuthorize("Update_Account")]
		[HttpPost("upsert")]
		[ProducesResponseType(typeof(int), StatusCodes.Status200OK)]
		[ProducesResponseType(StatusCodes.Status400BadRequest)]
		public IActionResult Upsert([FromBody]Account o)
		{
#if DEBUG
			DataConnection.TurnTraceSwitchOn();
			DataConnection.WriteTraceLine = (msg, context) => Debug.WriteLine(msg, context);
#endif
			if (ModelState.IsValid) {
				using (var db = new peppaDB())
				{
					if (o.uid == 0)
						o.created_by = CurrentAccountId;
					o.modified_by = CurrentAccountId;
					int count = db.InsertOrReplace<Account>(o);
					return Ok(count);
				}
			}
			return BadRequest();
		}

		/// <summary>
		/// アカウントの一括作成
		/// </summary>
		/// <param name="os"></param>
		/// <returns>BulkCopyRowsCopied</returns>
		[PermissionTypeAuthorize("Create_Account")]
		[HttpPost("massive-new")]
		[ProducesResponseType(typeof(BulkCopyRowsCopied), StatusCodes.Status200OK)]
		[ProducesResponseType(StatusCodes.Status400BadRequest)]
		public IActionResult MassiveCreate([FromBody]IEnumerable<Account> os)
		{
#if DEBUG
			DataConnection.TurnTraceSwitchOn();
			DataConnection.WriteTraceLine = (msg, context) => Debug.WriteLine(msg, context);
#endif
			if (ModelState.IsValid) {
				using (var db = new peppaDB())
				{
					foreach (var o in os)
					{
						o.created_by = CurrentAccountId;
						o.modified_by = CurrentAccountId;
					}

					var ret = db.BulkCopy<Account>(os);
					return Ok(ret);
				}
			}
			return BadRequest();
		}

		/// <summary>
		/// アカウントのマージ
		/// </summary>
		/// <param name="os"></param>
		/// <returns>件数</returns>
		[PermissionTypeAuthorize("Create_Account")]
		[PermissionTypeAuthorize("Update_Account")]
		[HttpPost("merge")]
		[ProducesResponseType(typeof(int), StatusCodes.Status200OK)]
		[ProducesResponseType(StatusCodes.Status400BadRequest)]
		public IActionResult Merge([FromBody]IEnumerable<Account> os)
		{
#if DEBUG
			DataConnection.TurnTraceSwitchOn();
			DataConnection.WriteTraceLine = (msg, context) => Debug.WriteLine(msg, context);
#endif
			if (ModelState.IsValid) {
				using (var db = new peppaDB())
				{
					foreach (var o in os)
					{
						if (o.uid == 0)
							o.created_by = CurrentAccountId;
						o.modified_by = CurrentAccountId;
					}
					var count = db.Merge<Account>(os);
					return Ok(count);
				}
			}
			return BadRequest();
		}

		/// <summary>
		/// アカウントの更新
		/// </summary>
		/// <param name="accountId">アカウントID(account_id)</param>
		/// <param name="o"></param>
		/// <returns>更新件数</returns>
		[PermissionTypeAuthorize("Update_Account")]
		[HttpPut, Route("modify/{accountId}")]
		[ProducesResponseType(typeof(int), StatusCodes.Status200OK)]
		[ProducesResponseType(StatusCodes.Status400BadRequest)]
		public IActionResult Modify(int accountId, [FromBody]Account o)
		{
#if DEBUG
			DataConnection.TurnTraceSwitchOn();
			DataConnection.WriteTraceLine = (msg, context) => Debug.WriteLine(msg, context);
#endif
			if (ModelState.IsValid) {
				using (var db = new peppaDB())
				{
					o.modified_by = CurrentAccountId;
					var count = db.Update<Account>(o);
					return Ok(count);
				}
			}
			return BadRequest();
		}

		/// <summary>
		/// アカウントの削除(論理)
		/// </summary>
		/// <param name="accountId">アカウントID(account_id)</param>
		/// <returns>件数</returns>
		[PermissionTypeAuthorize("Delete_Account")]
		[HttpDelete("remove/{accountId}")]
		[ProducesResponseType(typeof(int), StatusCodes.Status200OK)]
		public IActionResult Remove(int accountId)
		{
#if DEBUG
			DataConnection.TurnTraceSwitchOn();
			DataConnection.WriteTraceLine = (msg, context) => Debug.WriteLine(msg, context);
#endif
			using (var db = new peppaDB())
			{
				var count = db.Account
					.Where(_ => _.account_id == accountId)
					.Set(_ => _.modified_by, CurrentAccountId)
					.Set(_ => _.removed_at, Sql.CurrentTimestampUtc)
					.Update();
				return Ok(count);
			}
		}

		/// <summary>
		/// アカウントの削除(論理)
		/// </summary>
		/// <param name="c"></param>
		/// <returns>件数</returns>
		[PermissionTypeAuthorize("Delete_Account")]
		[HttpDelete("remove")]
		[ProducesResponseType(typeof(int), StatusCodes.Status200OK)]
		public IActionResult Remove([FromQuery]AccountCondition c)
		{
#if DEBUG
			DataConnection.TurnTraceSwitchOn();
			DataConnection.WriteTraceLine = (msg, context) => Debug.WriteLine(msg, context);
#endif
			using (var db = new peppaDB())
			{
				var count = db.Account
					.Where(c.CreatePredicate())
					.Set(_ => _.modified_by, CurrentAccountId)
					.Set(_ => _.removed_at, Sql.CurrentTimestampUtc)
					.Update();
				return Ok(count);
			}
		}

		/// <summary>
		/// アカウントの物理削除
		/// </summary>
		/// <param name="accountId">アカウントID(account_id)</param>
		/// <returns>件数</returns>
		[PermissionTypeAuthorize("Delete_Account")]
		[HttpDelete("physically-remove/{accountId}")]
		[ProducesResponseType(typeof(int), StatusCodes.Status200OK)]
		public IActionResult PhysicallyRemove(int accountId)
		{
#if DEBUG
			DataConnection.TurnTraceSwitchOn();
			DataConnection.WriteTraceLine = (msg, context) => Debug.WriteLine(msg, context);
#endif
			using (var db = new peppaDB())
			{
				var count = db.Account
					.Where(_ => _.account_id == accountId)
					.Delete();
				return Ok(count);
			}
		}

		/// <summary>
		/// アカウントの物理削除
		/// </summary>
		/// <param name="c"></param>
		/// <returns>件数</returns>
		[PermissionTypeAuthorize("Delete_Account")]
		[HttpDelete("physically-remove")]
		[ProducesResponseType(typeof(int), StatusCodes.Status200OK)]
		public IActionResult PhysicallyRemove([FromQuery]AccountCondition c)
		{
#if DEBUG
			DataConnection.TurnTraceSwitchOn();
			DataConnection.WriteTraceLine = (msg, context) => Debug.WriteLine(msg, context);
#endif
			using (var db = new peppaDB())
			{
				var count = db.Account
					.Where(c.CreatePredicate())
					.Delete();
				return Ok(count);
			}
		}
	}
}
