//---------------------------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by peppapig from database table definition.
//	Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------

#pragma warning disable 1591

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.Serialization;
using System.Text;

using LinqToDB;
using LinqToDB.Mapping;

using peppa.util;

namespace OpenAPITest.Domain
{
	/// <summary>
	/// テーブル基本クラス
	/// </summary>
	/// <typeparam name="TEntity"></typeparam>
	[Serializable, DataContract]
	public class TableBase<TEntity> where TEntity : TableBase<TEntity>
	{

	}

	/// <summary>
	/// 条件指定基本クラス
	/// </summary>
	/// <typeparam name="TEntity"></typeparam>
	[Serializable]
	public abstract class ConditionBase<TEntity> where TEntity : class
	{
		virtual public Expression<Func<TEntity, bool>> CreatePredicate()
		{
			return PredicateBuilder.True<TEntity>();
		}
	}

	/// <summary>
	/// Database       : peppa
	/// </summary>
	public partial class peppaDB : LinqToDB.Data.DataConnection
	{
		#region Tables
		/// <summary>
		/// テスト
		/// </summary>
		public ITable<Test> Test => this.GetTable<Test>();
		/// <summary>
		/// ロールマスタ
		/// </summary>
		public ITable<Role> Role => this.GetTable<Role>();
		/// <summary>
		/// ロール権限
		/// </summary>
		public ITable<RolePermission> RolePermission => this.GetTable<RolePermission>();
		/// <summary>
		/// アカウント
		/// </summary>
		public ITable<Account> Account => this.GetTable<Account>();
		/// <summary>
		/// パスワード認証
		/// </summary>
		public ITable<Password> Password => this.GetTable<Password>();
		/// <summary>
		/// アカウントロール
		/// </summary>
		public ITable<AccountRole> AccountRole => this.GetTable<AccountRole>();
		/// <summary>
		/// エラーログ
		/// </summary>
		public ITable<ErrorLog> ErrorLog => this.GetTable<ErrorLog>();
		/// <summary>
		/// 職員
		/// </summary>
		public ITable<Staff> Staff => this.GetTable<Staff>();
		/// <summary>
		/// 教員
		/// </summary>
		public ITable<Teacher> Teacher => this.GetTable<Teacher>();
		/// <summary>
		/// 他ユーザ
		/// </summary>
		public ITable<User> User => this.GetTable<User>();
		/// <summary>
		/// 性別区分
		/// </summary>
		public ITable<SexType> SexType => this.GetTable<SexType>();
		/// <summary>
		/// 勤務形態種別
		/// </summary>
		public ITable<WorkStyleType> WorkStyleType => this.GetTable<WorkStyleType>();
		/// <summary>
		/// 職階種別
		/// </summary>
		public ITable<PositionType> PositionType => this.GetTable<PositionType>();
		/// <summary>
		/// 教員資格種別
		/// </summary>
		public ITable<TeacherLisenceType> TeacherLisenceType => this.GetTable<TeacherLisenceType>();
		/// <summary>
		/// 人名
		/// </summary>
		public ITable<PersonName> PersonName => this.GetTable<PersonName>();
		/// <summary>
		/// 人名種別
		/// </summary>
		public ITable<PersonNameType> PersonNameType => this.GetTable<PersonNameType>();
		/// <summary>
		/// 住所
		/// </summary>
		public ITable<Address> Address => this.GetTable<Address>();
		/// <summary>
		/// 住所種別
		/// </summary>
		public ITable<AddressType> AddressType => this.GetTable<AddressType>();
		/// <summary>
		/// 連絡先
		/// </summary>
		public ITable<Contact> Contact => this.GetTable<Contact>();
		/// <summary>
		/// 連絡先種別
		/// </summary>
		public ITable<ContactType> ContactType => this.GetTable<ContactType>();
		#endregion

		public peppaDB()
		{
			InitConfiguration();
			InitDataContext();
			InitMappingSchema();
		}

		public peppaDB(string configuration)
			: base(configuration)
		{
			InitConfiguration();
			InitDataContext();
			InitMappingSchema();
		}

		public virtual void InitConfiguration()
		{
			// LoadWithで必要になるので常にtrue
			LinqToDB.Common.Configuration.Linq.AllowMultipleQuery = true;
		}
		partial void InitDataContext();
		partial void InitMappingSchema();
	}

	#region enum
	/// <summary>
	/// 有効フラグ
	///
	///  0 : 無効 (無効)
	///  1 : 有効 (有効)
	/// </summary>
	[DataContract]
	public enum ValidityFlag
	{
		/// <summary>
		/// 名称 : 無効
		/// 値 : 0
		/// 説明 : 無効
		/// </summary>
		[MapValue(Value = 0), DataMember, EnumMember, Description("無効")]
		無効 = 0,
		/// <summary>
		/// 名称 : 有効
		/// 値 : 1
		/// 説明 : 有効
		/// </summary>
		[MapValue(Value = 1), DataMember, EnumMember, Description("有効")]
		有効 = 1,
	}
	/// <summary>
	/// パスワードハッシュ化方式
	///
	///  "SHA256" : SHA256 (SHA256)
	///  "RAW" : 平文のまま (平文のまま保持)
	/// </summary>
	[DataContract]
	public enum HashMethod
	{
		/// <summary>
		/// 名称 : SHA256
		/// 値 : "SHA256"
		/// 説明 : SHA256
		/// </summary>
		[MapValue(Value = "SHA256"), DataMember, EnumMember, Description("SHA256")]
		SHA256,
		/// <summary>
		/// 名称 : 平文のまま
		/// 値 : "RAW"
		/// 説明 : 平文のまま保持
		/// </summary>
		[MapValue(Value = "RAW"), DataMember, EnumMember, Description("平文のまま保持")]
		平文,
	}
	/// <summary>
	/// ロック理由
	///
	///  0 : なし (理由なし)
	///  1 : 認証失敗 (連続的な認証エラーによる)
	///  2 : アカウント凍結 (アカウントを凍結するため)
	///  9 : その他 (その他)
	/// </summary>
	[DataContract]
	public enum LockReason
	{
		/// <summary>
		/// 名称 : なし
		/// 値 : 0
		/// 説明 : 理由なし
		/// </summary>
		[MapValue(Value = 0), DataMember, EnumMember, Description("理由なし")]
		なし = 0,
		/// <summary>
		/// 名称 : 認証失敗
		/// 値 : 1
		/// 説明 : 連続的な認証エラーによる
		/// </summary>
		[MapValue(Value = 1), DataMember, EnumMember, Description("連続的な認証エラーによる")]
		失敗 = 1,
		/// <summary>
		/// 名称 : アカウント凍結
		/// 値 : 2
		/// 説明 : アカウントを凍結するため
		/// </summary>
		[MapValue(Value = 2), DataMember, EnumMember, Description("アカウントを凍結するため")]
		凍結 = 2,
		/// <summary>
		/// 名称 : その他
		/// 値 : 9
		/// 説明 : その他
		/// </summary>
		[MapValue(Value = 9), DataMember, EnumMember, Description("その他")]
		その他 = 9,
	}
	/// <summary>
	/// 性別
	///
	///  1 : 男性 (男性)
	///  2 : 女性 (女性)
	/// </summary>
	[DataContract]
	public enum Gender
	{
		/// <summary>
		/// 名称 : 男性
		/// 値 : 1
		/// 説明 : 男性
		/// </summary>
		[MapValue(Value = 1), DataMember, EnumMember, Description("男性")]
		男性 = 1,
		/// <summary>
		/// 名称 : 女性
		/// 値 : 2
		/// 説明 : 女性
		/// </summary>
		[MapValue(Value = 2), DataMember, EnumMember, Description("女性")]
		女性 = 2,
	}
	/// <summary>
	/// ユーザ種別
	///
	///  1 : 職員 (職員)
	///  2 : 教員 (教員)
	///  3 : 在学生 (在学生)
	///  4 : 除籍生 (除籍生)
	///  5 : 保護者 (保護者)
	///  6 : 他ユーザ (SEなどその他のシステムアカウント用ユーザ)
	///  99 : ゴースト (人的リソースの関連なし)
	/// </summary>
	[DataContract]
	public enum UserType
	{
		/// <summary>
		/// 名称 : 職員
		/// 値 : 1
		/// 説明 : 職員
		/// </summary>
		[MapValue(Value = 1), DataMember, EnumMember, Description("職員")]
		職員 = 1,
		/// <summary>
		/// 名称 : 教員
		/// 値 : 2
		/// 説明 : 教員
		/// </summary>
		[MapValue(Value = 2), DataMember, EnumMember, Description("教員")]
		教員 = 2,
		/// <summary>
		/// 名称 : 在学生
		/// 値 : 3
		/// 説明 : 在学生
		/// </summary>
		[MapValue(Value = 3), DataMember, EnumMember, Description("在学生")]
		在学生 = 3,
		/// <summary>
		/// 名称 : 除籍生
		/// 値 : 4
		/// 説明 : 除籍生
		/// </summary>
		[MapValue(Value = 4), DataMember, EnumMember, Description("除籍生")]
		除籍生 = 4,
		/// <summary>
		/// 名称 : 保護者
		/// 値 : 5
		/// 説明 : 保護者
		/// </summary>
		[MapValue(Value = 5), DataMember, EnumMember, Description("保護者")]
		保護者 = 5,
		/// <summary>
		/// 名称 : 他ユーザ
		/// 値 : 6
		/// 説明 : SEなどその他のシステムアカウント用ユーザ
		/// </summary>
		[MapValue(Value = 6), DataMember, EnumMember, Description("SEなどその他のシステムアカウント用ユーザ")]
		他ユーザ = 6,
		/// <summary>
		/// 名称 : ゴースト
		/// 値 : 99
		/// 説明 : 人的リソースの関連なし
		/// </summary>
		[MapValue(Value = 99), DataMember, EnumMember, Description("人的リソースの関連なし")]
		ゴースト = 99,
	}
	/// <summary>
	/// 権限
	///
	///  "Create_Role" : ロール作成 (ロールマスタの新規作成)
	///  "Read_Role" : ロール表示 (ロールマスタの閲覧)
	///  "Update_Role" : ロール更新 (ロールマスタの更新)
	///  "Delete_Role" : ロール削除 (ロールマスタの削除)
	///  "Create_RolePermission" : ロール権限作成 (ロール権限の新規作成)
	///  "Read_RolePermission" : ロール権限表示 (ロール権限の閲覧)
	///  "Update_RolePermission" : ロール権限更新 (ロール権限の更新)
	///  "Delete_RolePermission" : ロール権限削除 (ロール権限の削除)
	///  "Create_Account" : アカウント作成 (アカウントの新規作成)
	///  "Read_Account" : アカウント表示 (アカウントの閲覧)
	///  "Update_Account" : アカウント更新 (アカウントの更新)
	///  "Delete_Account" : アカウント削除 (アカウントの削除)
	///  "Create_AccountRole" : アカウントロール作成 (アカウントロールの新規作成)
	///  "Read_AccountRole" : アカウントロール表示 (アカウントロールの閲覧)
	///  "Update_AccountRole" : アカウントロール更新 (アカウントロールの更新)
	///  "Delete_AccountRole" : アカウントロール削除 (アカウントロールの削除)
	///  "Create_Password" : パスワード作成 (パスワードの新規作成)
	///  "Read_Password" : パスワード表示 (パスワードの閲覧)
	///  "Update_Password" : パスワード更新 (パスワードの更新)
	///  "Change_Password" : パスワード変更 (パスワードの変更)
	///  "Delete_Password" : パスワード削除 (パスワードの削除)
	///  "Create_Staff" : 職員作成 (職員マスタの新規作成)
	///  "Read_Staff" : 職員表示 (職員マスタの閲覧)
	///  "Update_Staff" : 職員更新 (職員マスタの更新)
	///  "Delete_Staff" : 職員削除 (職員マスタの削除)
	///  "Create_Teacher" : 教員作成 (教員マスタの新規作成)
	///  "Read_Teacher" : 教員表示 (教員マスタの閲覧)
	///  "Update_Teacher" : 教員更新 (教員マスタの更新)
	///  "Delete_Teacher" : 教員削除 (教員マスタの削除)
	///  "Create_User" : 他ユーザ作成 (他ユーザマスタの新規作成)
	///  "Read_User" : 他ユーザ表示 (他ユーザマスタの閲覧)
	///  "Update_User" : 他ユーザ更新 (他ユーザマスタの更新)
	///  "Delete_User" : 他ユーザ削除 (他ユーザマスタの削除)
	///  "Create_SexType" : 性別区分作成 (性別区分マスタの新規作成)
	///  "Read_SexType" : 性別区分表示 (性別区分マスタの閲覧)
	///  "Update_SexType" : 性別区分更新 (性別区分マスタの更新)
	///  "Delete_SexType" : 性別区分削除 (性別区分マスタの削除)
	///  "Create_WorkStyleType" : 勤務形態種別作成 (勤務形態種別マスタの新規作成)
	///  "Read_WorkStyleType" : 勤務形態種別表示 (勤務形態種別マスタの閲覧)
	///  "Update_WorkStyleType" : 勤務形態種別更新 (勤務形態種別マスタの更新)
	///  "Delete_WorkStyleType" : 勤務形態種別削除 (勤務形態種別マスタの削除)
	///  "Create_PositionType" : 職階種別作成 (職階種別マスタの新規作成)
	///  "Read_PositionType" : 職階種別表示 (職階種別マスタの閲覧)
	///  "Update_PositionType" : 職階種別更新 (職階種別マスタの更新)
	///  "Delete_PositionType" : 職階種別削除 (職階種別マスタの削除)
	///  "Create_TeacherLisenceType" : 教員資格種別作成 (教員資格種別マスタの新規作成)
	///  "Read_TeacherLisenceType" : 教員資格種別表示 (教員資格種別マスタの閲覧)
	///  "Update_TeacherLisenceType" : 教員資格種別更新 (教員資格種別マスタの更新)
	///  "Delete_TeacherLisenceType" : 教員資格種別削除 (教員資格種別マスタの削除)
	///  "Create_PersonName" : 人名作成 (人名の新規作成)
	///  "Read_PersonName" : 人名表示 (人名の閲覧)
	///  "Update_PersonName" : 人名更新 (人名の更新)
	///  "Change_PersonName" : 人名変更 (人名の変更)
	///  "Delete_PersonName" : 人名削除 (人名の削除)
	///  "Create_PersonNameType" : 人名種別作成 (人名種別の新規作成)
	///  "Read_PersonNameType" : 人名種別表示 (人名種別の閲覧)
	///  "Update_PersonNameType" : 人名種別更新 (人名種別の更新)
	///  "Delete_PersonNameType" : 人名種別削除 (人名種別の削除)
	///  "Create_Address" : 住所作成 (住所の新規作成)
	///  "Read_Address" : 住所表示 (住所の閲覧)
	///  "Update_Address" : 住所更新 (住所の更新)
	///  "Change_Address" : 住所変更 (住所の変更)
	///  "Delete_Address" : 住所削除 (住所の削除)
	///  "Create_AddressType" : 住所種別作成 (住所種別の新規作成)
	///  "Read_AddressType" : 住所種別表示 (住所種別の閲覧)
	///  "Update_AddressType" : 住所種別更新 (住所種別の更新)
	///  "Delete_AddressType" : 住所種別削除 (住所種別の削除)
	///  "Create_Contact" : 連絡先作成 (連絡先の新規作成)
	///  "Read_Contact" : 連絡先表示 (連絡先の閲覧)
	///  "Update_Contact" : 連絡先更新 (連絡先の更新)
	///  "Change_Contact" : 連絡先変更 (連絡先の変更)
	///  "Delete_Contact" : 連絡先削除 (連絡先の削除)
	///  "Create_ContactType" : 連絡先種別作成 (連絡先種別の新規作成)
	///  "Read_ContactType" : 連絡先種別表示 (連絡先種別の閲覧)
	///  "Update_ContactType" : 連絡先種別更新 (連絡先種別の更新)
	///  "Delete_ContactType" : 連絡先種別削除 (連絡先種別の削除)
	///  "Create_ErrorLog" : エラーログ作成 (エラーログの新規作成)
	///  "Read_ErrorLog" : エラーログ表示 (エラーログの閲覧)
	///  "Update_ErrorLog" : エラーログ更新 (エラーログの更新)
	///  "Delete_ErrorLog" : エラーログ削除 (エラーログの削除)
	///  "Create_Test" : テスト作成 (テストの新規作成)
	///  "Read_Test" : テスト表示 (テストの閲覧)
	///  "Update_Test" : テスト更新 (テストの更新)
	///  "Delete_Test" : テスト削除 (テストの削除)
	/// </summary>
	[DataContract]
	public enum PermissionType
	{
		/// <summary>
		/// 名称 : ロール作成
		/// 値 : "Create_Role"
		/// 説明 : ロールマスタの新規作成
		/// </summary>
		[MapValue(Value = "Create_Role"), DataMember, EnumMember, Description("ロールマスタの新規作成")]
		ロール作成,
		/// <summary>
		/// 名称 : ロール表示
		/// 値 : "Read_Role"
		/// 説明 : ロールマスタの閲覧
		/// </summary>
		[MapValue(Value = "Read_Role"), DataMember, EnumMember, Description("ロールマスタの閲覧")]
		ロール表示,
		/// <summary>
		/// 名称 : ロール更新
		/// 値 : "Update_Role"
		/// 説明 : ロールマスタの更新
		/// </summary>
		[MapValue(Value = "Update_Role"), DataMember, EnumMember, Description("ロールマスタの更新")]
		ロール更新,
		/// <summary>
		/// 名称 : ロール削除
		/// 値 : "Delete_Role"
		/// 説明 : ロールマスタの削除
		/// </summary>
		[MapValue(Value = "Delete_Role"), DataMember, EnumMember, Description("ロールマスタの削除")]
		ロール削除,
		/// <summary>
		/// 名称 : ロール権限作成
		/// 値 : "Create_RolePermission"
		/// 説明 : ロール権限の新規作成
		/// </summary>
		[MapValue(Value = "Create_RolePermission"), DataMember, EnumMember, Description("ロール権限の新規作成")]
		ロール権限作成,
		/// <summary>
		/// 名称 : ロール権限表示
		/// 値 : "Read_RolePermission"
		/// 説明 : ロール権限の閲覧
		/// </summary>
		[MapValue(Value = "Read_RolePermission"), DataMember, EnumMember, Description("ロール権限の閲覧")]
		ロール権限表示,
		/// <summary>
		/// 名称 : ロール権限更新
		/// 値 : "Update_RolePermission"
		/// 説明 : ロール権限の更新
		/// </summary>
		[MapValue(Value = "Update_RolePermission"), DataMember, EnumMember, Description("ロール権限の更新")]
		ロール権限更新,
		/// <summary>
		/// 名称 : ロール権限削除
		/// 値 : "Delete_RolePermission"
		/// 説明 : ロール権限の削除
		/// </summary>
		[MapValue(Value = "Delete_RolePermission"), DataMember, EnumMember, Description("ロール権限の削除")]
		ロール権限削除,
		/// <summary>
		/// 名称 : アカウント作成
		/// 値 : "Create_Account"
		/// 説明 : アカウントの新規作成
		/// </summary>
		[MapValue(Value = "Create_Account"), DataMember, EnumMember, Description("アカウントの新規作成")]
		アカウント作成,
		/// <summary>
		/// 名称 : アカウント表示
		/// 値 : "Read_Account"
		/// 説明 : アカウントの閲覧
		/// </summary>
		[MapValue(Value = "Read_Account"), DataMember, EnumMember, Description("アカウントの閲覧")]
		アカウント表示,
		/// <summary>
		/// 名称 : アカウント更新
		/// 値 : "Update_Account"
		/// 説明 : アカウントの更新
		/// </summary>
		[MapValue(Value = "Update_Account"), DataMember, EnumMember, Description("アカウントの更新")]
		アカウント更新,
		/// <summary>
		/// 名称 : アカウント削除
		/// 値 : "Delete_Account"
		/// 説明 : アカウントの削除
		/// </summary>
		[MapValue(Value = "Delete_Account"), DataMember, EnumMember, Description("アカウントの削除")]
		アカウント削除,
		/// <summary>
		/// 名称 : アカウントロール作成
		/// 値 : "Create_AccountRole"
		/// 説明 : アカウントロールの新規作成
		/// </summary>
		[MapValue(Value = "Create_AccountRole"), DataMember, EnumMember, Description("アカウントロールの新規作成")]
		アカウントロール作成,
		/// <summary>
		/// 名称 : アカウントロール表示
		/// 値 : "Read_AccountRole"
		/// 説明 : アカウントロールの閲覧
		/// </summary>
		[MapValue(Value = "Read_AccountRole"), DataMember, EnumMember, Description("アカウントロールの閲覧")]
		アカウントロール表示,
		/// <summary>
		/// 名称 : アカウントロール更新
		/// 値 : "Update_AccountRole"
		/// 説明 : アカウントロールの更新
		/// </summary>
		[MapValue(Value = "Update_AccountRole"), DataMember, EnumMember, Description("アカウントロールの更新")]
		アカウントロール更新,
		/// <summary>
		/// 名称 : アカウントロール削除
		/// 値 : "Delete_AccountRole"
		/// 説明 : アカウントロールの削除
		/// </summary>
		[MapValue(Value = "Delete_AccountRole"), DataMember, EnumMember, Description("アカウントロールの削除")]
		アカウントロール削除,
		/// <summary>
		/// 名称 : パスワード作成
		/// 値 : "Create_Password"
		/// 説明 : パスワードの新規作成
		/// </summary>
		[MapValue(Value = "Create_Password"), DataMember, EnumMember, Description("パスワードの新規作成")]
		パスワード作成,
		/// <summary>
		/// 名称 : パスワード表示
		/// 値 : "Read_Password"
		/// 説明 : パスワードの閲覧
		/// </summary>
		[MapValue(Value = "Read_Password"), DataMember, EnumMember, Description("パスワードの閲覧")]
		パスワード表示,
		/// <summary>
		/// 名称 : パスワード更新
		/// 値 : "Update_Password"
		/// 説明 : パスワードの更新
		/// </summary>
		[MapValue(Value = "Update_Password"), DataMember, EnumMember, Description("パスワードの更新")]
		パスワード更新,
		/// <summary>
		/// 名称 : パスワード変更
		/// 値 : "Change_Password"
		/// 説明 : パスワードの変更
		/// </summary>
		[MapValue(Value = "Change_Password"), DataMember, EnumMember, Description("パスワードの変更")]
		パスワード変更,
		/// <summary>
		/// 名称 : パスワード削除
		/// 値 : "Delete_Password"
		/// 説明 : パスワードの削除
		/// </summary>
		[MapValue(Value = "Delete_Password"), DataMember, EnumMember, Description("パスワードの削除")]
		パスワード削除,
		/// <summary>
		/// 名称 : 職員作成
		/// 値 : "Create_Staff"
		/// 説明 : 職員マスタの新規作成
		/// </summary>
		[MapValue(Value = "Create_Staff"), DataMember, EnumMember, Description("職員マスタの新規作成")]
		職員作成,
		/// <summary>
		/// 名称 : 職員表示
		/// 値 : "Read_Staff"
		/// 説明 : 職員マスタの閲覧
		/// </summary>
		[MapValue(Value = "Read_Staff"), DataMember, EnumMember, Description("職員マスタの閲覧")]
		職員表示,
		/// <summary>
		/// 名称 : 職員更新
		/// 値 : "Update_Staff"
		/// 説明 : 職員マスタの更新
		/// </summary>
		[MapValue(Value = "Update_Staff"), DataMember, EnumMember, Description("職員マスタの更新")]
		職員更新,
		/// <summary>
		/// 名称 : 職員削除
		/// 値 : "Delete_Staff"
		/// 説明 : 職員マスタの削除
		/// </summary>
		[MapValue(Value = "Delete_Staff"), DataMember, EnumMember, Description("職員マスタの削除")]
		職員削除,
		/// <summary>
		/// 名称 : 教員作成
		/// 値 : "Create_Teacher"
		/// 説明 : 教員マスタの新規作成
		/// </summary>
		[MapValue(Value = "Create_Teacher"), DataMember, EnumMember, Description("教員マスタの新規作成")]
		教員作成,
		/// <summary>
		/// 名称 : 教員表示
		/// 値 : "Read_Teacher"
		/// 説明 : 教員マスタの閲覧
		/// </summary>
		[MapValue(Value = "Read_Teacher"), DataMember, EnumMember, Description("教員マスタの閲覧")]
		教員表示,
		/// <summary>
		/// 名称 : 教員更新
		/// 値 : "Update_Teacher"
		/// 説明 : 教員マスタの更新
		/// </summary>
		[MapValue(Value = "Update_Teacher"), DataMember, EnumMember, Description("教員マスタの更新")]
		教員更新,
		/// <summary>
		/// 名称 : 教員削除
		/// 値 : "Delete_Teacher"
		/// 説明 : 教員マスタの削除
		/// </summary>
		[MapValue(Value = "Delete_Teacher"), DataMember, EnumMember, Description("教員マスタの削除")]
		教員削除,
		/// <summary>
		/// 名称 : 他ユーザ作成
		/// 値 : "Create_User"
		/// 説明 : 他ユーザマスタの新規作成
		/// </summary>
		[MapValue(Value = "Create_User"), DataMember, EnumMember, Description("他ユーザマスタの新規作成")]
		他ユーザ作成,
		/// <summary>
		/// 名称 : 他ユーザ表示
		/// 値 : "Read_User"
		/// 説明 : 他ユーザマスタの閲覧
		/// </summary>
		[MapValue(Value = "Read_User"), DataMember, EnumMember, Description("他ユーザマスタの閲覧")]
		他ユーザ表示,
		/// <summary>
		/// 名称 : 他ユーザ更新
		/// 値 : "Update_User"
		/// 説明 : 他ユーザマスタの更新
		/// </summary>
		[MapValue(Value = "Update_User"), DataMember, EnumMember, Description("他ユーザマスタの更新")]
		他ユーザ更新,
		/// <summary>
		/// 名称 : 他ユーザ削除
		/// 値 : "Delete_User"
		/// 説明 : 他ユーザマスタの削除
		/// </summary>
		[MapValue(Value = "Delete_User"), DataMember, EnumMember, Description("他ユーザマスタの削除")]
		他ユーザ削除,
		/// <summary>
		/// 名称 : 性別区分作成
		/// 値 : "Create_SexType"
		/// 説明 : 性別区分マスタの新規作成
		/// </summary>
		[MapValue(Value = "Create_SexType"), DataMember, EnumMember, Description("性別区分マスタの新規作成")]
		性別区分作成,
		/// <summary>
		/// 名称 : 性別区分表示
		/// 値 : "Read_SexType"
		/// 説明 : 性別区分マスタの閲覧
		/// </summary>
		[MapValue(Value = "Read_SexType"), DataMember, EnumMember, Description("性別区分マスタの閲覧")]
		性別区分表示,
		/// <summary>
		/// 名称 : 性別区分更新
		/// 値 : "Update_SexType"
		/// 説明 : 性別区分マスタの更新
		/// </summary>
		[MapValue(Value = "Update_SexType"), DataMember, EnumMember, Description("性別区分マスタの更新")]
		性別区分更新,
		/// <summary>
		/// 名称 : 性別区分削除
		/// 値 : "Delete_SexType"
		/// 説明 : 性別区分マスタの削除
		/// </summary>
		[MapValue(Value = "Delete_SexType"), DataMember, EnumMember, Description("性別区分マスタの削除")]
		性別区分削除,
		/// <summary>
		/// 名称 : 勤務形態種別作成
		/// 値 : "Create_WorkStyleType"
		/// 説明 : 勤務形態種別マスタの新規作成
		/// </summary>
		[MapValue(Value = "Create_WorkStyleType"), DataMember, EnumMember, Description("勤務形態種別マスタの新規作成")]
		勤務形態種別作成,
		/// <summary>
		/// 名称 : 勤務形態種別表示
		/// 値 : "Read_WorkStyleType"
		/// 説明 : 勤務形態種別マスタの閲覧
		/// </summary>
		[MapValue(Value = "Read_WorkStyleType"), DataMember, EnumMember, Description("勤務形態種別マスタの閲覧")]
		勤務形態種別表示,
		/// <summary>
		/// 名称 : 勤務形態種別更新
		/// 値 : "Update_WorkStyleType"
		/// 説明 : 勤務形態種別マスタの更新
		/// </summary>
		[MapValue(Value = "Update_WorkStyleType"), DataMember, EnumMember, Description("勤務形態種別マスタの更新")]
		勤務形態種別更新,
		/// <summary>
		/// 名称 : 勤務形態種別削除
		/// 値 : "Delete_WorkStyleType"
		/// 説明 : 勤務形態種別マスタの削除
		/// </summary>
		[MapValue(Value = "Delete_WorkStyleType"), DataMember, EnumMember, Description("勤務形態種別マスタの削除")]
		勤務形態種別削除,
		/// <summary>
		/// 名称 : 職階種別作成
		/// 値 : "Create_PositionType"
		/// 説明 : 職階種別マスタの新規作成
		/// </summary>
		[MapValue(Value = "Create_PositionType"), DataMember, EnumMember, Description("職階種別マスタの新規作成")]
		職階種別作成,
		/// <summary>
		/// 名称 : 職階種別表示
		/// 値 : "Read_PositionType"
		/// 説明 : 職階種別マスタの閲覧
		/// </summary>
		[MapValue(Value = "Read_PositionType"), DataMember, EnumMember, Description("職階種別マスタの閲覧")]
		職階種別表示,
		/// <summary>
		/// 名称 : 職階種別更新
		/// 値 : "Update_PositionType"
		/// 説明 : 職階種別マスタの更新
		/// </summary>
		[MapValue(Value = "Update_PositionType"), DataMember, EnumMember, Description("職階種別マスタの更新")]
		職階種別更新,
		/// <summary>
		/// 名称 : 職階種別削除
		/// 値 : "Delete_PositionType"
		/// 説明 : 職階種別マスタの削除
		/// </summary>
		[MapValue(Value = "Delete_PositionType"), DataMember, EnumMember, Description("職階種別マスタの削除")]
		職階種別削除,
		/// <summary>
		/// 名称 : 教員資格種別作成
		/// 値 : "Create_TeacherLisenceType"
		/// 説明 : 教員資格種別マスタの新規作成
		/// </summary>
		[MapValue(Value = "Create_TeacherLisenceType"), DataMember, EnumMember, Description("教員資格種別マスタの新規作成")]
		教員資格種別作成,
		/// <summary>
		/// 名称 : 教員資格種別表示
		/// 値 : "Read_TeacherLisenceType"
		/// 説明 : 教員資格種別マスタの閲覧
		/// </summary>
		[MapValue(Value = "Read_TeacherLisenceType"), DataMember, EnumMember, Description("教員資格種別マスタの閲覧")]
		教員資格種別表示,
		/// <summary>
		/// 名称 : 教員資格種別更新
		/// 値 : "Update_TeacherLisenceType"
		/// 説明 : 教員資格種別マスタの更新
		/// </summary>
		[MapValue(Value = "Update_TeacherLisenceType"), DataMember, EnumMember, Description("教員資格種別マスタの更新")]
		教員資格種別更新,
		/// <summary>
		/// 名称 : 教員資格種別削除
		/// 値 : "Delete_TeacherLisenceType"
		/// 説明 : 教員資格種別マスタの削除
		/// </summary>
		[MapValue(Value = "Delete_TeacherLisenceType"), DataMember, EnumMember, Description("教員資格種別マスタの削除")]
		教員資格種別削除,
		/// <summary>
		/// 名称 : 人名作成
		/// 値 : "Create_PersonName"
		/// 説明 : 人名の新規作成
		/// </summary>
		[MapValue(Value = "Create_PersonName"), DataMember, EnumMember, Description("人名の新規作成")]
		人名作成,
		/// <summary>
		/// 名称 : 人名表示
		/// 値 : "Read_PersonName"
		/// 説明 : 人名の閲覧
		/// </summary>
		[MapValue(Value = "Read_PersonName"), DataMember, EnumMember, Description("人名の閲覧")]
		人名表示,
		/// <summary>
		/// 名称 : 人名更新
		/// 値 : "Update_PersonName"
		/// 説明 : 人名の更新
		/// </summary>
		[MapValue(Value = "Update_PersonName"), DataMember, EnumMember, Description("人名の更新")]
		人名更新,
		/// <summary>
		/// 名称 : 人名変更
		/// 値 : "Change_PersonName"
		/// 説明 : 人名の変更
		/// </summary>
		[MapValue(Value = "Change_PersonName"), DataMember, EnumMember, Description("人名の変更")]
		人名変更,
		/// <summary>
		/// 名称 : 人名削除
		/// 値 : "Delete_PersonName"
		/// 説明 : 人名の削除
		/// </summary>
		[MapValue(Value = "Delete_PersonName"), DataMember, EnumMember, Description("人名の削除")]
		人名削除,
		/// <summary>
		/// 名称 : 人名種別作成
		/// 値 : "Create_PersonNameType"
		/// 説明 : 人名種別の新規作成
		/// </summary>
		[MapValue(Value = "Create_PersonNameType"), DataMember, EnumMember, Description("人名種別の新規作成")]
		人名種別作成,
		/// <summary>
		/// 名称 : 人名種別表示
		/// 値 : "Read_PersonNameType"
		/// 説明 : 人名種別の閲覧
		/// </summary>
		[MapValue(Value = "Read_PersonNameType"), DataMember, EnumMember, Description("人名種別の閲覧")]
		人名種別表示,
		/// <summary>
		/// 名称 : 人名種別更新
		/// 値 : "Update_PersonNameType"
		/// 説明 : 人名種別の更新
		/// </summary>
		[MapValue(Value = "Update_PersonNameType"), DataMember, EnumMember, Description("人名種別の更新")]
		人名種別更新,
		/// <summary>
		/// 名称 : 人名種別削除
		/// 値 : "Delete_PersonNameType"
		/// 説明 : 人名種別の削除
		/// </summary>
		[MapValue(Value = "Delete_PersonNameType"), DataMember, EnumMember, Description("人名種別の削除")]
		人名種別削除,
		/// <summary>
		/// 名称 : 住所作成
		/// 値 : "Create_Address"
		/// 説明 : 住所の新規作成
		/// </summary>
		[MapValue(Value = "Create_Address"), DataMember, EnumMember, Description("住所の新規作成")]
		住所作成,
		/// <summary>
		/// 名称 : 住所表示
		/// 値 : "Read_Address"
		/// 説明 : 住所の閲覧
		/// </summary>
		[MapValue(Value = "Read_Address"), DataMember, EnumMember, Description("住所の閲覧")]
		住所表示,
		/// <summary>
		/// 名称 : 住所更新
		/// 値 : "Update_Address"
		/// 説明 : 住所の更新
		/// </summary>
		[MapValue(Value = "Update_Address"), DataMember, EnumMember, Description("住所の更新")]
		住所更新,
		/// <summary>
		/// 名称 : 住所変更
		/// 値 : "Change_Address"
		/// 説明 : 住所の変更
		/// </summary>
		[MapValue(Value = "Change_Address"), DataMember, EnumMember, Description("住所の変更")]
		住所変更,
		/// <summary>
		/// 名称 : 住所削除
		/// 値 : "Delete_Address"
		/// 説明 : 住所の削除
		/// </summary>
		[MapValue(Value = "Delete_Address"), DataMember, EnumMember, Description("住所の削除")]
		住所削除,
		/// <summary>
		/// 名称 : 住所種別作成
		/// 値 : "Create_AddressType"
		/// 説明 : 住所種別の新規作成
		/// </summary>
		[MapValue(Value = "Create_AddressType"), DataMember, EnumMember, Description("住所種別の新規作成")]
		住所種別作成,
		/// <summary>
		/// 名称 : 住所種別表示
		/// 値 : "Read_AddressType"
		/// 説明 : 住所種別の閲覧
		/// </summary>
		[MapValue(Value = "Read_AddressType"), DataMember, EnumMember, Description("住所種別の閲覧")]
		住所種別表示,
		/// <summary>
		/// 名称 : 住所種別更新
		/// 値 : "Update_AddressType"
		/// 説明 : 住所種別の更新
		/// </summary>
		[MapValue(Value = "Update_AddressType"), DataMember, EnumMember, Description("住所種別の更新")]
		住所種別更新,
		/// <summary>
		/// 名称 : 住所種別削除
		/// 値 : "Delete_AddressType"
		/// 説明 : 住所種別の削除
		/// </summary>
		[MapValue(Value = "Delete_AddressType"), DataMember, EnumMember, Description("住所種別の削除")]
		住所種別削除,
		/// <summary>
		/// 名称 : 連絡先作成
		/// 値 : "Create_Contact"
		/// 説明 : 連絡先の新規作成
		/// </summary>
		[MapValue(Value = "Create_Contact"), DataMember, EnumMember, Description("連絡先の新規作成")]
		連絡先作成,
		/// <summary>
		/// 名称 : 連絡先表示
		/// 値 : "Read_Contact"
		/// 説明 : 連絡先の閲覧
		/// </summary>
		[MapValue(Value = "Read_Contact"), DataMember, EnumMember, Description("連絡先の閲覧")]
		連絡先表示,
		/// <summary>
		/// 名称 : 連絡先更新
		/// 値 : "Update_Contact"
		/// 説明 : 連絡先の更新
		/// </summary>
		[MapValue(Value = "Update_Contact"), DataMember, EnumMember, Description("連絡先の更新")]
		連絡先更新,
		/// <summary>
		/// 名称 : 連絡先変更
		/// 値 : "Change_Contact"
		/// 説明 : 連絡先の変更
		/// </summary>
		[MapValue(Value = "Change_Contact"), DataMember, EnumMember, Description("連絡先の変更")]
		連絡先変更,
		/// <summary>
		/// 名称 : 連絡先削除
		/// 値 : "Delete_Contact"
		/// 説明 : 連絡先の削除
		/// </summary>
		[MapValue(Value = "Delete_Contact"), DataMember, EnumMember, Description("連絡先の削除")]
		連絡先削除,
		/// <summary>
		/// 名称 : 連絡先種別作成
		/// 値 : "Create_ContactType"
		/// 説明 : 連絡先種別の新規作成
		/// </summary>
		[MapValue(Value = "Create_ContactType"), DataMember, EnumMember, Description("連絡先種別の新規作成")]
		連絡先種別作成,
		/// <summary>
		/// 名称 : 連絡先種別表示
		/// 値 : "Read_ContactType"
		/// 説明 : 連絡先種別の閲覧
		/// </summary>
		[MapValue(Value = "Read_ContactType"), DataMember, EnumMember, Description("連絡先種別の閲覧")]
		連絡先種別表示,
		/// <summary>
		/// 名称 : 連絡先種別更新
		/// 値 : "Update_ContactType"
		/// 説明 : 連絡先種別の更新
		/// </summary>
		[MapValue(Value = "Update_ContactType"), DataMember, EnumMember, Description("連絡先種別の更新")]
		連絡先種別更新,
		/// <summary>
		/// 名称 : 連絡先種別削除
		/// 値 : "Delete_ContactType"
		/// 説明 : 連絡先種別の削除
		/// </summary>
		[MapValue(Value = "Delete_ContactType"), DataMember, EnumMember, Description("連絡先種別の削除")]
		連絡先種別削除,
		/// <summary>
		/// 名称 : エラーログ作成
		/// 値 : "Create_ErrorLog"
		/// 説明 : エラーログの新規作成
		/// </summary>
		[MapValue(Value = "Create_ErrorLog"), DataMember, EnumMember, Description("エラーログの新規作成")]
		エラーログ作成,
		/// <summary>
		/// 名称 : エラーログ表示
		/// 値 : "Read_ErrorLog"
		/// 説明 : エラーログの閲覧
		/// </summary>
		[MapValue(Value = "Read_ErrorLog"), DataMember, EnumMember, Description("エラーログの閲覧")]
		エラーログ表示,
		/// <summary>
		/// 名称 : エラーログ更新
		/// 値 : "Update_ErrorLog"
		/// 説明 : エラーログの更新
		/// </summary>
		[MapValue(Value = "Update_ErrorLog"), DataMember, EnumMember, Description("エラーログの更新")]
		エラーログ更新,
		/// <summary>
		/// 名称 : エラーログ削除
		/// 値 : "Delete_ErrorLog"
		/// 説明 : エラーログの削除
		/// </summary>
		[MapValue(Value = "Delete_ErrorLog"), DataMember, EnumMember, Description("エラーログの削除")]
		エラーログ削除,
		/// <summary>
		/// 名称 : テスト作成
		/// 値 : "Create_Test"
		/// 説明 : テストの新規作成
		/// </summary>
		[MapValue(Value = "Create_Test"), DataMember, EnumMember, Description("テストの新規作成")]
		テスト作成,
		/// <summary>
		/// 名称 : テスト表示
		/// 値 : "Read_Test"
		/// 説明 : テストの閲覧
		/// </summary>
		[MapValue(Value = "Read_Test"), DataMember, EnumMember, Description("テストの閲覧")]
		テスト表示,
		/// <summary>
		/// 名称 : テスト更新
		/// 値 : "Update_Test"
		/// 説明 : テストの更新
		/// </summary>
		[MapValue(Value = "Update_Test"), DataMember, EnumMember, Description("テストの更新")]
		テスト更新,
		/// <summary>
		/// 名称 : テスト削除
		/// 値 : "Delete_Test"
		/// 説明 : テストの削除
		/// </summary>
		[MapValue(Value = "Delete_Test"), DataMember, EnumMember, Description("テストの削除")]
		テスト削除,
	}
	#endregion
	#region enum拡張
	/// <summary>
	/// enum拡張
	/// </summary>
	public static partial class EnumExtend
	{
		#region ValidityFlag拡張メソッド
		/// <summary>
		/// ValidityFlagを列挙する
		/// </summary>
		/// <returns></returns>
		public static IEnumerable<ValidityFlag> ValidityFlagEnumerator()
		{
			foreach (ValidityFlag v in Enum.GetValues(typeof(ValidityFlag)))
				yield return v;
		}

		/// <summary>
		/// 整数値からValidityFlagへの変換
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing"></param>
		/// <returns></returns>
		public static ValidityFlag? ToValidityFlag(this int self, ValidityFlag? missing = null)
		{
			switch (self)
			{
				case 0:
					return ValidityFlag.無効;
				case 1:
					return ValidityFlag.有効;
				default:
					return (ValidityFlag?)missing;
			}
		}

		/// <summary>
		/// ValidityFlagの値取得
		/// </summary>
		/// <param name="self"></param>
		/// <returns></returns>
		public static int Val(this ValidityFlag self)
		{
			switch (self)
			{
				case ValidityFlag.無効:
					return 0;
				case ValidityFlag.有効:
					return 1;
				default:
					throw new Exception("Unknown ValidityFlag");
			}
		}

		/// <summary>
		/// ValidityFlag名称
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string Name(this ValidityFlag self, string missing = null)
		{
			switch (self)
			{
				case ValidityFlag.無効:
					return "無効";
				case ValidityFlag.有効:
					return "有効";
				default:
					return missing;
			}
		}

		/// <summary>
		/// ValidityFlag表示名
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string DisplayName(this ValidityFlag self, string missing = null)
		{
			switch (self)
			{
				case ValidityFlag.無効:
					return "無効";
				case ValidityFlag.有効:
					return "有効";
				default:
					return missing;
			}
		}

		/// <summary>
		/// ValidityFlag略称
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string Abbrev(this ValidityFlag self, string missing = null)
		{
			switch (self)
			{
				case ValidityFlag.無効:
					return "無";
				case ValidityFlag.有効:
					return "有";
				default:
					return missing;
			}
		}

		/// <summary>
		/// ValidityFlag英字名称
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string NameEn(this ValidityFlag self, string missing = null)
		{
			switch (self)
			{
				case ValidityFlag.無効:
					return "Invalid";
				case ValidityFlag.有効:
					return "Valid";
				default:
					return missing;
			}
		}

		/// <summary>
		/// ValidityFlag英字表示名
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string DisplayNameEn(this ValidityFlag self, string missing = null)
		{
			switch (self)
			{
				case ValidityFlag.無効:
					return "Invalid";
				case ValidityFlag.有効:
					return "Valid";
				default:
					return missing;
			}
		}

		/// <summary>
		/// ValidityFlag英字略称
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string AbbrevEn(this ValidityFlag self, string missing = null)
		{
			switch (self)
			{
				case ValidityFlag.無効:
					return "X";
				case ValidityFlag.有効:
					return "O";
				default:
					return missing;
			}
		}
		#endregion
		#region HashMethod拡張メソッド
		/// <summary>
		/// HashMethodを列挙する
		/// </summary>
		/// <returns></returns>
		public static IEnumerable<HashMethod> HashMethodEnumerator()
		{
			foreach (HashMethod v in Enum.GetValues(typeof(HashMethod)))
				yield return v;
		}

		/// <summary>
		/// 文字列値からHashMethodへの変換
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing"></param>
		/// <returns></returns>
		public static HashMethod? ToHashMethod(this string self, HashMethod? missing = null)
		{
			switch (self)
			{
				case "SHA256":
					return HashMethod.SHA256;
				case "RAW":
					return HashMethod.平文;
				default:
					return (HashMethod?)missing;
			}
		}

		/// <summary>
		/// HashMethodの値取得
		/// </summary>
		/// <param name="self"></param>
		/// <returns></returns>
		public static string Val(this HashMethod self)
		{
			switch (self)
			{
				case HashMethod.SHA256:
					return "SHA256";
				case HashMethod.平文:
					return "RAW";
				default:
					throw new Exception("Unknown HashMethod");
			}
		}

		/// <summary>
		/// HashMethod名称
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string Name(this HashMethod self, string missing = null)
		{
			switch (self)
			{
				case HashMethod.SHA256:
					return "SHA256";
				case HashMethod.平文:
					return "平文";
				default:
					return missing;
			}
		}

		/// <summary>
		/// HashMethod表示名
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string DisplayName(this HashMethod self, string missing = null)
		{
			switch (self)
			{
				case HashMethod.SHA256:
					return "SHA256";
				case HashMethod.平文:
					return "平文のまま";
				default:
					return missing;
			}
		}

		/// <summary>
		/// HashMethod略称
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string Abbrev(this HashMethod self, string missing = null)
		{
			switch (self)
			{
				case HashMethod.SHA256:
					return "S";
				case HashMethod.平文:
					return "R";
				default:
					return missing;
			}
		}

		/// <summary>
		/// HashMethod英字名称
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string NameEn(this HashMethod self, string missing = null)
		{
			switch (self)
			{
				case HashMethod.SHA256:
					return "SHA256";
				case HashMethod.平文:
					return "RAW";
				default:
					return missing;
			}
		}

		/// <summary>
		/// HashMethod英字表示名
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string DisplayNameEn(this HashMethod self, string missing = null)
		{
			switch (self)
			{
				case HashMethod.SHA256:
					return "SHA256";
				case HashMethod.平文:
					return "RAW";
				default:
					return missing;
			}
		}

		/// <summary>
		/// HashMethod英字略称
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string AbbrevEn(this HashMethod self, string missing = null)
		{
			switch (self)
			{
				case HashMethod.SHA256:
					return "S";
				case HashMethod.平文:
					return "R";
				default:
					return missing;
			}
		}
		#endregion
		#region LockReason拡張メソッド
		/// <summary>
		/// LockReasonを列挙する
		/// </summary>
		/// <returns></returns>
		public static IEnumerable<LockReason> LockReasonEnumerator()
		{
			foreach (LockReason v in Enum.GetValues(typeof(LockReason)))
				yield return v;
		}

		/// <summary>
		/// 整数値からLockReasonへの変換
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing"></param>
		/// <returns></returns>
		public static LockReason? ToLockReason(this int self, LockReason? missing = null)
		{
			switch (self)
			{
				case 0:
					return LockReason.なし;
				case 1:
					return LockReason.失敗;
				case 2:
					return LockReason.凍結;
				case 9:
					return LockReason.その他;
				default:
					return (LockReason?)missing;
			}
		}

		/// <summary>
		/// LockReasonの値取得
		/// </summary>
		/// <param name="self"></param>
		/// <returns></returns>
		public static int Val(this LockReason self)
		{
			switch (self)
			{
				case LockReason.なし:
					return 0;
				case LockReason.失敗:
					return 1;
				case LockReason.凍結:
					return 2;
				case LockReason.その他:
					return 9;
				default:
					throw new Exception("Unknown LockReason");
			}
		}

		/// <summary>
		/// LockReason名称
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string Name(this LockReason self, string missing = null)
		{
			switch (self)
			{
				case LockReason.なし:
					return "なし";
				case LockReason.失敗:
					return "失敗";
				case LockReason.凍結:
					return "凍結";
				case LockReason.その他:
					return "その他";
				default:
					return missing;
			}
		}

		/// <summary>
		/// LockReason表示名
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string DisplayName(this LockReason self, string missing = null)
		{
			switch (self)
			{
				case LockReason.なし:
					return "なし";
				case LockReason.失敗:
					return "認証失敗";
				case LockReason.凍結:
					return "アカウント凍結";
				case LockReason.その他:
					return "その他";
				default:
					return missing;
			}
		}

		/// <summary>
		/// LockReason略称
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string Abbrev(this LockReason self, string missing = null)
		{
			switch (self)
			{
				case LockReason.なし:
					return "無";
				case LockReason.失敗:
					return "連";
				case LockReason.凍結:
					return "凍";
				case LockReason.その他:
					return "他";
				default:
					return missing;
			}
		}

		/// <summary>
		/// LockReason英字名称
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string NameEn(this LockReason self, string missing = null)
		{
			switch (self)
			{
				case LockReason.なし:
					return "None";
				case LockReason.失敗:
					return "Fail";
				case LockReason.凍結:
					return "Exclude";
				case LockReason.その他:
					return "Other";
				default:
					return missing;
			}
		}

		/// <summary>
		/// LockReason英字表示名
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string DisplayNameEn(this LockReason self, string missing = null)
		{
			switch (self)
			{
				case LockReason.なし:
					return "None";
				case LockReason.失敗:
					return "Fail";
				case LockReason.凍結:
					return "Exclude";
				case LockReason.その他:
					return "Other";
				default:
					return missing;
			}
		}

		/// <summary>
		/// LockReason英字略称
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string AbbrevEn(this LockReason self, string missing = null)
		{
			switch (self)
			{
				case LockReason.なし:
					return "N";
				case LockReason.失敗:
					return "F";
				case LockReason.凍結:
					return "E";
				case LockReason.その他:
					return "O";
				default:
					return missing;
			}
		}
		#endregion
		#region Gender拡張メソッド
		/// <summary>
		/// Genderを列挙する
		/// </summary>
		/// <returns></returns>
		public static IEnumerable<Gender> GenderEnumerator()
		{
			foreach (Gender v in Enum.GetValues(typeof(Gender)))
				yield return v;
		}

		/// <summary>
		/// 整数値からGenderへの変換
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing"></param>
		/// <returns></returns>
		public static Gender? ToGender(this int self, Gender? missing = null)
		{
			switch (self)
			{
				case 1:
					return Gender.男性;
				case 2:
					return Gender.女性;
				default:
					return (Gender?)missing;
			}
		}

		/// <summary>
		/// Genderの値取得
		/// </summary>
		/// <param name="self"></param>
		/// <returns></returns>
		public static int Val(this Gender self)
		{
			switch (self)
			{
				case Gender.男性:
					return 1;
				case Gender.女性:
					return 2;
				default:
					throw new Exception("Unknown Gender");
			}
		}

		/// <summary>
		/// Gender名称
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string Name(this Gender self, string missing = null)
		{
			switch (self)
			{
				case Gender.男性:
					return "男性";
				case Gender.女性:
					return "女性";
				default:
					return missing;
			}
		}

		/// <summary>
		/// Gender表示名
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string DisplayName(this Gender self, string missing = null)
		{
			switch (self)
			{
				case Gender.男性:
					return "男性";
				case Gender.女性:
					return "女性";
				default:
					return missing;
			}
		}

		/// <summary>
		/// Gender略称
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string Abbrev(this Gender self, string missing = null)
		{
			switch (self)
			{
				case Gender.男性:
					return "男";
				case Gender.女性:
					return "女";
				default:
					return missing;
			}
		}

		/// <summary>
		/// Gender英字名称
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string NameEn(this Gender self, string missing = null)
		{
			switch (self)
			{
				case Gender.男性:
					return "Male";
				case Gender.女性:
					return "Female";
				default:
					return missing;
			}
		}

		/// <summary>
		/// Gender英字表示名
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string DisplayNameEn(this Gender self, string missing = null)
		{
			switch (self)
			{
				case Gender.男性:
					return "Male";
				case Gender.女性:
					return "Female";
				default:
					return missing;
			}
		}

		/// <summary>
		/// Gender英字略称
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string AbbrevEn(this Gender self, string missing = null)
		{
			switch (self)
			{
				case Gender.男性:
					return "M";
				case Gender.女性:
					return "F";
				default:
					return missing;
			}
		}
		#endregion
		#region UserType拡張メソッド
		/// <summary>
		/// UserTypeを列挙する
		/// </summary>
		/// <returns></returns>
		public static IEnumerable<UserType> UserTypeEnumerator()
		{
			foreach (UserType v in Enum.GetValues(typeof(UserType)))
				yield return v;
		}

		/// <summary>
		/// 整数値からUserTypeへの変換
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing"></param>
		/// <returns></returns>
		public static UserType? ToUserType(this int self, UserType? missing = null)
		{
			switch (self)
			{
				case 1:
					return UserType.職員;
				case 2:
					return UserType.教員;
				case 3:
					return UserType.在学生;
				case 4:
					return UserType.除籍生;
				case 5:
					return UserType.保護者;
				case 6:
					return UserType.他ユーザ;
				case 99:
					return UserType.ゴースト;
				default:
					return (UserType?)missing;
			}
		}

		/// <summary>
		/// UserTypeの値取得
		/// </summary>
		/// <param name="self"></param>
		/// <returns></returns>
		public static int Val(this UserType self)
		{
			switch (self)
			{
				case UserType.職員:
					return 1;
				case UserType.教員:
					return 2;
				case UserType.在学生:
					return 3;
				case UserType.除籍生:
					return 4;
				case UserType.保護者:
					return 5;
				case UserType.他ユーザ:
					return 6;
				case UserType.ゴースト:
					return 99;
				default:
					throw new Exception("Unknown UserType");
			}
		}

		/// <summary>
		/// UserType名称
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string Name(this UserType self, string missing = null)
		{
			switch (self)
			{
				case UserType.職員:
					return "職員";
				case UserType.教員:
					return "教員";
				case UserType.在学生:
					return "在学生";
				case UserType.除籍生:
					return "除籍生";
				case UserType.保護者:
					return "保護者";
				case UserType.他ユーザ:
					return "他ユーザ";
				case UserType.ゴースト:
					return "ゴースト";
				default:
					return missing;
			}
		}

		/// <summary>
		/// UserType表示名
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string DisplayName(this UserType self, string missing = null)
		{
			switch (self)
			{
				case UserType.職員:
					return "職員";
				case UserType.教員:
					return "教員";
				case UserType.在学生:
					return "在学生";
				case UserType.除籍生:
					return "除籍生";
				case UserType.保護者:
					return "保護者";
				case UserType.他ユーザ:
					return "他ユーザ";
				case UserType.ゴースト:
					return "ゴースト";
				default:
					return missing;
			}
		}

		/// <summary>
		/// UserType略称
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string Abbrev(this UserType self, string missing = null)
		{
			switch (self)
			{
				case UserType.職員:
					return "職";
				case UserType.教員:
					return "教";
				case UserType.在学生:
					return "学";
				case UserType.除籍生:
					return "除";
				case UserType.保護者:
					return "親";
				case UserType.他ユーザ:
					return "他";
				case UserType.ゴースト:
					return "幽";
				default:
					return missing;
			}
		}

		/// <summary>
		/// UserType英字名称
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string NameEn(this UserType self, string missing = null)
		{
			switch (self)
			{
				case UserType.職員:
					return "Cast";
				case UserType.教員:
					return "Teacher";
				case UserType.在学生:
					return "Student";
				case UserType.除籍生:
					return "OutStudent";
				case UserType.保護者:
					return "Parent";
				case UserType.他ユーザ:
					return "User";
				case UserType.ゴースト:
					return "Ghost";
				default:
					return missing;
			}
		}

		/// <summary>
		/// UserType英字表示名
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string DisplayNameEn(this UserType self, string missing = null)
		{
			switch (self)
			{
				case UserType.職員:
					return "Cast";
				case UserType.教員:
					return "Teacher";
				case UserType.在学生:
					return "Student";
				case UserType.除籍生:
					return "OutStudent";
				case UserType.保護者:
					return "Parent";
				case UserType.他ユーザ:
					return "User";
				case UserType.ゴースト:
					return "Ghost";
				default:
					return missing;
			}
		}

		/// <summary>
		/// UserType英字略称
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string AbbrevEn(this UserType self, string missing = null)
		{
			switch (self)
			{
				case UserType.職員:
					return "C";
				case UserType.教員:
					return "T";
				case UserType.在学生:
					return "S";
				case UserType.除籍生:
					return "O";
				case UserType.保護者:
					return "P";
				case UserType.他ユーザ:
					return "U";
				case UserType.ゴースト:
					return "G";
				default:
					return missing;
			}
		}
		#endregion
		#region PermissionType拡張メソッド
		/// <summary>
		/// PermissionTypeを列挙する
		/// </summary>
		/// <returns></returns>
		public static IEnumerable<PermissionType> PermissionTypeEnumerator()
		{
			foreach (PermissionType v in Enum.GetValues(typeof(PermissionType)))
				yield return v;
		}

		/// <summary>
		/// 文字列値からPermissionTypeへの変換
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing"></param>
		/// <returns></returns>
		public static PermissionType? ToPermissionType(this string self, PermissionType? missing = null)
		{
			switch (self)
			{
				case "Create_Role":
					return PermissionType.ロール作成;
				case "Read_Role":
					return PermissionType.ロール表示;
				case "Update_Role":
					return PermissionType.ロール更新;
				case "Delete_Role":
					return PermissionType.ロール削除;
				case "Create_RolePermission":
					return PermissionType.ロール権限作成;
				case "Read_RolePermission":
					return PermissionType.ロール権限表示;
				case "Update_RolePermission":
					return PermissionType.ロール権限更新;
				case "Delete_RolePermission":
					return PermissionType.ロール権限削除;
				case "Create_Account":
					return PermissionType.アカウント作成;
				case "Read_Account":
					return PermissionType.アカウント表示;
				case "Update_Account":
					return PermissionType.アカウント更新;
				case "Delete_Account":
					return PermissionType.アカウント削除;
				case "Create_AccountRole":
					return PermissionType.アカウントロール作成;
				case "Read_AccountRole":
					return PermissionType.アカウントロール表示;
				case "Update_AccountRole":
					return PermissionType.アカウントロール更新;
				case "Delete_AccountRole":
					return PermissionType.アカウントロール削除;
				case "Create_Password":
					return PermissionType.パスワード作成;
				case "Read_Password":
					return PermissionType.パスワード表示;
				case "Update_Password":
					return PermissionType.パスワード更新;
				case "Change_Password":
					return PermissionType.パスワード変更;
				case "Delete_Password":
					return PermissionType.パスワード削除;
				case "Create_Staff":
					return PermissionType.職員作成;
				case "Read_Staff":
					return PermissionType.職員表示;
				case "Update_Staff":
					return PermissionType.職員更新;
				case "Delete_Staff":
					return PermissionType.職員削除;
				case "Create_Teacher":
					return PermissionType.教員作成;
				case "Read_Teacher":
					return PermissionType.教員表示;
				case "Update_Teacher":
					return PermissionType.教員更新;
				case "Delete_Teacher":
					return PermissionType.教員削除;
				case "Create_User":
					return PermissionType.他ユーザ作成;
				case "Read_User":
					return PermissionType.他ユーザ表示;
				case "Update_User":
					return PermissionType.他ユーザ更新;
				case "Delete_User":
					return PermissionType.他ユーザ削除;
				case "Create_SexType":
					return PermissionType.性別区分作成;
				case "Read_SexType":
					return PermissionType.性別区分表示;
				case "Update_SexType":
					return PermissionType.性別区分更新;
				case "Delete_SexType":
					return PermissionType.性別区分削除;
				case "Create_WorkStyleType":
					return PermissionType.勤務形態種別作成;
				case "Read_WorkStyleType":
					return PermissionType.勤務形態種別表示;
				case "Update_WorkStyleType":
					return PermissionType.勤務形態種別更新;
				case "Delete_WorkStyleType":
					return PermissionType.勤務形態種別削除;
				case "Create_PositionType":
					return PermissionType.職階種別作成;
				case "Read_PositionType":
					return PermissionType.職階種別表示;
				case "Update_PositionType":
					return PermissionType.職階種別更新;
				case "Delete_PositionType":
					return PermissionType.職階種別削除;
				case "Create_TeacherLisenceType":
					return PermissionType.教員資格種別作成;
				case "Read_TeacherLisenceType":
					return PermissionType.教員資格種別表示;
				case "Update_TeacherLisenceType":
					return PermissionType.教員資格種別更新;
				case "Delete_TeacherLisenceType":
					return PermissionType.教員資格種別削除;
				case "Create_PersonName":
					return PermissionType.人名作成;
				case "Read_PersonName":
					return PermissionType.人名表示;
				case "Update_PersonName":
					return PermissionType.人名更新;
				case "Change_PersonName":
					return PermissionType.人名変更;
				case "Delete_PersonName":
					return PermissionType.人名削除;
				case "Create_PersonNameType":
					return PermissionType.人名種別作成;
				case "Read_PersonNameType":
					return PermissionType.人名種別表示;
				case "Update_PersonNameType":
					return PermissionType.人名種別更新;
				case "Delete_PersonNameType":
					return PermissionType.人名種別削除;
				case "Create_Address":
					return PermissionType.住所作成;
				case "Read_Address":
					return PermissionType.住所表示;
				case "Update_Address":
					return PermissionType.住所更新;
				case "Change_Address":
					return PermissionType.住所変更;
				case "Delete_Address":
					return PermissionType.住所削除;
				case "Create_AddressType":
					return PermissionType.住所種別作成;
				case "Read_AddressType":
					return PermissionType.住所種別表示;
				case "Update_AddressType":
					return PermissionType.住所種別更新;
				case "Delete_AddressType":
					return PermissionType.住所種別削除;
				case "Create_Contact":
					return PermissionType.連絡先作成;
				case "Read_Contact":
					return PermissionType.連絡先表示;
				case "Update_Contact":
					return PermissionType.連絡先更新;
				case "Change_Contact":
					return PermissionType.連絡先変更;
				case "Delete_Contact":
					return PermissionType.連絡先削除;
				case "Create_ContactType":
					return PermissionType.連絡先種別作成;
				case "Read_ContactType":
					return PermissionType.連絡先種別表示;
				case "Update_ContactType":
					return PermissionType.連絡先種別更新;
				case "Delete_ContactType":
					return PermissionType.連絡先種別削除;
				case "Create_ErrorLog":
					return PermissionType.エラーログ作成;
				case "Read_ErrorLog":
					return PermissionType.エラーログ表示;
				case "Update_ErrorLog":
					return PermissionType.エラーログ更新;
				case "Delete_ErrorLog":
					return PermissionType.エラーログ削除;
				case "Create_Test":
					return PermissionType.テスト作成;
				case "Read_Test":
					return PermissionType.テスト表示;
				case "Update_Test":
					return PermissionType.テスト更新;
				case "Delete_Test":
					return PermissionType.テスト削除;
				default:
					return (PermissionType?)missing;
			}
		}

		/// <summary>
		/// PermissionTypeの値取得
		/// </summary>
		/// <param name="self"></param>
		/// <returns></returns>
		public static string Val(this PermissionType self)
		{
			switch (self)
			{
				case PermissionType.ロール作成:
					return "Create_Role";
				case PermissionType.ロール表示:
					return "Read_Role";
				case PermissionType.ロール更新:
					return "Update_Role";
				case PermissionType.ロール削除:
					return "Delete_Role";
				case PermissionType.ロール権限作成:
					return "Create_RolePermission";
				case PermissionType.ロール権限表示:
					return "Read_RolePermission";
				case PermissionType.ロール権限更新:
					return "Update_RolePermission";
				case PermissionType.ロール権限削除:
					return "Delete_RolePermission";
				case PermissionType.アカウント作成:
					return "Create_Account";
				case PermissionType.アカウント表示:
					return "Read_Account";
				case PermissionType.アカウント更新:
					return "Update_Account";
				case PermissionType.アカウント削除:
					return "Delete_Account";
				case PermissionType.アカウントロール作成:
					return "Create_AccountRole";
				case PermissionType.アカウントロール表示:
					return "Read_AccountRole";
				case PermissionType.アカウントロール更新:
					return "Update_AccountRole";
				case PermissionType.アカウントロール削除:
					return "Delete_AccountRole";
				case PermissionType.パスワード作成:
					return "Create_Password";
				case PermissionType.パスワード表示:
					return "Read_Password";
				case PermissionType.パスワード更新:
					return "Update_Password";
				case PermissionType.パスワード変更:
					return "Change_Password";
				case PermissionType.パスワード削除:
					return "Delete_Password";
				case PermissionType.職員作成:
					return "Create_Staff";
				case PermissionType.職員表示:
					return "Read_Staff";
				case PermissionType.職員更新:
					return "Update_Staff";
				case PermissionType.職員削除:
					return "Delete_Staff";
				case PermissionType.教員作成:
					return "Create_Teacher";
				case PermissionType.教員表示:
					return "Read_Teacher";
				case PermissionType.教員更新:
					return "Update_Teacher";
				case PermissionType.教員削除:
					return "Delete_Teacher";
				case PermissionType.他ユーザ作成:
					return "Create_User";
				case PermissionType.他ユーザ表示:
					return "Read_User";
				case PermissionType.他ユーザ更新:
					return "Update_User";
				case PermissionType.他ユーザ削除:
					return "Delete_User";
				case PermissionType.性別区分作成:
					return "Create_SexType";
				case PermissionType.性別区分表示:
					return "Read_SexType";
				case PermissionType.性別区分更新:
					return "Update_SexType";
				case PermissionType.性別区分削除:
					return "Delete_SexType";
				case PermissionType.勤務形態種別作成:
					return "Create_WorkStyleType";
				case PermissionType.勤務形態種別表示:
					return "Read_WorkStyleType";
				case PermissionType.勤務形態種別更新:
					return "Update_WorkStyleType";
				case PermissionType.勤務形態種別削除:
					return "Delete_WorkStyleType";
				case PermissionType.職階種別作成:
					return "Create_PositionType";
				case PermissionType.職階種別表示:
					return "Read_PositionType";
				case PermissionType.職階種別更新:
					return "Update_PositionType";
				case PermissionType.職階種別削除:
					return "Delete_PositionType";
				case PermissionType.教員資格種別作成:
					return "Create_TeacherLisenceType";
				case PermissionType.教員資格種別表示:
					return "Read_TeacherLisenceType";
				case PermissionType.教員資格種別更新:
					return "Update_TeacherLisenceType";
				case PermissionType.教員資格種別削除:
					return "Delete_TeacherLisenceType";
				case PermissionType.人名作成:
					return "Create_PersonName";
				case PermissionType.人名表示:
					return "Read_PersonName";
				case PermissionType.人名更新:
					return "Update_PersonName";
				case PermissionType.人名変更:
					return "Change_PersonName";
				case PermissionType.人名削除:
					return "Delete_PersonName";
				case PermissionType.人名種別作成:
					return "Create_PersonNameType";
				case PermissionType.人名種別表示:
					return "Read_PersonNameType";
				case PermissionType.人名種別更新:
					return "Update_PersonNameType";
				case PermissionType.人名種別削除:
					return "Delete_PersonNameType";
				case PermissionType.住所作成:
					return "Create_Address";
				case PermissionType.住所表示:
					return "Read_Address";
				case PermissionType.住所更新:
					return "Update_Address";
				case PermissionType.住所変更:
					return "Change_Address";
				case PermissionType.住所削除:
					return "Delete_Address";
				case PermissionType.住所種別作成:
					return "Create_AddressType";
				case PermissionType.住所種別表示:
					return "Read_AddressType";
				case PermissionType.住所種別更新:
					return "Update_AddressType";
				case PermissionType.住所種別削除:
					return "Delete_AddressType";
				case PermissionType.連絡先作成:
					return "Create_Contact";
				case PermissionType.連絡先表示:
					return "Read_Contact";
				case PermissionType.連絡先更新:
					return "Update_Contact";
				case PermissionType.連絡先変更:
					return "Change_Contact";
				case PermissionType.連絡先削除:
					return "Delete_Contact";
				case PermissionType.連絡先種別作成:
					return "Create_ContactType";
				case PermissionType.連絡先種別表示:
					return "Read_ContactType";
				case PermissionType.連絡先種別更新:
					return "Update_ContactType";
				case PermissionType.連絡先種別削除:
					return "Delete_ContactType";
				case PermissionType.エラーログ作成:
					return "Create_ErrorLog";
				case PermissionType.エラーログ表示:
					return "Read_ErrorLog";
				case PermissionType.エラーログ更新:
					return "Update_ErrorLog";
				case PermissionType.エラーログ削除:
					return "Delete_ErrorLog";
				case PermissionType.テスト作成:
					return "Create_Test";
				case PermissionType.テスト表示:
					return "Read_Test";
				case PermissionType.テスト更新:
					return "Update_Test";
				case PermissionType.テスト削除:
					return "Delete_Test";
				default:
					throw new Exception("Unknown PermissionType");
			}
		}

		/// <summary>
		/// PermissionType名称
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string Name(this PermissionType self, string missing = null)
		{
			switch (self)
			{
				case PermissionType.ロール作成:
					return "ロール作成";
				case PermissionType.ロール表示:
					return "ロール表示";
				case PermissionType.ロール更新:
					return "ロール更新";
				case PermissionType.ロール削除:
					return "ロール削除";
				case PermissionType.ロール権限作成:
					return "ロール権限作成";
				case PermissionType.ロール権限表示:
					return "ロール権限表示";
				case PermissionType.ロール権限更新:
					return "ロール権限更新";
				case PermissionType.ロール権限削除:
					return "ロール権限削除";
				case PermissionType.アカウント作成:
					return "アカウント作成";
				case PermissionType.アカウント表示:
					return "アカウント表示";
				case PermissionType.アカウント更新:
					return "アカウント更新";
				case PermissionType.アカウント削除:
					return "アカウント削除";
				case PermissionType.アカウントロール作成:
					return "アカウントロール作成";
				case PermissionType.アカウントロール表示:
					return "アカウントロール表示";
				case PermissionType.アカウントロール更新:
					return "アカウントロール更新";
				case PermissionType.アカウントロール削除:
					return "アカウントロール削除";
				case PermissionType.パスワード作成:
					return "パスワード作成";
				case PermissionType.パスワード表示:
					return "パスワード表示";
				case PermissionType.パスワード更新:
					return "パスワード更新";
				case PermissionType.パスワード変更:
					return "パスワード変更";
				case PermissionType.パスワード削除:
					return "パスワード削除";
				case PermissionType.職員作成:
					return "職員作成";
				case PermissionType.職員表示:
					return "職員表示";
				case PermissionType.職員更新:
					return "職員更新";
				case PermissionType.職員削除:
					return "職員削除";
				case PermissionType.教員作成:
					return "教員作成";
				case PermissionType.教員表示:
					return "教員表示";
				case PermissionType.教員更新:
					return "教員更新";
				case PermissionType.教員削除:
					return "教員削除";
				case PermissionType.他ユーザ作成:
					return "他ユーザ作成";
				case PermissionType.他ユーザ表示:
					return "他ユーザ表示";
				case PermissionType.他ユーザ更新:
					return "他ユーザ更新";
				case PermissionType.他ユーザ削除:
					return "他ユーザ削除";
				case PermissionType.性別区分作成:
					return "性別区分作成";
				case PermissionType.性別区分表示:
					return "性別区分表示";
				case PermissionType.性別区分更新:
					return "性別区分更新";
				case PermissionType.性別区分削除:
					return "性別区分削除";
				case PermissionType.勤務形態種別作成:
					return "勤務形態種別作成";
				case PermissionType.勤務形態種別表示:
					return "勤務形態種別表示";
				case PermissionType.勤務形態種別更新:
					return "勤務形態種別更新";
				case PermissionType.勤務形態種別削除:
					return "勤務形態種別削除";
				case PermissionType.職階種別作成:
					return "職階種別作成";
				case PermissionType.職階種別表示:
					return "職階種別表示";
				case PermissionType.職階種別更新:
					return "職階種別更新";
				case PermissionType.職階種別削除:
					return "職階種別削除";
				case PermissionType.教員資格種別作成:
					return "教員資格種別作成";
				case PermissionType.教員資格種別表示:
					return "教員資格種別表示";
				case PermissionType.教員資格種別更新:
					return "教員資格種別更新";
				case PermissionType.教員資格種別削除:
					return "教員資格種別削除";
				case PermissionType.人名作成:
					return "人名作成";
				case PermissionType.人名表示:
					return "人名表示";
				case PermissionType.人名更新:
					return "人名更新";
				case PermissionType.人名変更:
					return "人名変更";
				case PermissionType.人名削除:
					return "人名削除";
				case PermissionType.人名種別作成:
					return "人名種別作成";
				case PermissionType.人名種別表示:
					return "人名種別表示";
				case PermissionType.人名種別更新:
					return "人名種別更新";
				case PermissionType.人名種別削除:
					return "人名種別削除";
				case PermissionType.住所作成:
					return "住所作成";
				case PermissionType.住所表示:
					return "住所表示";
				case PermissionType.住所更新:
					return "住所更新";
				case PermissionType.住所変更:
					return "住所変更";
				case PermissionType.住所削除:
					return "住所削除";
				case PermissionType.住所種別作成:
					return "住所種別作成";
				case PermissionType.住所種別表示:
					return "住所種別表示";
				case PermissionType.住所種別更新:
					return "住所種別更新";
				case PermissionType.住所種別削除:
					return "住所種別削除";
				case PermissionType.連絡先作成:
					return "連絡先作成";
				case PermissionType.連絡先表示:
					return "連絡先表示";
				case PermissionType.連絡先更新:
					return "連絡先更新";
				case PermissionType.連絡先変更:
					return "連絡先変更";
				case PermissionType.連絡先削除:
					return "連絡先削除";
				case PermissionType.連絡先種別作成:
					return "連絡先種別作成";
				case PermissionType.連絡先種別表示:
					return "連絡先種別表示";
				case PermissionType.連絡先種別更新:
					return "連絡先種別更新";
				case PermissionType.連絡先種別削除:
					return "連絡先種別削除";
				case PermissionType.エラーログ作成:
					return "エラーログ作成";
				case PermissionType.エラーログ表示:
					return "エラーログ表示";
				case PermissionType.エラーログ更新:
					return "エラーログ更新";
				case PermissionType.エラーログ削除:
					return "エラーログ削除";
				case PermissionType.テスト作成:
					return "テスト作成";
				case PermissionType.テスト表示:
					return "テスト表示";
				case PermissionType.テスト更新:
					return "テスト更新";
				case PermissionType.テスト削除:
					return "テスト削除";
				default:
					return missing;
			}
		}

		/// <summary>
		/// PermissionType表示名
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string DisplayName(this PermissionType self, string missing = null)
		{
			switch (self)
			{
				case PermissionType.ロール作成:
					return "ロール作成";
				case PermissionType.ロール表示:
					return "ロール表示";
				case PermissionType.ロール更新:
					return "ロール更新";
				case PermissionType.ロール削除:
					return "ロール削除";
				case PermissionType.ロール権限作成:
					return "ロール権限作成";
				case PermissionType.ロール権限表示:
					return "ロール権限表示";
				case PermissionType.ロール権限更新:
					return "ロール権限更新";
				case PermissionType.ロール権限削除:
					return "ロール権限削除";
				case PermissionType.アカウント作成:
					return "アカウント作成";
				case PermissionType.アカウント表示:
					return "アカウント表示";
				case PermissionType.アカウント更新:
					return "アカウント更新";
				case PermissionType.アカウント削除:
					return "アカウント削除";
				case PermissionType.アカウントロール作成:
					return "アカウントロール作成";
				case PermissionType.アカウントロール表示:
					return "アカウントロール表示";
				case PermissionType.アカウントロール更新:
					return "アカウントロール更新";
				case PermissionType.アカウントロール削除:
					return "アカウントロール削除";
				case PermissionType.パスワード作成:
					return "パスワード作成";
				case PermissionType.パスワード表示:
					return "パスワード表示";
				case PermissionType.パスワード更新:
					return "パスワード更新";
				case PermissionType.パスワード変更:
					return "パスワード変更";
				case PermissionType.パスワード削除:
					return "パスワード削除";
				case PermissionType.職員作成:
					return "職員作成";
				case PermissionType.職員表示:
					return "職員表示";
				case PermissionType.職員更新:
					return "職員更新";
				case PermissionType.職員削除:
					return "職員削除";
				case PermissionType.教員作成:
					return "教員作成";
				case PermissionType.教員表示:
					return "教員表示";
				case PermissionType.教員更新:
					return "教員更新";
				case PermissionType.教員削除:
					return "教員削除";
				case PermissionType.他ユーザ作成:
					return "他ユーザ作成";
				case PermissionType.他ユーザ表示:
					return "他ユーザ表示";
				case PermissionType.他ユーザ更新:
					return "他ユーザ更新";
				case PermissionType.他ユーザ削除:
					return "他ユーザ削除";
				case PermissionType.性別区分作成:
					return "性別区分作成";
				case PermissionType.性別区分表示:
					return "性別区分表示";
				case PermissionType.性別区分更新:
					return "性別区分更新";
				case PermissionType.性別区分削除:
					return "性別区分削除";
				case PermissionType.勤務形態種別作成:
					return "勤務形態種別作成";
				case PermissionType.勤務形態種別表示:
					return "勤務形態種別表示";
				case PermissionType.勤務形態種別更新:
					return "勤務形態種別更新";
				case PermissionType.勤務形態種別削除:
					return "勤務形態種別削除";
				case PermissionType.職階種別作成:
					return "職階種別作成";
				case PermissionType.職階種別表示:
					return "職階種別表示";
				case PermissionType.職階種別更新:
					return "職階種別更新";
				case PermissionType.職階種別削除:
					return "職階種別削除";
				case PermissionType.教員資格種別作成:
					return "教員資格種別作成";
				case PermissionType.教員資格種別表示:
					return "教員資格種別表示";
				case PermissionType.教員資格種別更新:
					return "教員資格種別更新";
				case PermissionType.教員資格種別削除:
					return "教員資格種別削除";
				case PermissionType.人名作成:
					return "人名作成";
				case PermissionType.人名表示:
					return "人名表示";
				case PermissionType.人名更新:
					return "人名更新";
				case PermissionType.人名変更:
					return "人名変更";
				case PermissionType.人名削除:
					return "人名削除";
				case PermissionType.人名種別作成:
					return "人名種別作成";
				case PermissionType.人名種別表示:
					return "人名種別表示";
				case PermissionType.人名種別更新:
					return "人名種別更新";
				case PermissionType.人名種別削除:
					return "人名種別削除";
				case PermissionType.住所作成:
					return "住所作成";
				case PermissionType.住所表示:
					return "住所表示";
				case PermissionType.住所更新:
					return "住所更新";
				case PermissionType.住所変更:
					return "住所変更";
				case PermissionType.住所削除:
					return "住所削除";
				case PermissionType.住所種別作成:
					return "住所種別作成";
				case PermissionType.住所種別表示:
					return "住所種別表示";
				case PermissionType.住所種別更新:
					return "住所種別更新";
				case PermissionType.住所種別削除:
					return "住所種別削除";
				case PermissionType.連絡先作成:
					return "連絡先作成";
				case PermissionType.連絡先表示:
					return "連絡先表示";
				case PermissionType.連絡先更新:
					return "連絡先更新";
				case PermissionType.連絡先変更:
					return "連絡先変更";
				case PermissionType.連絡先削除:
					return "連絡先削除";
				case PermissionType.連絡先種別作成:
					return "連絡先種別作成";
				case PermissionType.連絡先種別表示:
					return "連絡先種別表示";
				case PermissionType.連絡先種別更新:
					return "連絡先種別更新";
				case PermissionType.連絡先種別削除:
					return "連絡先種別削除";
				case PermissionType.エラーログ作成:
					return "エラーログ作成";
				case PermissionType.エラーログ表示:
					return "エラーログ表示";
				case PermissionType.エラーログ更新:
					return "エラーログ更新";
				case PermissionType.エラーログ削除:
					return "エラーログ削除";
				case PermissionType.テスト作成:
					return "テスト作成";
				case PermissionType.テスト表示:
					return "テスト表示";
				case PermissionType.テスト更新:
					return "テスト更新";
				case PermissionType.テスト削除:
					return "テスト削除";
				default:
					return missing;
			}
		}

		/// <summary>
		/// PermissionType略称
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string Abbrev(this PermissionType self, string missing = null)
		{
			switch (self)
			{
				case PermissionType.ロール作成:
					return "ロ新";
				case PermissionType.ロール表示:
					return "ロ表";
				case PermissionType.ロール更新:
					return "ロ更";
				case PermissionType.ロール削除:
					return "ロ廃";
				case PermissionType.ロール権限作成:
					return "権新";
				case PermissionType.ロール権限表示:
					return "権表";
				case PermissionType.ロール権限更新:
					return "権更";
				case PermissionType.ロール権限削除:
					return "権廃";
				case PermissionType.アカウント作成:
					return "ア新";
				case PermissionType.アカウント表示:
					return "ア表";
				case PermissionType.アカウント更新:
					return "ア更";
				case PermissionType.アカウント削除:
					return "ア廃";
				case PermissionType.アカウントロール作成:
					return "アロ新";
				case PermissionType.アカウントロール表示:
					return "アロ表";
				case PermissionType.アカウントロール更新:
					return "アロ更";
				case PermissionType.アカウントロール削除:
					return "アロ廃";
				case PermissionType.パスワード作成:
					return "パ新";
				case PermissionType.パスワード表示:
					return "パ表";
				case PermissionType.パスワード更新:
					return "パ更";
				case PermissionType.パスワード変更:
					return "パ変";
				case PermissionType.パスワード削除:
					return "パ廃";
				case PermissionType.職員作成:
					return "職新";
				case PermissionType.職員表示:
					return "職表";
				case PermissionType.職員更新:
					return "職更";
				case PermissionType.職員削除:
					return "職廃";
				case PermissionType.教員作成:
					return "教新";
				case PermissionType.教員表示:
					return "教表";
				case PermissionType.教員更新:
					return "教更";
				case PermissionType.教員削除:
					return "教廃";
				case PermissionType.他ユーザ作成:
					return "教新";
				case PermissionType.他ユーザ表示:
					return "教表";
				case PermissionType.他ユーザ更新:
					return "教更";
				case PermissionType.他ユーザ削除:
					return "教廃";
				case PermissionType.性別区分作成:
					return "性新";
				case PermissionType.性別区分表示:
					return "性表";
				case PermissionType.性別区分更新:
					return "性更";
				case PermissionType.性別区分削除:
					return "性廃";
				case PermissionType.勤務形態種別作成:
					return "勤新";
				case PermissionType.勤務形態種別表示:
					return "勤表";
				case PermissionType.勤務形態種別更新:
					return "勤更";
				case PermissionType.勤務形態種別削除:
					return "勤廃";
				case PermissionType.職階種別作成:
					return "階新";
				case PermissionType.職階種別表示:
					return "階表";
				case PermissionType.職階種別更新:
					return "階更";
				case PermissionType.職階種別削除:
					return "階廃";
				case PermissionType.教員資格種別作成:
					return "資新";
				case PermissionType.教員資格種別表示:
					return "資表";
				case PermissionType.教員資格種別更新:
					return "資更";
				case PermissionType.教員資格種別削除:
					return "資廃";
				case PermissionType.人名作成:
					return "名新";
				case PermissionType.人名表示:
					return "名表";
				case PermissionType.人名更新:
					return "名更";
				case PermissionType.人名変更:
					return "名変";
				case PermissionType.人名削除:
					return "住廃";
				case PermissionType.人名種別作成:
					return "住種新";
				case PermissionType.人名種別表示:
					return "住種表";
				case PermissionType.人名種別更新:
					return "住種更";
				case PermissionType.人名種別削除:
					return "住種廃";
				case PermissionType.住所作成:
					return "住新";
				case PermissionType.住所表示:
					return "住表";
				case PermissionType.住所更新:
					return "住更";
				case PermissionType.住所変更:
					return "住変";
				case PermissionType.住所削除:
					return "住廃";
				case PermissionType.住所種別作成:
					return "住種新";
				case PermissionType.住所種別表示:
					return "住種表";
				case PermissionType.住所種別更新:
					return "住種更";
				case PermissionType.住所種別削除:
					return "住種廃";
				case PermissionType.連絡先作成:
					return "連新";
				case PermissionType.連絡先表示:
					return "連表";
				case PermissionType.連絡先更新:
					return "連更";
				case PermissionType.連絡先変更:
					return "連変";
				case PermissionType.連絡先削除:
					return "連廃";
				case PermissionType.連絡先種別作成:
					return "連種新";
				case PermissionType.連絡先種別表示:
					return "連種表";
				case PermissionType.連絡先種別更新:
					return "連種更";
				case PermissionType.連絡先種別削除:
					return "連種廃";
				case PermissionType.エラーログ作成:
					return "エ新";
				case PermissionType.エラーログ表示:
					return "エ表";
				case PermissionType.エラーログ更新:
					return "エ更";
				case PermissionType.エラーログ削除:
					return "エ廃";
				case PermissionType.テスト作成:
					return "テ新";
				case PermissionType.テスト表示:
					return "テ表";
				case PermissionType.テスト更新:
					return "テ更";
				case PermissionType.テスト削除:
					return "テ廃";
				default:
					return missing;
			}
		}

		/// <summary>
		/// PermissionType英字名称
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string NameEn(this PermissionType self, string missing = null)
		{
			switch (self)
			{
				case PermissionType.ロール作成:
					return "Create Role";
				case PermissionType.ロール表示:
					return "Read Role";
				case PermissionType.ロール更新:
					return "Update Role";
				case PermissionType.ロール削除:
					return "Delete Role";
				case PermissionType.ロール権限作成:
					return "Create RolePermission";
				case PermissionType.ロール権限表示:
					return "Read RolePermission";
				case PermissionType.ロール権限更新:
					return "Update RolePermission";
				case PermissionType.ロール権限削除:
					return "Delete RolePermission";
				case PermissionType.アカウント作成:
					return "Create Account";
				case PermissionType.アカウント表示:
					return "Read Account";
				case PermissionType.アカウント更新:
					return "Update Account";
				case PermissionType.アカウント削除:
					return "Delete Account";
				case PermissionType.アカウントロール作成:
					return "Create AccountRole";
				case PermissionType.アカウントロール表示:
					return "Read AccountRole";
				case PermissionType.アカウントロール更新:
					return "Update AccountRole";
				case PermissionType.アカウントロール削除:
					return "Delete AccountRole";
				case PermissionType.パスワード作成:
					return "Create Password";
				case PermissionType.パスワード表示:
					return "Read Password";
				case PermissionType.パスワード更新:
					return "Update Password";
				case PermissionType.パスワード変更:
					return "Change Password";
				case PermissionType.パスワード削除:
					return "Delete Password";
				case PermissionType.職員作成:
					return "Create Staff";
				case PermissionType.職員表示:
					return "Read Staff";
				case PermissionType.職員更新:
					return "Update Staff";
				case PermissionType.職員削除:
					return "Delete Staff";
				case PermissionType.教員作成:
					return "Create Teacher";
				case PermissionType.教員表示:
					return "Read Teacher";
				case PermissionType.教員更新:
					return "Update Teacher";
				case PermissionType.教員削除:
					return "Delete Teacher";
				case PermissionType.他ユーザ作成:
					return "Create User";
				case PermissionType.他ユーザ表示:
					return "Read User";
				case PermissionType.他ユーザ更新:
					return "Update User";
				case PermissionType.他ユーザ削除:
					return "Delete User";
				case PermissionType.性別区分作成:
					return "Create SexType";
				case PermissionType.性別区分表示:
					return "Read SexType";
				case PermissionType.性別区分更新:
					return "Update SexType";
				case PermissionType.性別区分削除:
					return "Delete SexType";
				case PermissionType.勤務形態種別作成:
					return "Create WorkStyleType";
				case PermissionType.勤務形態種別表示:
					return "Read WorkStyleType";
				case PermissionType.勤務形態種別更新:
					return "Update WorkStyleType";
				case PermissionType.勤務形態種別削除:
					return "Delete WorkStyleType";
				case PermissionType.職階種別作成:
					return "Create PositionType";
				case PermissionType.職階種別表示:
					return "Read PositionType";
				case PermissionType.職階種別更新:
					return "Update PositionType";
				case PermissionType.職階種別削除:
					return "Delete PositionType";
				case PermissionType.教員資格種別作成:
					return "Create TeacherLisenceType";
				case PermissionType.教員資格種別表示:
					return "Read TeacherLisenceType";
				case PermissionType.教員資格種別更新:
					return "Update TeacherLisenceType";
				case PermissionType.教員資格種別削除:
					return "Delete TeacherLisenceType";
				case PermissionType.人名作成:
					return "Create PersonName";
				case PermissionType.人名表示:
					return "Read PersonName";
				case PermissionType.人名更新:
					return "Update PersonName";
				case PermissionType.人名変更:
					return "Change PersonName";
				case PermissionType.人名削除:
					return "Delete PersonName";
				case PermissionType.人名種別作成:
					return "Create PersonNameType";
				case PermissionType.人名種別表示:
					return "Read PersonNameType";
				case PermissionType.人名種別更新:
					return "Update PersonNameType";
				case PermissionType.人名種別削除:
					return "Delete PersonNameType";
				case PermissionType.住所作成:
					return "Create Address";
				case PermissionType.住所表示:
					return "Read Address";
				case PermissionType.住所更新:
					return "Update Address";
				case PermissionType.住所変更:
					return "Change Address";
				case PermissionType.住所削除:
					return "Delete Address";
				case PermissionType.住所種別作成:
					return "Create AddressType";
				case PermissionType.住所種別表示:
					return "Read AddressType";
				case PermissionType.住所種別更新:
					return "Update AddressType";
				case PermissionType.住所種別削除:
					return "Delete AddressType";
				case PermissionType.連絡先作成:
					return "Create Contact";
				case PermissionType.連絡先表示:
					return "Read Contact";
				case PermissionType.連絡先更新:
					return "Update Contact";
				case PermissionType.連絡先変更:
					return "Change Contact";
				case PermissionType.連絡先削除:
					return "Delete Contact";
				case PermissionType.連絡先種別作成:
					return "Create ContactType";
				case PermissionType.連絡先種別表示:
					return "Read ContactType";
				case PermissionType.連絡先種別更新:
					return "Update ContactType";
				case PermissionType.連絡先種別削除:
					return "Delete ContactType";
				case PermissionType.エラーログ作成:
					return "Create ErrorLog";
				case PermissionType.エラーログ表示:
					return "Read ErrorLog";
				case PermissionType.エラーログ更新:
					return "Update ErrorLog";
				case PermissionType.エラーログ削除:
					return "Delete ErrorLog";
				case PermissionType.テスト作成:
					return "Create Test";
				case PermissionType.テスト表示:
					return "Read Test";
				case PermissionType.テスト更新:
					return "Update Test";
				case PermissionType.テスト削除:
					return "Delete Test";
				default:
					return missing;
			}
		}

		/// <summary>
		/// PermissionType英字表示名
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string DisplayNameEn(this PermissionType self, string missing = null)
		{
			switch (self)
			{
				case PermissionType.ロール作成:
					return "Create Role";
				case PermissionType.ロール表示:
					return "Read Role";
				case PermissionType.ロール更新:
					return "Update Role";
				case PermissionType.ロール削除:
					return "Delete Role";
				case PermissionType.ロール権限作成:
					return "Create RolePermission";
				case PermissionType.ロール権限表示:
					return "Read RolePermission";
				case PermissionType.ロール権限更新:
					return "Update RolePermission";
				case PermissionType.ロール権限削除:
					return "Delete RolePermission";
				case PermissionType.アカウント作成:
					return "Create Account";
				case PermissionType.アカウント表示:
					return "Read Account";
				case PermissionType.アカウント更新:
					return "Update Account";
				case PermissionType.アカウント削除:
					return "Delete Account";
				case PermissionType.アカウントロール作成:
					return "Create AccountRole";
				case PermissionType.アカウントロール表示:
					return "Read AccountRole";
				case PermissionType.アカウントロール更新:
					return "Update AccountRole";
				case PermissionType.アカウントロール削除:
					return "Delete AccountRole";
				case PermissionType.パスワード作成:
					return "Create Password";
				case PermissionType.パスワード表示:
					return "Read Password";
				case PermissionType.パスワード更新:
					return "Update Password";
				case PermissionType.パスワード変更:
					return "Change Password";
				case PermissionType.パスワード削除:
					return "Delete Password";
				case PermissionType.職員作成:
					return "Create Staff";
				case PermissionType.職員表示:
					return "Read Staff";
				case PermissionType.職員更新:
					return "Update Staff";
				case PermissionType.職員削除:
					return "Delete Staff";
				case PermissionType.教員作成:
					return "Create Teacher";
				case PermissionType.教員表示:
					return "Read Teacher";
				case PermissionType.教員更新:
					return "Update Teacher";
				case PermissionType.教員削除:
					return "Delete Teacher";
				case PermissionType.他ユーザ作成:
					return "Create User";
				case PermissionType.他ユーザ表示:
					return "Read User";
				case PermissionType.他ユーザ更新:
					return "Update User";
				case PermissionType.他ユーザ削除:
					return "Delete User";
				case PermissionType.性別区分作成:
					return "Create SexType";
				case PermissionType.性別区分表示:
					return "Read SexType";
				case PermissionType.性別区分更新:
					return "Update SexType";
				case PermissionType.性別区分削除:
					return "Delete SexType";
				case PermissionType.勤務形態種別作成:
					return "Create WorkStyleType";
				case PermissionType.勤務形態種別表示:
					return "Read WorkStyleType";
				case PermissionType.勤務形態種別更新:
					return "Update WorkStyleType";
				case PermissionType.勤務形態種別削除:
					return "Delete WorkStyleType";
				case PermissionType.職階種別作成:
					return "Create PositionType";
				case PermissionType.職階種別表示:
					return "Read PositionType";
				case PermissionType.職階種別更新:
					return "Update PositionType";
				case PermissionType.職階種別削除:
					return "Delete PositionType";
				case PermissionType.教員資格種別作成:
					return "Create TeacherLisenceType";
				case PermissionType.教員資格種別表示:
					return "Read TeacherLisenceType";
				case PermissionType.教員資格種別更新:
					return "Update TeacherLisenceType";
				case PermissionType.教員資格種別削除:
					return "Delete TeacherLisenceType";
				case PermissionType.人名作成:
					return "Create PersonName";
				case PermissionType.人名表示:
					return "Read PersonName";
				case PermissionType.人名更新:
					return "Update PersonName";
				case PermissionType.人名変更:
					return "Change PersonName";
				case PermissionType.人名削除:
					return "Delete PersonName";
				case PermissionType.人名種別作成:
					return "Create PersonNameType";
				case PermissionType.人名種別表示:
					return "Read PersonNameType";
				case PermissionType.人名種別更新:
					return "Update PersonNameType";
				case PermissionType.人名種別削除:
					return "Delete PersonNameType";
				case PermissionType.住所作成:
					return "Create Address";
				case PermissionType.住所表示:
					return "Read Address";
				case PermissionType.住所更新:
					return "Update Address";
				case PermissionType.住所変更:
					return "Change Address";
				case PermissionType.住所削除:
					return "Delete Address";
				case PermissionType.住所種別作成:
					return "Create AddressType";
				case PermissionType.住所種別表示:
					return "Read AddressType";
				case PermissionType.住所種別更新:
					return "Update AddressType";
				case PermissionType.住所種別削除:
					return "Delete AddressType";
				case PermissionType.連絡先作成:
					return "Create Contact";
				case PermissionType.連絡先表示:
					return "Read Contact";
				case PermissionType.連絡先更新:
					return "Update Contact";
				case PermissionType.連絡先変更:
					return "Change Contact";
				case PermissionType.連絡先削除:
					return "Delete Contact";
				case PermissionType.連絡先種別作成:
					return "Create ContactType";
				case PermissionType.連絡先種別表示:
					return "Read ContactType";
				case PermissionType.連絡先種別更新:
					return "Update ContactType";
				case PermissionType.連絡先種別削除:
					return "Delete ContactType";
				case PermissionType.エラーログ作成:
					return "Create ErrorLog";
				case PermissionType.エラーログ表示:
					return "Read ErrorLog";
				case PermissionType.エラーログ更新:
					return "Update ErrorLog";
				case PermissionType.エラーログ削除:
					return "Delete ErrorLog";
				case PermissionType.テスト作成:
					return "Create Test";
				case PermissionType.テスト表示:
					return "Read Test";
				case PermissionType.テスト更新:
					return "Update Test";
				case PermissionType.テスト削除:
					return "Delete Test";
				default:
					return missing;
			}
		}

		/// <summary>
		/// PermissionType英字略称
		/// </summary>
		/// <param name="self"></param>
		/// <param name="missing">存在しないenum値だった場合の返り値指定</param>
		/// <returns></returns>
		public static string AbbrevEn(this PermissionType self, string missing = null)
		{
			switch (self)
			{
				case PermissionType.ロール作成:
					return "N Role";
				case PermissionType.ロール表示:
					return "R Role";
				case PermissionType.ロール更新:
					return "U Role";
				case PermissionType.ロール削除:
					return "D Role";
				case PermissionType.ロール権限作成:
					return "N RolePermission";
				case PermissionType.ロール権限表示:
					return "R RolePermission";
				case PermissionType.ロール権限更新:
					return "U RolePermission";
				case PermissionType.ロール権限削除:
					return "D RolePermission";
				case PermissionType.アカウント作成:
					return "N Account";
				case PermissionType.アカウント表示:
					return "R Account";
				case PermissionType.アカウント更新:
					return "U Account";
				case PermissionType.アカウント削除:
					return "D Account";
				case PermissionType.アカウントロール作成:
					return "N AccountRole";
				case PermissionType.アカウントロール表示:
					return "R AccountRole";
				case PermissionType.アカウントロール更新:
					return "U AccountRole";
				case PermissionType.アカウントロール削除:
					return "D AccountRole";
				case PermissionType.パスワード作成:
					return "N Password";
				case PermissionType.パスワード表示:
					return "R Password";
				case PermissionType.パスワード更新:
					return "U Password";
				case PermissionType.パスワード変更:
					return "C Password";
				case PermissionType.パスワード削除:
					return "D Password";
				case PermissionType.職員作成:
					return "N Staff";
				case PermissionType.職員表示:
					return "R Staff";
				case PermissionType.職員更新:
					return "U Staff";
				case PermissionType.職員削除:
					return "D Staff";
				case PermissionType.教員作成:
					return "N Teacher";
				case PermissionType.教員表示:
					return "R Teacher";
				case PermissionType.教員更新:
					return "U Teacher";
				case PermissionType.教員削除:
					return "D Teacher";
				case PermissionType.他ユーザ作成:
					return "N User";
				case PermissionType.他ユーザ表示:
					return "R User";
				case PermissionType.他ユーザ更新:
					return "U User";
				case PermissionType.他ユーザ削除:
					return "D User";
				case PermissionType.性別区分作成:
					return "N SexType";
				case PermissionType.性別区分表示:
					return "R SexType";
				case PermissionType.性別区分更新:
					return "U SexType";
				case PermissionType.性別区分削除:
					return "D SexType";
				case PermissionType.勤務形態種別作成:
					return "N WorkStyleType";
				case PermissionType.勤務形態種別表示:
					return "R WorkStyleType";
				case PermissionType.勤務形態種別更新:
					return "U WorkStyleType";
				case PermissionType.勤務形態種別削除:
					return "D WorkStyleType";
				case PermissionType.職階種別作成:
					return "N PositionType";
				case PermissionType.職階種別表示:
					return "R PositionType";
				case PermissionType.職階種別更新:
					return "U PositionType";
				case PermissionType.職階種別削除:
					return "D PositionType";
				case PermissionType.教員資格種別作成:
					return "N TeacherLisenceType";
				case PermissionType.教員資格種別表示:
					return "R TeacherLisenceType";
				case PermissionType.教員資格種別更新:
					return "U TeacherLisenceType";
				case PermissionType.教員資格種別削除:
					return "D TeacherLisenceType";
				case PermissionType.人名作成:
					return "N PersonName";
				case PermissionType.人名表示:
					return "R PersonName";
				case PermissionType.人名更新:
					return "U PersonName";
				case PermissionType.人名変更:
					return "C PersonName";
				case PermissionType.人名削除:
					return "D PersonName";
				case PermissionType.人名種別作成:
					return "N PersonNameType";
				case PermissionType.人名種別表示:
					return "R PersonNameType";
				case PermissionType.人名種別更新:
					return "U PersonNameType";
				case PermissionType.人名種別削除:
					return "D PersonNameType";
				case PermissionType.住所作成:
					return "N Address";
				case PermissionType.住所表示:
					return "R Address";
				case PermissionType.住所更新:
					return "U Address";
				case PermissionType.住所変更:
					return "C Address";
				case PermissionType.住所削除:
					return "D Address";
				case PermissionType.住所種別作成:
					return "N AddressType";
				case PermissionType.住所種別表示:
					return "R AddressType";
				case PermissionType.住所種別更新:
					return "U AddressType";
				case PermissionType.住所種別削除:
					return "D AddressType";
				case PermissionType.連絡先作成:
					return "N Contact";
				case PermissionType.連絡先表示:
					return "R Contact";
				case PermissionType.連絡先更新:
					return "U Contact";
				case PermissionType.連絡先変更:
					return "C Contact";
				case PermissionType.連絡先削除:
					return "D Contact";
				case PermissionType.連絡先種別作成:
					return "N ContactType";
				case PermissionType.連絡先種別表示:
					return "R ContactType";
				case PermissionType.連絡先種別更新:
					return "U ContactType";
				case PermissionType.連絡先種別削除:
					return "D ContactType";
				case PermissionType.エラーログ作成:
					return "N ErrorLog";
				case PermissionType.エラーログ表示:
					return "R ErrorLog";
				case PermissionType.エラーログ更新:
					return "U ErrorLog";
				case PermissionType.エラーログ削除:
					return "D ErrorLog";
				case PermissionType.テスト作成:
					return "N Test";
				case PermissionType.テスト表示:
					return "R Test";
				case PermissionType.テスト更新:
					return "U Test";
				case PermissionType.テスト削除:
					return "D Test";
				default:
					return missing;
			}
		}
		#endregion
	}
	#endregion

	#region テスト
	/// <summary>
	/// テスト
	/// </summary>
	[Table(Schema="dbo", Name="Test"), DataContract]
	public partial class Test : TableBase<Test>, INotifyPropertyChanged
	{
		#region uid : int

		private int _uid;
		/// <summary>
		/// ユニークID
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull, PrimaryKey(Order = 1), Identity]
		public  int  uid
		{
			get { return _uid; }
			set
			{
				if (_uid != value)
				{
					BeforeuidChanged(value);
					_uid = value;
					AfteruidChanged();

					OnuidChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeuidChanged(int newValue);
		partial void AfteruidChanged();

		public const string NameOfuid = "uid";

		private static readonly PropertyChangedEventArgs _uidChangedEventArgs = new PropertyChangedEventArgs(NameOfuid);

		private void OnuidChanged()
		{
			OnPropertyChanged(_uidChangedEventArgs);
		}

		#endregion

		#endregion
		#region col01 : char

		private char _col01;
		/// <summary>
		/// col01
		/// </summary>
		[Column(DbType="char(1)", DataType=DataType.Char, Length=1), DataMember, NotNull]
		public  char  col01
		{
			get { return _col01; }
			set
			{
				if (_col01 != value)
				{
					Beforecol01Changed(value);
					_col01 = value;
					Aftercol01Changed();

					Oncol01Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol01Changed(char newValue);
		partial void Aftercol01Changed();

		public const string NameOfcol01 = "col01";

		private static readonly PropertyChangedEventArgs _col01ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol01);

		private void Oncol01Changed()
		{
			OnPropertyChanged(_col01ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col01_ : char?

		private char? _col01_;
		/// <summary>
		/// col01_
		/// </summary>
		[Column(DbType="char(1)", DataType=DataType.Char, Length=1), DataMember, Nullable]
		public  char?  col01_
		{
			get { return _col01_; }
			set
			{
				if (_col01_ != value)
				{
					Beforecol01_Changed(value);
					_col01_ = value;
					Aftercol01_Changed();

					Oncol01_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol01_Changed(char? newValue);
		partial void Aftercol01_Changed();

		public const string NameOfcol01_ = "col01_";

		private static readonly PropertyChangedEventArgs _col01_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol01_);

		private void Oncol01_Changed()
		{
			OnPropertyChanged(_col01_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col02 : string

		private string _col02;
		/// <summary>
		/// col02
		/// </summary>
		[Column(DbType="char(10)", DataType=DataType.Char, Length=10), DataMember, NotNull]
		public  string  col02
		{
			get { return _col02; }
			set
			{
				if (_col02 != value)
				{
					Beforecol02Changed(value);
					_col02 = value;
					Aftercol02Changed();

					Oncol02Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol02Changed(string newValue);
		partial void Aftercol02Changed();

		public const string NameOfcol02 = "col02";

		private static readonly PropertyChangedEventArgs _col02ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol02);

		private void Oncol02Changed()
		{
			OnPropertyChanged(_col02ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col02_ : string

		private string _col02_;
		/// <summary>
		/// col02_
		/// </summary>
		[Column(DbType="char(10)", DataType=DataType.Char, Length=10), DataMember, Nullable]
		public  string  col02_
		{
			get { return _col02_; }
			set
			{
				if (_col02_ != value)
				{
					Beforecol02_Changed(value);
					_col02_ = value;
					Aftercol02_Changed();

					Oncol02_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol02_Changed(string newValue);
		partial void Aftercol02_Changed();

		public const string NameOfcol02_ = "col02_";

		private static readonly PropertyChangedEventArgs _col02_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol02_);

		private void Oncol02_Changed()
		{
			OnPropertyChanged(_col02_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col03 : string

		private string _col03;
		/// <summary>
		/// col03
		/// </summary>
		[Column(DbType="varchar(20)", DataType=DataType.VarChar, Length=20), DataMember, NotNull]
		public  string  col03
		{
			get { return _col03; }
			set
			{
				if (_col03 != value)
				{
					Beforecol03Changed(value);
					_col03 = value;
					Aftercol03Changed();

					Oncol03Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol03Changed(string newValue);
		partial void Aftercol03Changed();

		public const string NameOfcol03 = "col03";

		private static readonly PropertyChangedEventArgs _col03ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol03);

		private void Oncol03Changed()
		{
			OnPropertyChanged(_col03ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col03_ : string

		private string _col03_;
		/// <summary>
		/// col03_
		/// </summary>
		[Column(DbType="varchar(20)", DataType=DataType.VarChar, Length=20), DataMember, Nullable]
		public  string  col03_
		{
			get { return _col03_; }
			set
			{
				if (_col03_ != value)
				{
					Beforecol03_Changed(value);
					_col03_ = value;
					Aftercol03_Changed();

					Oncol03_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol03_Changed(string newValue);
		partial void Aftercol03_Changed();

		public const string NameOfcol03_ = "col03_";

		private static readonly PropertyChangedEventArgs _col03_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol03_);

		private void Oncol03_Changed()
		{
			OnPropertyChanged(_col03_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col04 : string

		private string _col04;
		/// <summary>
		/// col04
		/// </summary>
		[Column(DbType="text", DataType=DataType.Text), DataMember, NotNull]
		public  string  col04
		{
			get { return _col04; }
			set
			{
				if (_col04 != value)
				{
					Beforecol04Changed(value);
					_col04 = value;
					Aftercol04Changed();

					Oncol04Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol04Changed(string newValue);
		partial void Aftercol04Changed();

		public const string NameOfcol04 = "col04";

		private static readonly PropertyChangedEventArgs _col04ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol04);

		private void Oncol04Changed()
		{
			OnPropertyChanged(_col04ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col04_ : string

		private string _col04_;
		/// <summary>
		/// col04_
		/// </summary>
		[Column(DbType="text", DataType=DataType.Text), DataMember, Nullable]
		public  string  col04_
		{
			get { return _col04_; }
			set
			{
				if (_col04_ != value)
				{
					Beforecol04_Changed(value);
					_col04_ = value;
					Aftercol04_Changed();

					Oncol04_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol04_Changed(string newValue);
		partial void Aftercol04_Changed();

		public const string NameOfcol04_ = "col04_";

		private static readonly PropertyChangedEventArgs _col04_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol04_);

		private void Oncol04_Changed()
		{
			OnPropertyChanged(_col04_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col05 : char

		private char _col05;
		/// <summary>
		/// col05
		/// </summary>
		[Column(DbType="nchar(1)", DataType=DataType.NChar, Length=1), DataMember, NotNull]
		public  char  col05
		{
			get { return _col05; }
			set
			{
				if (_col05 != value)
				{
					Beforecol05Changed(value);
					_col05 = value;
					Aftercol05Changed();

					Oncol05Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol05Changed(char newValue);
		partial void Aftercol05Changed();

		public const string NameOfcol05 = "col05";

		private static readonly PropertyChangedEventArgs _col05ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol05);

		private void Oncol05Changed()
		{
			OnPropertyChanged(_col05ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col05_ : char?

		private char? _col05_;
		/// <summary>
		/// col05_
		/// </summary>
		[Column(DbType="nchar(1)", DataType=DataType.NChar, Length=1), DataMember, Nullable]
		public  char?  col05_
		{
			get { return _col05_; }
			set
			{
				if (_col05_ != value)
				{
					Beforecol05_Changed(value);
					_col05_ = value;
					Aftercol05_Changed();

					Oncol05_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol05_Changed(char? newValue);
		partial void Aftercol05_Changed();

		public const string NameOfcol05_ = "col05_";

		private static readonly PropertyChangedEventArgs _col05_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol05_);

		private void Oncol05_Changed()
		{
			OnPropertyChanged(_col05_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col06 : string

		private string _col06;
		/// <summary>
		/// col06
		/// </summary>
		[Column(DbType="nchar(10)", DataType=DataType.NChar, Length=10), DataMember, NotNull]
		public  string  col06
		{
			get { return _col06; }
			set
			{
				if (_col06 != value)
				{
					Beforecol06Changed(value);
					_col06 = value;
					Aftercol06Changed();

					Oncol06Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol06Changed(string newValue);
		partial void Aftercol06Changed();

		public const string NameOfcol06 = "col06";

		private static readonly PropertyChangedEventArgs _col06ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol06);

		private void Oncol06Changed()
		{
			OnPropertyChanged(_col06ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col06_ : string

		private string _col06_;
		/// <summary>
		/// col06_
		/// </summary>
		[Column(DbType="nchar(10)", DataType=DataType.NChar, Length=10), DataMember, Nullable]
		public  string  col06_
		{
			get { return _col06_; }
			set
			{
				if (_col06_ != value)
				{
					Beforecol06_Changed(value);
					_col06_ = value;
					Aftercol06_Changed();

					Oncol06_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol06_Changed(string newValue);
		partial void Aftercol06_Changed();

		public const string NameOfcol06_ = "col06_";

		private static readonly PropertyChangedEventArgs _col06_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol06_);

		private void Oncol06_Changed()
		{
			OnPropertyChanged(_col06_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col07 : string

		private string _col07;
		/// <summary>
		/// col07
		/// </summary>
		[Column(DbType="nvarchar(20)", DataType=DataType.NVarChar, Length=20), DataMember, NotNull]
		public  string  col07
		{
			get { return _col07; }
			set
			{
				if (_col07 != value)
				{
					Beforecol07Changed(value);
					_col07 = value;
					Aftercol07Changed();

					Oncol07Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol07Changed(string newValue);
		partial void Aftercol07Changed();

		public const string NameOfcol07 = "col07";

		private static readonly PropertyChangedEventArgs _col07ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol07);

		private void Oncol07Changed()
		{
			OnPropertyChanged(_col07ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col07_ : string

		private string _col07_;
		/// <summary>
		/// col07_
		/// </summary>
		[Column(DbType="nvarchar(20)", DataType=DataType.NVarChar, Length=20), DataMember, Nullable]
		public  string  col07_
		{
			get { return _col07_; }
			set
			{
				if (_col07_ != value)
				{
					Beforecol07_Changed(value);
					_col07_ = value;
					Aftercol07_Changed();

					Oncol07_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol07_Changed(string newValue);
		partial void Aftercol07_Changed();

		public const string NameOfcol07_ = "col07_";

		private static readonly PropertyChangedEventArgs _col07_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol07_);

		private void Oncol07_Changed()
		{
			OnPropertyChanged(_col07_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col08 : string

		private string _col08;
		/// <summary>
		/// col08
		/// </summary>
		[Column(DbType="ntext", DataType=DataType.NText), DataMember, NotNull]
		public  string  col08
		{
			get { return _col08; }
			set
			{
				if (_col08 != value)
				{
					Beforecol08Changed(value);
					_col08 = value;
					Aftercol08Changed();

					Oncol08Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol08Changed(string newValue);
		partial void Aftercol08Changed();

		public const string NameOfcol08 = "col08";

		private static readonly PropertyChangedEventArgs _col08ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol08);

		private void Oncol08Changed()
		{
			OnPropertyChanged(_col08ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col08_ : string

		private string _col08_;
		/// <summary>
		/// col08_
		/// </summary>
		[Column(DbType="ntext", DataType=DataType.NText), DataMember, Nullable]
		public  string  col08_
		{
			get { return _col08_; }
			set
			{
				if (_col08_ != value)
				{
					Beforecol08_Changed(value);
					_col08_ = value;
					Aftercol08_Changed();

					Oncol08_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol08_Changed(string newValue);
		partial void Aftercol08_Changed();

		public const string NameOfcol08_ = "col08_";

		private static readonly PropertyChangedEventArgs _col08_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol08_);

		private void Oncol08_Changed()
		{
			OnPropertyChanged(_col08_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col09 : byte[]

		private byte[] _col09;
		/// <summary>
		/// col09
		/// </summary>
		[Column(DbType="binary(50)", DataType=DataType.Binary), DataMember, NotNull]
		public  byte[]  col09
		{
			get { return _col09; }
			set
			{
				if (_col09 != value)
				{
					Beforecol09Changed(value);
					_col09 = value;
					Aftercol09Changed();

					Oncol09Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol09Changed(byte[] newValue);
		partial void Aftercol09Changed();

		public const string NameOfcol09 = "col09";

		private static readonly PropertyChangedEventArgs _col09ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol09);

		private void Oncol09Changed()
		{
			OnPropertyChanged(_col09ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col09_ : byte[]

		private byte[] _col09_;
		/// <summary>
		/// col09_
		/// </summary>
		[Column(DbType="binary(50)", DataType=DataType.Binary), DataMember, Nullable]
		public  byte[]  col09_
		{
			get { return _col09_; }
			set
			{
				if (_col09_ != value)
				{
					Beforecol09_Changed(value);
					_col09_ = value;
					Aftercol09_Changed();

					Oncol09_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol09_Changed(byte[] newValue);
		partial void Aftercol09_Changed();

		public const string NameOfcol09_ = "col09_";

		private static readonly PropertyChangedEventArgs _col09_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol09_);

		private void Oncol09_Changed()
		{
			OnPropertyChanged(_col09_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col10 : byte[]

		private byte[] _col10;
		/// <summary>
		/// col10
		/// </summary>
		[Column(DbType="varbinary(50)", DataType=DataType.VarBinary), DataMember, NotNull]
		public  byte[]  col10
		{
			get { return _col10; }
			set
			{
				if (_col10 != value)
				{
					Beforecol10Changed(value);
					_col10 = value;
					Aftercol10Changed();

					Oncol10Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol10Changed(byte[] newValue);
		partial void Aftercol10Changed();

		public const string NameOfcol10 = "col10";

		private static readonly PropertyChangedEventArgs _col10ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol10);

		private void Oncol10Changed()
		{
			OnPropertyChanged(_col10ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col10_ : byte[]

		private byte[] _col10_;
		/// <summary>
		/// col10_
		/// </summary>
		[Column(DbType="varbinary(50)", DataType=DataType.VarBinary), DataMember, Nullable]
		public  byte[]  col10_
		{
			get { return _col10_; }
			set
			{
				if (_col10_ != value)
				{
					Beforecol10_Changed(value);
					_col10_ = value;
					Aftercol10_Changed();

					Oncol10_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol10_Changed(byte[] newValue);
		partial void Aftercol10_Changed();

		public const string NameOfcol10_ = "col10_";

		private static readonly PropertyChangedEventArgs _col10_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol10_);

		private void Oncol10_Changed()
		{
			OnPropertyChanged(_col10_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col11 : byte[]

		private byte[] _col11;
		/// <summary>
		/// col11
		/// </summary>
		[Column(DbType="image", DataType=DataType.Image), DataMember, NotNull]
		public  byte[]  col11
		{
			get { return _col11; }
			set
			{
				if (_col11 != value)
				{
					Beforecol11Changed(value);
					_col11 = value;
					Aftercol11Changed();

					Oncol11Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol11Changed(byte[] newValue);
		partial void Aftercol11Changed();

		public const string NameOfcol11 = "col11";

		private static readonly PropertyChangedEventArgs _col11ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol11);

		private void Oncol11Changed()
		{
			OnPropertyChanged(_col11ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col11_ : byte[]

		private byte[] _col11_;
		/// <summary>
		/// col11_
		/// </summary>
		[Column(DbType="image", DataType=DataType.Image), DataMember, Nullable]
		public  byte[]  col11_
		{
			get { return _col11_; }
			set
			{
				if (_col11_ != value)
				{
					Beforecol11_Changed(value);
					_col11_ = value;
					Aftercol11_Changed();

					Oncol11_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol11_Changed(byte[] newValue);
		partial void Aftercol11_Changed();

		public const string NameOfcol11_ = "col11_";

		private static readonly PropertyChangedEventArgs _col11_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol11_);

		private void Oncol11_Changed()
		{
			OnPropertyChanged(_col11_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col12 : bool

		private bool _col12;
		/// <summary>
		/// col12
		/// </summary>
		[Column(DbType="bit", DataType=DataType.Boolean), DataMember, NotNull]
		public  bool  col12
		{
			get { return _col12; }
			set
			{
				if (_col12 != value)
				{
					Beforecol12Changed(value);
					_col12 = value;
					Aftercol12Changed();

					Oncol12Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol12Changed(bool newValue);
		partial void Aftercol12Changed();

		public const string NameOfcol12 = "col12";

		private static readonly PropertyChangedEventArgs _col12ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol12);

		private void Oncol12Changed()
		{
			OnPropertyChanged(_col12ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col12_ : bool?

		private bool? _col12_;
		/// <summary>
		/// col12_
		/// </summary>
		[Column(DbType="bit", DataType=DataType.Boolean), DataMember, Nullable]
		public  bool?  col12_
		{
			get { return _col12_; }
			set
			{
				if (_col12_ != value)
				{
					Beforecol12_Changed(value);
					_col12_ = value;
					Aftercol12_Changed();

					Oncol12_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol12_Changed(bool? newValue);
		partial void Aftercol12_Changed();

		public const string NameOfcol12_ = "col12_";

		private static readonly PropertyChangedEventArgs _col12_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol12_);

		private void Oncol12_Changed()
		{
			OnPropertyChanged(_col12_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col13 : Guid

		private Guid _col13;
		/// <summary>
		/// col13
		/// </summary>
		[Column(DbType="uniqueidentifier", DataType=DataType.Guid), DataMember, NotNull]
		public  Guid  col13
		{
			get { return _col13; }
			set
			{
				if (_col13 != value)
				{
					Beforecol13Changed(value);
					_col13 = value;
					Aftercol13Changed();

					Oncol13Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol13Changed(Guid newValue);
		partial void Aftercol13Changed();

		public const string NameOfcol13 = "col13";

		private static readonly PropertyChangedEventArgs _col13ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol13);

		private void Oncol13Changed()
		{
			OnPropertyChanged(_col13ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col13_ : Guid?

		private Guid? _col13_;
		/// <summary>
		/// col13_
		/// </summary>
		[Column(DbType="uniqueidentifier", DataType=DataType.Guid), DataMember, Nullable]
		public  Guid?  col13_
		{
			get { return _col13_; }
			set
			{
				if (_col13_ != value)
				{
					Beforecol13_Changed(value);
					_col13_ = value;
					Aftercol13_Changed();

					Oncol13_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol13_Changed(Guid? newValue);
		partial void Aftercol13_Changed();

		public const string NameOfcol13_ = "col13_";

		private static readonly PropertyChangedEventArgs _col13_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol13_);

		private void Oncol13_Changed()
		{
			OnPropertyChanged(_col13_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col14 : Int16

		private Int16 _col14;
		/// <summary>
		/// col14
		/// </summary>
		[Column(DbType="smallint", DataType=DataType.Int16), DataMember, NotNull]
		public  Int16  col14
		{
			get { return _col14; }
			set
			{
				if (_col14 != value)
				{
					Beforecol14Changed(value);
					_col14 = value;
					Aftercol14Changed();

					Oncol14Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol14Changed(Int16 newValue);
		partial void Aftercol14Changed();

		public const string NameOfcol14 = "col14";

		private static readonly PropertyChangedEventArgs _col14ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol14);

		private void Oncol14Changed()
		{
			OnPropertyChanged(_col14ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col14_ : Int16?

		private Int16? _col14_;
		/// <summary>
		/// col14_
		/// </summary>
		[Column(DbType="smallint", DataType=DataType.Int16), DataMember, Nullable]
		public  Int16?  col14_
		{
			get { return _col14_; }
			set
			{
				if (_col14_ != value)
				{
					Beforecol14_Changed(value);
					_col14_ = value;
					Aftercol14_Changed();

					Oncol14_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol14_Changed(Int16? newValue);
		partial void Aftercol14_Changed();

		public const string NameOfcol14_ = "col14_";

		private static readonly PropertyChangedEventArgs _col14_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol14_);

		private void Oncol14_Changed()
		{
			OnPropertyChanged(_col14_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col15 : int

		private int _col15;
		/// <summary>
		/// col15
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull]
		public  int  col15
		{
			get { return _col15; }
			set
			{
				if (_col15 != value)
				{
					Beforecol15Changed(value);
					_col15 = value;
					Aftercol15Changed();

					Oncol15Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol15Changed(int newValue);
		partial void Aftercol15Changed();

		public const string NameOfcol15 = "col15";

		private static readonly PropertyChangedEventArgs _col15ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol15);

		private void Oncol15Changed()
		{
			OnPropertyChanged(_col15ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col15_ : int?

		private int? _col15_;
		/// <summary>
		/// col15_
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, Nullable]
		public  int?  col15_
		{
			get { return _col15_; }
			set
			{
				if (_col15_ != value)
				{
					Beforecol15_Changed(value);
					_col15_ = value;
					Aftercol15_Changed();

					Oncol15_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol15_Changed(int? newValue);
		partial void Aftercol15_Changed();

		public const string NameOfcol15_ = "col15_";

		private static readonly PropertyChangedEventArgs _col15_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol15_);

		private void Oncol15_Changed()
		{
			OnPropertyChanged(_col15_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col16 : Int64

		private Int64 _col16;
		/// <summary>
		/// col16
		/// </summary>
		[Column(DbType="bigint", DataType=DataType.Int64), DataMember, NotNull]
		public  Int64  col16
		{
			get { return _col16; }
			set
			{
				if (_col16 != value)
				{
					Beforecol16Changed(value);
					_col16 = value;
					Aftercol16Changed();

					Oncol16Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol16Changed(Int64 newValue);
		partial void Aftercol16Changed();

		public const string NameOfcol16 = "col16";

		private static readonly PropertyChangedEventArgs _col16ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol16);

		private void Oncol16Changed()
		{
			OnPropertyChanged(_col16ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col16_ : Int64?

		private Int64? _col16_;
		/// <summary>
		/// col16_
		/// </summary>
		[Column(DbType="bigint", DataType=DataType.Int64), DataMember, Nullable]
		public  Int64?  col16_
		{
			get { return _col16_; }
			set
			{
				if (_col16_ != value)
				{
					Beforecol16_Changed(value);
					_col16_ = value;
					Aftercol16_Changed();

					Oncol16_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol16_Changed(Int64? newValue);
		partial void Aftercol16_Changed();

		public const string NameOfcol16_ = "col16_";

		private static readonly PropertyChangedEventArgs _col16_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol16_);

		private void Oncol16_Changed()
		{
			OnPropertyChanged(_col16_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col17 : byte

		private byte _col17;
		/// <summary>
		/// col17
		/// </summary>
		[Column(DbType="tinyint", DataType=DataType.Byte), DataMember, NotNull]
		public  byte  col17
		{
			get { return _col17; }
			set
			{
				if (_col17 != value)
				{
					Beforecol17Changed(value);
					_col17 = value;
					Aftercol17Changed();

					Oncol17Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol17Changed(byte newValue);
		partial void Aftercol17Changed();

		public const string NameOfcol17 = "col17";

		private static readonly PropertyChangedEventArgs _col17ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol17);

		private void Oncol17Changed()
		{
			OnPropertyChanged(_col17ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col17_ : byte?

		private byte? _col17_;
		/// <summary>
		/// col17_
		/// </summary>
		[Column(DbType="tinyint", DataType=DataType.Byte), DataMember, Nullable]
		public  byte?  col17_
		{
			get { return _col17_; }
			set
			{
				if (_col17_ != value)
				{
					Beforecol17_Changed(value);
					_col17_ = value;
					Aftercol17_Changed();

					Oncol17_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol17_Changed(byte? newValue);
		partial void Aftercol17_Changed();

		public const string NameOfcol17_ = "col17_";

		private static readonly PropertyChangedEventArgs _col17_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol17_);

		private void Oncol17_Changed()
		{
			OnPropertyChanged(_col17_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col18 : float

		private float _col18;
		/// <summary>
		/// col18
		/// </summary>
		[Column(DbType="float", DataType=DataType.Single), DataMember, NotNull]
		public  float  col18
		{
			get { return _col18; }
			set
			{
				if (_col18 != value)
				{
					Beforecol18Changed(value);
					_col18 = value;
					Aftercol18Changed();

					Oncol18Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol18Changed(float newValue);
		partial void Aftercol18Changed();

		public const string NameOfcol18 = "col18";

		private static readonly PropertyChangedEventArgs _col18ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol18);

		private void Oncol18Changed()
		{
			OnPropertyChanged(_col18ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col18_ : float?

		private float? _col18_;
		/// <summary>
		/// col18_
		/// </summary>
		[Column(DbType="float", DataType=DataType.Single), DataMember, Nullable]
		public  float?  col18_
		{
			get { return _col18_; }
			set
			{
				if (_col18_ != value)
				{
					Beforecol18_Changed(value);
					_col18_ = value;
					Aftercol18_Changed();

					Oncol18_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol18_Changed(float? newValue);
		partial void Aftercol18_Changed();

		public const string NameOfcol18_ = "col18_";

		private static readonly PropertyChangedEventArgs _col18_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol18_);

		private void Oncol18_Changed()
		{
			OnPropertyChanged(_col18_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col19 : decimal

		private decimal _col19;
		/// <summary>
		/// col19
		/// </summary>
		[Column(DbType="decimal(11,8)", DataType=DataType.Decimal, Precision=11, Scale=8), DataMember, NotNull]
		public  decimal  col19
		{
			get { return _col19; }
			set
			{
				if (_col19 != value)
				{
					Beforecol19Changed(value);
					_col19 = value;
					Aftercol19Changed();

					Oncol19Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol19Changed(decimal newValue);
		partial void Aftercol19Changed();

		public const string NameOfcol19 = "col19";

		private static readonly PropertyChangedEventArgs _col19ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol19);

		private void Oncol19Changed()
		{
			OnPropertyChanged(_col19ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col19_ : decimal?

		private decimal? _col19_;
		/// <summary>
		/// col19_
		/// </summary>
		[Column(DbType="decimal(11,8)", DataType=DataType.Decimal, Precision=11, Scale=8), DataMember, Nullable]
		public  decimal?  col19_
		{
			get { return _col19_; }
			set
			{
				if (_col19_ != value)
				{
					Beforecol19_Changed(value);
					_col19_ = value;
					Aftercol19_Changed();

					Oncol19_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol19_Changed(decimal? newValue);
		partial void Aftercol19_Changed();

		public const string NameOfcol19_ = "col19_";

		private static readonly PropertyChangedEventArgs _col19_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol19_);

		private void Oncol19_Changed()
		{
			OnPropertyChanged(_col19_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col20 : decimal

		private decimal _col20;
		/// <summary>
		/// col20
		/// </summary>
		[Column(DbType="decimal(11,8)", DataType=DataType.Decimal, Precision=11, Scale=8), DataMember, NotNull]
		public  decimal  col20
		{
			get { return _col20; }
			set
			{
				if (_col20 != value)
				{
					Beforecol20Changed(value);
					_col20 = value;
					Aftercol20Changed();

					Oncol20Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol20Changed(decimal newValue);
		partial void Aftercol20Changed();

		public const string NameOfcol20 = "col20";

		private static readonly PropertyChangedEventArgs _col20ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol20);

		private void Oncol20Changed()
		{
			OnPropertyChanged(_col20ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col20_ : decimal?

		private decimal? _col20_;
		/// <summary>
		/// col20_
		/// </summary>
		[Column(DbType="decimal(11,8)", DataType=DataType.Decimal, Precision=11, Scale=8), DataMember, Nullable]
		public  decimal?  col20_
		{
			get { return _col20_; }
			set
			{
				if (_col20_ != value)
				{
					Beforecol20_Changed(value);
					_col20_ = value;
					Aftercol20_Changed();

					Oncol20_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol20_Changed(decimal? newValue);
		partial void Aftercol20_Changed();

		public const string NameOfcol20_ = "col20_";

		private static readonly PropertyChangedEventArgs _col20_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol20_);

		private void Oncol20_Changed()
		{
			OnPropertyChanged(_col20_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col21 : decimal

		private decimal _col21;
		/// <summary>
		/// col21
		/// </summary>
		[Column(DbType="money", DataType=DataType.Money), DataMember, NotNull]
		public  decimal  col21
		{
			get { return _col21; }
			set
			{
				if (_col21 != value)
				{
					Beforecol21Changed(value);
					_col21 = value;
					Aftercol21Changed();

					Oncol21Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol21Changed(decimal newValue);
		partial void Aftercol21Changed();

		public const string NameOfcol21 = "col21";

		private static readonly PropertyChangedEventArgs _col21ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol21);

		private void Oncol21Changed()
		{
			OnPropertyChanged(_col21ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col21_ : decimal?

		private decimal? _col21_;
		/// <summary>
		/// col21_
		/// </summary>
		[Column(DbType="money", DataType=DataType.Money), DataMember, Nullable]
		public  decimal?  col21_
		{
			get { return _col21_; }
			set
			{
				if (_col21_ != value)
				{
					Beforecol21_Changed(value);
					_col21_ = value;
					Aftercol21_Changed();

					Oncol21_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol21_Changed(decimal? newValue);
		partial void Aftercol21_Changed();

		public const string NameOfcol21_ = "col21_";

		private static readonly PropertyChangedEventArgs _col21_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol21_);

		private void Oncol21_Changed()
		{
			OnPropertyChanged(_col21_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col22 : decimal

		private decimal _col22;
		/// <summary>
		/// col22
		/// </summary>
		[Column(DbType="smallmoney", DataType=DataType.SmallMoney), DataMember, NotNull]
		public  decimal  col22
		{
			get { return _col22; }
			set
			{
				if (_col22 != value)
				{
					Beforecol22Changed(value);
					_col22 = value;
					Aftercol22Changed();

					Oncol22Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol22Changed(decimal newValue);
		partial void Aftercol22Changed();

		public const string NameOfcol22 = "col22";

		private static readonly PropertyChangedEventArgs _col22ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol22);

		private void Oncol22Changed()
		{
			OnPropertyChanged(_col22ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col22_ : decimal?

		private decimal? _col22_;
		/// <summary>
		/// col22_
		/// </summary>
		[Column(DbType="smallmoney", DataType=DataType.SmallMoney), DataMember, Nullable]
		public  decimal?  col22_
		{
			get { return _col22_; }
			set
			{
				if (_col22_ != value)
				{
					Beforecol22_Changed(value);
					_col22_ = value;
					Aftercol22_Changed();

					Oncol22_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol22_Changed(decimal? newValue);
		partial void Aftercol22_Changed();

		public const string NameOfcol22_ = "col22_";

		private static readonly PropertyChangedEventArgs _col22_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol22_);

		private void Oncol22_Changed()
		{
			OnPropertyChanged(_col22_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col23 : DateTime

		private DateTime _col23;
		/// <summary>
		/// col23
		/// </summary>
		[Column(DbType="date", DataType=DataType.Date), DataMember, NotNull]
		public  DateTime  col23
		{
			get { return _col23; }
			set
			{
				if (_col23 != value)
				{
					Beforecol23Changed(value);
					_col23 = value;
					Aftercol23Changed();

					Oncol23Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol23Changed(DateTime newValue);
		partial void Aftercol23Changed();

		public const string NameOfcol23 = "col23";

		private static readonly PropertyChangedEventArgs _col23ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol23);

		private void Oncol23Changed()
		{
			OnPropertyChanged(_col23ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col23_ : DateTime?

		private DateTime? _col23_;
		/// <summary>
		/// col23_
		/// </summary>
		[Column(DbType="date", DataType=DataType.Date), DataMember, Nullable]
		public  DateTime?  col23_
		{
			get { return _col23_; }
			set
			{
				if (_col23_ != value)
				{
					Beforecol23_Changed(value);
					_col23_ = value;
					Aftercol23_Changed();

					Oncol23_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol23_Changed(DateTime? newValue);
		partial void Aftercol23_Changed();

		public const string NameOfcol23_ = "col23_";

		private static readonly PropertyChangedEventArgs _col23_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol23_);

		private void Oncol23_Changed()
		{
			OnPropertyChanged(_col23_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col24 : TimeSpan

		private TimeSpan _col24;
		/// <summary>
		/// col24
		/// </summary>
		[Column(DbType="time(7)", DataType=DataType.Time, Precision=7), DataMember, NotNull]
		public  TimeSpan  col24
		{
			get { return _col24; }
			set
			{
				if (_col24 != value)
				{
					Beforecol24Changed(value);
					_col24 = value;
					Aftercol24Changed();

					Oncol24Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol24Changed(TimeSpan newValue);
		partial void Aftercol24Changed();

		public const string NameOfcol24 = "col24";

		private static readonly PropertyChangedEventArgs _col24ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol24);

		private void Oncol24Changed()
		{
			OnPropertyChanged(_col24ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col24_ : TimeSpan?

		private TimeSpan? _col24_;
		/// <summary>
		/// col24_
		/// </summary>
		[Column(DbType="time(7)", DataType=DataType.Time, Precision=7), DataMember, Nullable]
		public  TimeSpan?  col24_
		{
			get { return _col24_; }
			set
			{
				if (_col24_ != value)
				{
					Beforecol24_Changed(value);
					_col24_ = value;
					Aftercol24_Changed();

					Oncol24_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol24_Changed(TimeSpan? newValue);
		partial void Aftercol24_Changed();

		public const string NameOfcol24_ = "col24_";

		private static readonly PropertyChangedEventArgs _col24_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol24_);

		private void Oncol24_Changed()
		{
			OnPropertyChanged(_col24_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col25 : DateTime

		private DateTime _col25;
		/// <summary>
		/// col25
		/// </summary>
		[Column(DbType="datetime", DataType=DataType.DateTime), DataMember, NotNull]
		public  DateTime  col25
		{
			get { return _col25; }
			set
			{
				if (_col25 != value)
				{
					Beforecol25Changed(value);
					_col25 = value;
					Aftercol25Changed();

					Oncol25Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol25Changed(DateTime newValue);
		partial void Aftercol25Changed();

		public const string NameOfcol25 = "col25";

		private static readonly PropertyChangedEventArgs _col25ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol25);

		private void Oncol25Changed()
		{
			OnPropertyChanged(_col25ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col25_ : DateTime?

		private DateTime? _col25_;
		/// <summary>
		/// col25_
		/// </summary>
		[Column(DbType="datetime", DataType=DataType.DateTime), DataMember, Nullable]
		public  DateTime?  col25_
		{
			get { return _col25_; }
			set
			{
				if (_col25_ != value)
				{
					Beforecol25_Changed(value);
					_col25_ = value;
					Aftercol25_Changed();

					Oncol25_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol25_Changed(DateTime? newValue);
		partial void Aftercol25_Changed();

		public const string NameOfcol25_ = "col25_";

		private static readonly PropertyChangedEventArgs _col25_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol25_);

		private void Oncol25_Changed()
		{
			OnPropertyChanged(_col25_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col26 : DateTime

		private DateTime _col26;
		/// <summary>
		/// col26
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, NotNull]
		public  DateTime  col26
		{
			get { return _col26; }
			set
			{
				if (_col26 != value)
				{
					Beforecol26Changed(value);
					_col26 = value;
					Aftercol26Changed();

					Oncol26Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol26Changed(DateTime newValue);
		partial void Aftercol26Changed();

		public const string NameOfcol26 = "col26";

		private static readonly PropertyChangedEventArgs _col26ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol26);

		private void Oncol26Changed()
		{
			OnPropertyChanged(_col26ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col26_ : DateTime?

		private DateTime? _col26_;
		/// <summary>
		/// col26_
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, Nullable]
		public  DateTime?  col26_
		{
			get { return _col26_; }
			set
			{
				if (_col26_ != value)
				{
					Beforecol26_Changed(value);
					_col26_ = value;
					Aftercol26_Changed();

					Oncol26_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol26_Changed(DateTime? newValue);
		partial void Aftercol26_Changed();

		public const string NameOfcol26_ = "col26_";

		private static readonly PropertyChangedEventArgs _col26_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol26_);

		private void Oncol26_Changed()
		{
			OnPropertyChanged(_col26_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col27 : DateTime

		private DateTime _col27;
		/// <summary>
		/// col27
		/// </summary>
		[Column(DbType="smalldatetime", DataType=DataType.SmallDateTime), DataMember, NotNull]
		public  DateTime  col27
		{
			get { return _col27; }
			set
			{
				if (_col27 != value)
				{
					Beforecol27Changed(value);
					_col27 = value;
					Aftercol27Changed();

					Oncol27Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol27Changed(DateTime newValue);
		partial void Aftercol27Changed();

		public const string NameOfcol27 = "col27";

		private static readonly PropertyChangedEventArgs _col27ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol27);

		private void Oncol27Changed()
		{
			OnPropertyChanged(_col27ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col27_ : DateTime?

		private DateTime? _col27_;
		/// <summary>
		/// col27_
		/// </summary>
		[Column(DbType="smalldatetime", DataType=DataType.SmallDateTime), DataMember, Nullable]
		public  DateTime?  col27_
		{
			get { return _col27_; }
			set
			{
				if (_col27_ != value)
				{
					Beforecol27_Changed(value);
					_col27_ = value;
					Aftercol27_Changed();

					Oncol27_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol27_Changed(DateTime? newValue);
		partial void Aftercol27_Changed();

		public const string NameOfcol27_ = "col27_";

		private static readonly PropertyChangedEventArgs _col27_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol27_);

		private void Oncol27_Changed()
		{
			OnPropertyChanged(_col27_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col28 : DateTimeOffset

		private DateTimeOffset _col28;
		/// <summary>
		/// col28
		/// </summary>
		[Column(DbType="datetimeoffset(7)", DataType=DataType.DateTimeOffset, Precision=7), DataMember, NotNull]
		public  DateTimeOffset  col28
		{
			get { return _col28; }
			set
			{
				if (_col28 != value)
				{
					Beforecol28Changed(value);
					_col28 = value;
					Aftercol28Changed();

					Oncol28Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol28Changed(DateTimeOffset newValue);
		partial void Aftercol28Changed();

		public const string NameOfcol28 = "col28";

		private static readonly PropertyChangedEventArgs _col28ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol28);

		private void Oncol28Changed()
		{
			OnPropertyChanged(_col28ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col28_ : DateTimeOffset?

		private DateTimeOffset? _col28_;
		/// <summary>
		/// col28_
		/// </summary>
		[Column(DbType="datetimeoffset(7)", DataType=DataType.DateTimeOffset, Precision=7), DataMember, Nullable]
		public  DateTimeOffset?  col28_
		{
			get { return _col28_; }
			set
			{
				if (_col28_ != value)
				{
					Beforecol28_Changed(value);
					_col28_ = value;
					Aftercol28_Changed();

					Oncol28_Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol28_Changed(DateTimeOffset? newValue);
		partial void Aftercol28_Changed();

		public const string NameOfcol28_ = "col28_";

		private static readonly PropertyChangedEventArgs _col28_ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol28_);

		private void Oncol28_Changed()
		{
			OnPropertyChanged(_col28_ChangedEventArgs);
		}

		#endregion

		#endregion
		#region col29 : byte[]

		private byte[] _col29;
		/// <summary>
		/// col29
		/// </summary>
		[Column(DbType="timestamp", DataType=DataType.Timestamp, SkipOnInsert=true, SkipOnUpdate=true), DataMember, NotNull]
		public  byte[]  col29
		{
			get { return _col29; }
			set
			{
				if (_col29 != value)
				{
					Beforecol29Changed(value);
					_col29 = value;
					Aftercol29Changed();

					Oncol29Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecol29Changed(byte[] newValue);
		partial void Aftercol29Changed();

		public const string NameOfcol29 = "col29";

		private static readonly PropertyChangedEventArgs _col29ChangedEventArgs = new PropertyChangedEventArgs(NameOfcol29);

		private void Oncol29Changed()
		{
			OnPropertyChanged(_col29ChangedEventArgs);
		}

		#endregion

		#endregion

		#region enum用アクセスラッパー
		#endregion

		#region Constructor

		public Test()
		{
			#region フィールド初期化
			uid = default(int);
			col01 = 'a';
			col01_ = null;
			col02 = "a";
			col02_ = null;
			col03 = "";
			col03_ = null;
			col04 = "";
			col04_ = null;
			col05 = 'あ';
			col05_ = null;
			col06 = "あ";
			col06_ = null;
			col07 = "";
			col07_ = null;
			col08 = "";
			col08_ = null;
			col09 = Encoding.GetEncoding("Shift_JIS").GetBytes("");
			col09_ = null;
			col10 = Encoding.GetEncoding("Shift_JIS").GetBytes("");
			col10_ = null;
			col11 = Encoding.GetEncoding("Shift_JIS").GetBytes("");
			col11_ = null;
			col12 = true;
			col12_ = null;
			col13 = Guid.NewGuid();
			col13_ = null;
			col14 = 0;
			col14_ = null;
			col15 = 0;
			col15_ = null;
			col16 = 0;
			col16_ = null;
			col17 = 0;
			col17_ = null;
			col18 = 0;
			col18_ = null;
			col19 = 0;
			col19_ = null;
			col20 = 0;
			col20_ = null;
			col21 = 0;
			col21_ = null;
			col22 = 0;
			col22_ = null;
			col23 = DateTime.UtcNow.Date;
			col23_ = null;
			col24 = TimeSpan.Parse("1970/01/01");
			col24_ = null;
			col25 = DateTime.UtcNow;
			col25_ = null;
			col26 = DateTime.UtcNow;
			col26_ = null;
			col27 = DateTime.UtcNow;
			col27_ = null;
			col28 = DateTimeOffset.UtcNow;
			col28_ = null;
			col29 = default(byte[]);
			#endregion
		}

		#endregion

		#region Association


		#endregion

		#region INotifyPropertyChanged support

		[field : NonSerialized]
		public virtual event PropertyChangedEventHandler PropertyChanged;

		protected void OnPropertyChanged(string propertyName)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		protected void OnPropertyChanged(PropertyChangedEventArgs arg)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, arg);
			}
		}

		#endregion

	}
	#region テスト条件
	/// <summary>
	/// テスト条件
	/// </summary>
	[DataContract]
	public partial class TestCondition : TestConditionBase
	{
	}

	/// <summary>
	/// テスト条件ベース
	/// </summary>
	[DataContract]
	public class TestConditionBase : ConditionBase<Test>
	{
		#region properties
		#region uid
		/// <summary>
		/// uid_eqと等しい
		/// </summary>
		[DataMember] public int? uid_eq { get; set; }
		/// <summary>
		/// uid_neと等しくない
		/// </summary>
		[DataMember] public int? uid_ne { get; set; }
		/// <summary>
		/// uid_ltより小さい
		/// </summary>
		[DataMember] public int? uid_lt { get; set; }
		/// <summary>
		/// uid_gtより大きい
		/// </summary>
		[DataMember] public int? uid_gt { get; set; }
		/// <summary>
		/// uid_le以下
		/// </summary>
		[DataMember] public int? uid_le { get; set; }
		/// <summary>
		/// uid_ge以上
		/// </summary>
		[DataMember] public int? uid_ge { get; set; }
		/// <summary>
		/// uid_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> uid_in { get; set; }
		/// <summary>
		/// uid_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> uid_ni { get; set; }
		/// <summary>
		/// uid_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? uid_between { get; set; }
		#endregion
		#region col01
		/// <summary>
		/// col01_eqと等しい
		/// </summary>
		[DataMember] public char? col01_eq { get; set; }
		/// <summary>
		/// col01_neと等しくない
		/// </summary>
		[DataMember] public char? col01_ne { get; set; }
		/// <summary>
		/// col01_ltより小さい
		/// </summary>
		[DataMember] public char? col01_lt { get; set; }
		/// <summary>
		/// col01_gtより大きい
		/// </summary>
		[DataMember] public char? col01_gt { get; set; }
		/// <summary>
		/// col01_le以下
		/// </summary>
		[DataMember] public char? col01_le { get; set; }
		/// <summary>
		/// col01_ge以上
		/// </summary>
		[DataMember] public char? col01_ge { get; set; }
		/// <summary>
		/// col01_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<char> col01_in { get; set; }
		/// <summary>
		/// col01_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<char> col01_ni { get; set; }
		/// <summary>
		/// col01_betweenの範囲内にある
		/// </summary>
		[DataMember] public (char? low, char? high)? col01_between { get; set; }
		#endregion
		#region col01_
		/// <summary>
		/// col01__eqと等しい
		/// </summary>
		[DataMember] public char? col01__eq { get; set; }
		/// <summary>
		/// col01__neと等しくない
		/// </summary>
		[DataMember] public char? col01__ne { get; set; }
		/// <summary>
		/// col01__ltより小さい
		/// </summary>
		[DataMember] public char? col01__lt { get; set; }
		/// <summary>
		/// col01__gtより大きい
		/// </summary>
		[DataMember] public char? col01__gt { get; set; }
		/// <summary>
		/// col01__le以下
		/// </summary>
		[DataMember] public char? col01__le { get; set; }
		/// <summary>
		/// col01__ge以上
		/// </summary>
		[DataMember] public char? col01__ge { get; set; }
		/// <summary>
		/// col01__inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<char> col01__in { get; set; }
		/// <summary>
		/// col01__niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<char> col01__ni { get; set; }
		/// <summary>
		/// col01__betweenの範囲内にある
		/// </summary>
		[DataMember] public (char? low, char? high)? col01__between { get; set; }
		/// <summary>
		/// col01_がNULLか
		/// </summary>
		[DataMember] public bool col01__isnull { get; set; } =  false ;
		/// <summary>
		/// col01_がNULLではないか
		/// </summary>
		[DataMember] public bool col01__isnotnull { get; set; } = false;
		#endregion
		#region col02
		/// <summary>
		/// col02_eqと等しい
		/// </summary>
		[DataMember] public string col02_eq { get; set; }
		/// <summary>
		/// col02_neと等しくない
		/// </summary>
		[DataMember] public string col02_ne { get; set; }
		/// <summary>
		/// col02_ltより小さい
		/// </summary>
		[DataMember] public string col02_lt { get; set; }
		/// <summary>
		/// col02_gtより大きい
		/// </summary>
		[DataMember] public string col02_gt { get; set; }
		/// <summary>
		/// col02_le以下
		/// </summary>
		[DataMember] public string col02_le { get; set; }
		/// <summary>
		/// col02_ge以上
		/// </summary>
		[DataMember] public string col02_ge { get; set; }
		/// <summary>
		/// col02_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> col02_in { get; set; }
		/// <summary>
		/// col02_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> col02_ni { get; set; }
		/// <summary>
		/// col02_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? col02_between { get; set; }
		/// <summary>
		/// col02_likeと部分一致する
		/// </summary>
		[DataMember] public string col02_like { get; set; }
		#endregion
		#region col02_
		/// <summary>
		/// col02__eqと等しい
		/// </summary>
		[DataMember] public string col02__eq { get; set; }
		/// <summary>
		/// col02__neと等しくない
		/// </summary>
		[DataMember] public string col02__ne { get; set; }
		/// <summary>
		/// col02__ltより小さい
		/// </summary>
		[DataMember] public string col02__lt { get; set; }
		/// <summary>
		/// col02__gtより大きい
		/// </summary>
		[DataMember] public string col02__gt { get; set; }
		/// <summary>
		/// col02__le以下
		/// </summary>
		[DataMember] public string col02__le { get; set; }
		/// <summary>
		/// col02__ge以上
		/// </summary>
		[DataMember] public string col02__ge { get; set; }
		/// <summary>
		/// col02__inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> col02__in { get; set; }
		/// <summary>
		/// col02__niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> col02__ni { get; set; }
		/// <summary>
		/// col02__betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? col02__between { get; set; }
		/// <summary>
		/// col02_がNULLか
		/// </summary>
		[DataMember] public bool col02__isnull { get; set; } =  false ;
		/// <summary>
		/// col02_がNULLではないか
		/// </summary>
		[DataMember] public bool col02__isnotnull { get; set; } = false;
		/// <summary>
		/// col02__likeと部分一致する
		/// </summary>
		[DataMember] public string col02__like { get; set; }
		#endregion
		#region col03
		/// <summary>
		/// col03_eqと等しい
		/// </summary>
		[DataMember] public string col03_eq { get; set; }
		/// <summary>
		/// col03_neと等しくない
		/// </summary>
		[DataMember] public string col03_ne { get; set; }
		/// <summary>
		/// col03_ltより小さい
		/// </summary>
		[DataMember] public string col03_lt { get; set; }
		/// <summary>
		/// col03_gtより大きい
		/// </summary>
		[DataMember] public string col03_gt { get; set; }
		/// <summary>
		/// col03_le以下
		/// </summary>
		[DataMember] public string col03_le { get; set; }
		/// <summary>
		/// col03_ge以上
		/// </summary>
		[DataMember] public string col03_ge { get; set; }
		/// <summary>
		/// col03_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> col03_in { get; set; }
		/// <summary>
		/// col03_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> col03_ni { get; set; }
		/// <summary>
		/// col03_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? col03_between { get; set; }
		/// <summary>
		/// col03_likeと部分一致する
		/// </summary>
		[DataMember] public string col03_like { get; set; }
		#endregion
		#region col03_
		/// <summary>
		/// col03__eqと等しい
		/// </summary>
		[DataMember] public string col03__eq { get; set; }
		/// <summary>
		/// col03__neと等しくない
		/// </summary>
		[DataMember] public string col03__ne { get; set; }
		/// <summary>
		/// col03__ltより小さい
		/// </summary>
		[DataMember] public string col03__lt { get; set; }
		/// <summary>
		/// col03__gtより大きい
		/// </summary>
		[DataMember] public string col03__gt { get; set; }
		/// <summary>
		/// col03__le以下
		/// </summary>
		[DataMember] public string col03__le { get; set; }
		/// <summary>
		/// col03__ge以上
		/// </summary>
		[DataMember] public string col03__ge { get; set; }
		/// <summary>
		/// col03__inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> col03__in { get; set; }
		/// <summary>
		/// col03__niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> col03__ni { get; set; }
		/// <summary>
		/// col03__betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? col03__between { get; set; }
		/// <summary>
		/// col03_がNULLか
		/// </summary>
		[DataMember] public bool col03__isnull { get; set; } =  false ;
		/// <summary>
		/// col03_がNULLではないか
		/// </summary>
		[DataMember] public bool col03__isnotnull { get; set; } = false;
		/// <summary>
		/// col03__likeと部分一致する
		/// </summary>
		[DataMember] public string col03__like { get; set; }
		#endregion
		#region col04
		/// <summary>
		/// col04_eqと等しい
		/// </summary>
		[DataMember] public string col04_eq { get; set; }
		/// <summary>
		/// col04_neと等しくない
		/// </summary>
		[DataMember] public string col04_ne { get; set; }
		/// <summary>
		/// col04_ltより小さい
		/// </summary>
		[DataMember] public string col04_lt { get; set; }
		/// <summary>
		/// col04_gtより大きい
		/// </summary>
		[DataMember] public string col04_gt { get; set; }
		/// <summary>
		/// col04_le以下
		/// </summary>
		[DataMember] public string col04_le { get; set; }
		/// <summary>
		/// col04_ge以上
		/// </summary>
		[DataMember] public string col04_ge { get; set; }
		/// <summary>
		/// col04_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> col04_in { get; set; }
		/// <summary>
		/// col04_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> col04_ni { get; set; }
		/// <summary>
		/// col04_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? col04_between { get; set; }
		/// <summary>
		/// col04_likeと部分一致する
		/// </summary>
		[DataMember] public string col04_like { get; set; }
		#endregion
		#region col04_
		/// <summary>
		/// col04__eqと等しい
		/// </summary>
		[DataMember] public string col04__eq { get; set; }
		/// <summary>
		/// col04__neと等しくない
		/// </summary>
		[DataMember] public string col04__ne { get; set; }
		/// <summary>
		/// col04__ltより小さい
		/// </summary>
		[DataMember] public string col04__lt { get; set; }
		/// <summary>
		/// col04__gtより大きい
		/// </summary>
		[DataMember] public string col04__gt { get; set; }
		/// <summary>
		/// col04__le以下
		/// </summary>
		[DataMember] public string col04__le { get; set; }
		/// <summary>
		/// col04__ge以上
		/// </summary>
		[DataMember] public string col04__ge { get; set; }
		/// <summary>
		/// col04__inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> col04__in { get; set; }
		/// <summary>
		/// col04__niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> col04__ni { get; set; }
		/// <summary>
		/// col04__betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? col04__between { get; set; }
		/// <summary>
		/// col04_がNULLか
		/// </summary>
		[DataMember] public bool col04__isnull { get; set; } =  false ;
		/// <summary>
		/// col04_がNULLではないか
		/// </summary>
		[DataMember] public bool col04__isnotnull { get; set; } = false;
		/// <summary>
		/// col04__likeと部分一致する
		/// </summary>
		[DataMember] public string col04__like { get; set; }
		#endregion
		#region col05
		/// <summary>
		/// col05_eqと等しい
		/// </summary>
		[DataMember] public char? col05_eq { get; set; }
		/// <summary>
		/// col05_neと等しくない
		/// </summary>
		[DataMember] public char? col05_ne { get; set; }
		/// <summary>
		/// col05_ltより小さい
		/// </summary>
		[DataMember] public char? col05_lt { get; set; }
		/// <summary>
		/// col05_gtより大きい
		/// </summary>
		[DataMember] public char? col05_gt { get; set; }
		/// <summary>
		/// col05_le以下
		/// </summary>
		[DataMember] public char? col05_le { get; set; }
		/// <summary>
		/// col05_ge以上
		/// </summary>
		[DataMember] public char? col05_ge { get; set; }
		/// <summary>
		/// col05_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<char> col05_in { get; set; }
		/// <summary>
		/// col05_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<char> col05_ni { get; set; }
		/// <summary>
		/// col05_betweenの範囲内にある
		/// </summary>
		[DataMember] public (char? low, char? high)? col05_between { get; set; }
		#endregion
		#region col05_
		/// <summary>
		/// col05__eqと等しい
		/// </summary>
		[DataMember] public char? col05__eq { get; set; }
		/// <summary>
		/// col05__neと等しくない
		/// </summary>
		[DataMember] public char? col05__ne { get; set; }
		/// <summary>
		/// col05__ltより小さい
		/// </summary>
		[DataMember] public char? col05__lt { get; set; }
		/// <summary>
		/// col05__gtより大きい
		/// </summary>
		[DataMember] public char? col05__gt { get; set; }
		/// <summary>
		/// col05__le以下
		/// </summary>
		[DataMember] public char? col05__le { get; set; }
		/// <summary>
		/// col05__ge以上
		/// </summary>
		[DataMember] public char? col05__ge { get; set; }
		/// <summary>
		/// col05__inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<char> col05__in { get; set; }
		/// <summary>
		/// col05__niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<char> col05__ni { get; set; }
		/// <summary>
		/// col05__betweenの範囲内にある
		/// </summary>
		[DataMember] public (char? low, char? high)? col05__between { get; set; }
		/// <summary>
		/// col05_がNULLか
		/// </summary>
		[DataMember] public bool col05__isnull { get; set; } =  false ;
		/// <summary>
		/// col05_がNULLではないか
		/// </summary>
		[DataMember] public bool col05__isnotnull { get; set; } = false;
		#endregion
		#region col06
		/// <summary>
		/// col06_eqと等しい
		/// </summary>
		[DataMember] public string col06_eq { get; set; }
		/// <summary>
		/// col06_neと等しくない
		/// </summary>
		[DataMember] public string col06_ne { get; set; }
		/// <summary>
		/// col06_ltより小さい
		/// </summary>
		[DataMember] public string col06_lt { get; set; }
		/// <summary>
		/// col06_gtより大きい
		/// </summary>
		[DataMember] public string col06_gt { get; set; }
		/// <summary>
		/// col06_le以下
		/// </summary>
		[DataMember] public string col06_le { get; set; }
		/// <summary>
		/// col06_ge以上
		/// </summary>
		[DataMember] public string col06_ge { get; set; }
		/// <summary>
		/// col06_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> col06_in { get; set; }
		/// <summary>
		/// col06_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> col06_ni { get; set; }
		/// <summary>
		/// col06_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? col06_between { get; set; }
		/// <summary>
		/// col06_likeと部分一致する
		/// </summary>
		[DataMember] public string col06_like { get; set; }
		#endregion
		#region col06_
		/// <summary>
		/// col06__eqと等しい
		/// </summary>
		[DataMember] public string col06__eq { get; set; }
		/// <summary>
		/// col06__neと等しくない
		/// </summary>
		[DataMember] public string col06__ne { get; set; }
		/// <summary>
		/// col06__ltより小さい
		/// </summary>
		[DataMember] public string col06__lt { get; set; }
		/// <summary>
		/// col06__gtより大きい
		/// </summary>
		[DataMember] public string col06__gt { get; set; }
		/// <summary>
		/// col06__le以下
		/// </summary>
		[DataMember] public string col06__le { get; set; }
		/// <summary>
		/// col06__ge以上
		/// </summary>
		[DataMember] public string col06__ge { get; set; }
		/// <summary>
		/// col06__inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> col06__in { get; set; }
		/// <summary>
		/// col06__niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> col06__ni { get; set; }
		/// <summary>
		/// col06__betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? col06__between { get; set; }
		/// <summary>
		/// col06_がNULLか
		/// </summary>
		[DataMember] public bool col06__isnull { get; set; } =  false ;
		/// <summary>
		/// col06_がNULLではないか
		/// </summary>
		[DataMember] public bool col06__isnotnull { get; set; } = false;
		/// <summary>
		/// col06__likeと部分一致する
		/// </summary>
		[DataMember] public string col06__like { get; set; }
		#endregion
		#region col07
		/// <summary>
		/// col07_eqと等しい
		/// </summary>
		[DataMember] public string col07_eq { get; set; }
		/// <summary>
		/// col07_neと等しくない
		/// </summary>
		[DataMember] public string col07_ne { get; set; }
		/// <summary>
		/// col07_ltより小さい
		/// </summary>
		[DataMember] public string col07_lt { get; set; }
		/// <summary>
		/// col07_gtより大きい
		/// </summary>
		[DataMember] public string col07_gt { get; set; }
		/// <summary>
		/// col07_le以下
		/// </summary>
		[DataMember] public string col07_le { get; set; }
		/// <summary>
		/// col07_ge以上
		/// </summary>
		[DataMember] public string col07_ge { get; set; }
		/// <summary>
		/// col07_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> col07_in { get; set; }
		/// <summary>
		/// col07_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> col07_ni { get; set; }
		/// <summary>
		/// col07_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? col07_between { get; set; }
		/// <summary>
		/// col07_likeと部分一致する
		/// </summary>
		[DataMember] public string col07_like { get; set; }
		#endregion
		#region col07_
		/// <summary>
		/// col07__eqと等しい
		/// </summary>
		[DataMember] public string col07__eq { get; set; }
		/// <summary>
		/// col07__neと等しくない
		/// </summary>
		[DataMember] public string col07__ne { get; set; }
		/// <summary>
		/// col07__ltより小さい
		/// </summary>
		[DataMember] public string col07__lt { get; set; }
		/// <summary>
		/// col07__gtより大きい
		/// </summary>
		[DataMember] public string col07__gt { get; set; }
		/// <summary>
		/// col07__le以下
		/// </summary>
		[DataMember] public string col07__le { get; set; }
		/// <summary>
		/// col07__ge以上
		/// </summary>
		[DataMember] public string col07__ge { get; set; }
		/// <summary>
		/// col07__inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> col07__in { get; set; }
		/// <summary>
		/// col07__niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> col07__ni { get; set; }
		/// <summary>
		/// col07__betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? col07__between { get; set; }
		/// <summary>
		/// col07_がNULLか
		/// </summary>
		[DataMember] public bool col07__isnull { get; set; } =  false ;
		/// <summary>
		/// col07_がNULLではないか
		/// </summary>
		[DataMember] public bool col07__isnotnull { get; set; } = false;
		/// <summary>
		/// col07__likeと部分一致する
		/// </summary>
		[DataMember] public string col07__like { get; set; }
		#endregion
		#region col08
		/// <summary>
		/// col08_eqと等しい
		/// </summary>
		[DataMember] public string col08_eq { get; set; }
		/// <summary>
		/// col08_neと等しくない
		/// </summary>
		[DataMember] public string col08_ne { get; set; }
		/// <summary>
		/// col08_ltより小さい
		/// </summary>
		[DataMember] public string col08_lt { get; set; }
		/// <summary>
		/// col08_gtより大きい
		/// </summary>
		[DataMember] public string col08_gt { get; set; }
		/// <summary>
		/// col08_le以下
		/// </summary>
		[DataMember] public string col08_le { get; set; }
		/// <summary>
		/// col08_ge以上
		/// </summary>
		[DataMember] public string col08_ge { get; set; }
		/// <summary>
		/// col08_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> col08_in { get; set; }
		/// <summary>
		/// col08_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> col08_ni { get; set; }
		/// <summary>
		/// col08_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? col08_between { get; set; }
		/// <summary>
		/// col08_likeと部分一致する
		/// </summary>
		[DataMember] public string col08_like { get; set; }
		#endregion
		#region col08_
		/// <summary>
		/// col08__eqと等しい
		/// </summary>
		[DataMember] public string col08__eq { get; set; }
		/// <summary>
		/// col08__neと等しくない
		/// </summary>
		[DataMember] public string col08__ne { get; set; }
		/// <summary>
		/// col08__ltより小さい
		/// </summary>
		[DataMember] public string col08__lt { get; set; }
		/// <summary>
		/// col08__gtより大きい
		/// </summary>
		[DataMember] public string col08__gt { get; set; }
		/// <summary>
		/// col08__le以下
		/// </summary>
		[DataMember] public string col08__le { get; set; }
		/// <summary>
		/// col08__ge以上
		/// </summary>
		[DataMember] public string col08__ge { get; set; }
		/// <summary>
		/// col08__inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> col08__in { get; set; }
		/// <summary>
		/// col08__niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> col08__ni { get; set; }
		/// <summary>
		/// col08__betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? col08__between { get; set; }
		/// <summary>
		/// col08_がNULLか
		/// </summary>
		[DataMember] public bool col08__isnull { get; set; } =  false ;
		/// <summary>
		/// col08_がNULLではないか
		/// </summary>
		[DataMember] public bool col08__isnotnull { get; set; } = false;
		/// <summary>
		/// col08__likeと部分一致する
		/// </summary>
		[DataMember] public string col08__like { get; set; }
		#endregion
		#region col09
		/// <summary>
		/// col09_eqと等しい
		/// </summary>
		[DataMember] public byte[] col09_eq { get; set; }
		/// <summary>
		/// col09_neと等しくない
		/// </summary>
		[DataMember] public byte[] col09_ne { get; set; }
		#endregion
		#region col09_
		/// <summary>
		/// col09__eqと等しい
		/// </summary>
		[DataMember] public byte[] col09__eq { get; set; }
		/// <summary>
		/// col09__neと等しくない
		/// </summary>
		[DataMember] public byte[] col09__ne { get; set; }
		/// <summary>
		/// col09_がNULLか
		/// </summary>
		[DataMember] public bool col09__isnull { get; set; } =  false ;
		/// <summary>
		/// col09_がNULLではないか
		/// </summary>
		[DataMember] public bool col09__isnotnull { get; set; } = false;
		#endregion
		#region col10
		/// <summary>
		/// col10_eqと等しい
		/// </summary>
		[DataMember] public byte[] col10_eq { get; set; }
		/// <summary>
		/// col10_neと等しくない
		/// </summary>
		[DataMember] public byte[] col10_ne { get; set; }
		#endregion
		#region col10_
		/// <summary>
		/// col10__eqと等しい
		/// </summary>
		[DataMember] public byte[] col10__eq { get; set; }
		/// <summary>
		/// col10__neと等しくない
		/// </summary>
		[DataMember] public byte[] col10__ne { get; set; }
		/// <summary>
		/// col10_がNULLか
		/// </summary>
		[DataMember] public bool col10__isnull { get; set; } =  false ;
		/// <summary>
		/// col10_がNULLではないか
		/// </summary>
		[DataMember] public bool col10__isnotnull { get; set; } = false;
		#endregion
		#region col11
		/// <summary>
		/// col11_eqと等しい
		/// </summary>
		[DataMember] public byte[] col11_eq { get; set; }
		/// <summary>
		/// col11_neと等しくない
		/// </summary>
		[DataMember] public byte[] col11_ne { get; set; }
		#endregion
		#region col11_
		/// <summary>
		/// col11__eqと等しい
		/// </summary>
		[DataMember] public byte[] col11__eq { get; set; }
		/// <summary>
		/// col11__neと等しくない
		/// </summary>
		[DataMember] public byte[] col11__ne { get; set; }
		/// <summary>
		/// col11_がNULLか
		/// </summary>
		[DataMember] public bool col11__isnull { get; set; } =  false ;
		/// <summary>
		/// col11_がNULLではないか
		/// </summary>
		[DataMember] public bool col11__isnotnull { get; set; } = false;
		#endregion
		#region col12
		/// <summary>
		/// col12_eqと等しい
		/// </summary>
		[DataMember] public bool? col12_eq { get; set; }
		/// <summary>
		/// col12_neと等しくない
		/// </summary>
		[DataMember] public bool? col12_ne { get; set; }
		#endregion
		#region col12_
		/// <summary>
		/// col12__eqと等しい
		/// </summary>
		[DataMember] public bool? col12__eq { get; set; }
		/// <summary>
		/// col12__neと等しくない
		/// </summary>
		[DataMember] public bool? col12__ne { get; set; }
		/// <summary>
		/// col12_がNULLか
		/// </summary>
		[DataMember] public bool col12__isnull { get; set; } =  false ;
		/// <summary>
		/// col12_がNULLではないか
		/// </summary>
		[DataMember] public bool col12__isnotnull { get; set; } = false;
		#endregion
		#region col13
		/// <summary>
		/// col13_eqと等しい
		/// </summary>
		[DataMember] public Guid? col13_eq { get; set; }
		/// <summary>
		/// col13_neと等しくない
		/// </summary>
		[DataMember] public Guid? col13_ne { get; set; }
		#endregion
		#region col13_
		/// <summary>
		/// col13__eqと等しい
		/// </summary>
		[DataMember] public Guid? col13__eq { get; set; }
		/// <summary>
		/// col13__neと等しくない
		/// </summary>
		[DataMember] public Guid? col13__ne { get; set; }
		/// <summary>
		/// col13_がNULLか
		/// </summary>
		[DataMember] public bool col13__isnull { get; set; } =  false ;
		/// <summary>
		/// col13_がNULLではないか
		/// </summary>
		[DataMember] public bool col13__isnotnull { get; set; } = false;
		#endregion
		#region col14
		/// <summary>
		/// col14_eqと等しい
		/// </summary>
		[DataMember] public Int16? col14_eq { get; set; }
		/// <summary>
		/// col14_neと等しくない
		/// </summary>
		[DataMember] public Int16? col14_ne { get; set; }
		/// <summary>
		/// col14_ltより小さい
		/// </summary>
		[DataMember] public Int16? col14_lt { get; set; }
		/// <summary>
		/// col14_gtより大きい
		/// </summary>
		[DataMember] public Int16? col14_gt { get; set; }
		/// <summary>
		/// col14_le以下
		/// </summary>
		[DataMember] public Int16? col14_le { get; set; }
		/// <summary>
		/// col14_ge以上
		/// </summary>
		[DataMember] public Int16? col14_ge { get; set; }
		/// <summary>
		/// col14_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<Int16> col14_in { get; set; }
		/// <summary>
		/// col14_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<Int16> col14_ni { get; set; }
		/// <summary>
		/// col14_betweenの範囲内にある
		/// </summary>
		[DataMember] public (Int16? low, Int16? high)? col14_between { get; set; }
		#endregion
		#region col14_
		/// <summary>
		/// col14__eqと等しい
		/// </summary>
		[DataMember] public Int16? col14__eq { get; set; }
		/// <summary>
		/// col14__neと等しくない
		/// </summary>
		[DataMember] public Int16? col14__ne { get; set; }
		/// <summary>
		/// col14__ltより小さい
		/// </summary>
		[DataMember] public Int16? col14__lt { get; set; }
		/// <summary>
		/// col14__gtより大きい
		/// </summary>
		[DataMember] public Int16? col14__gt { get; set; }
		/// <summary>
		/// col14__le以下
		/// </summary>
		[DataMember] public Int16? col14__le { get; set; }
		/// <summary>
		/// col14__ge以上
		/// </summary>
		[DataMember] public Int16? col14__ge { get; set; }
		/// <summary>
		/// col14__inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<Int16> col14__in { get; set; }
		/// <summary>
		/// col14__niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<Int16> col14__ni { get; set; }
		/// <summary>
		/// col14__betweenの範囲内にある
		/// </summary>
		[DataMember] public (Int16? low, Int16? high)? col14__between { get; set; }
		/// <summary>
		/// col14_がNULLか
		/// </summary>
		[DataMember] public bool col14__isnull { get; set; } =  false ;
		/// <summary>
		/// col14_がNULLではないか
		/// </summary>
		[DataMember] public bool col14__isnotnull { get; set; } = false;
		#endregion
		#region col15
		/// <summary>
		/// col15_eqと等しい
		/// </summary>
		[DataMember] public int? col15_eq { get; set; }
		/// <summary>
		/// col15_neと等しくない
		/// </summary>
		[DataMember] public int? col15_ne { get; set; }
		/// <summary>
		/// col15_ltより小さい
		/// </summary>
		[DataMember] public int? col15_lt { get; set; }
		/// <summary>
		/// col15_gtより大きい
		/// </summary>
		[DataMember] public int? col15_gt { get; set; }
		/// <summary>
		/// col15_le以下
		/// </summary>
		[DataMember] public int? col15_le { get; set; }
		/// <summary>
		/// col15_ge以上
		/// </summary>
		[DataMember] public int? col15_ge { get; set; }
		/// <summary>
		/// col15_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> col15_in { get; set; }
		/// <summary>
		/// col15_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> col15_ni { get; set; }
		/// <summary>
		/// col15_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? col15_between { get; set; }
		#endregion
		#region col15_
		/// <summary>
		/// col15__eqと等しい
		/// </summary>
		[DataMember] public int? col15__eq { get; set; }
		/// <summary>
		/// col15__neと等しくない
		/// </summary>
		[DataMember] public int? col15__ne { get; set; }
		/// <summary>
		/// col15__ltより小さい
		/// </summary>
		[DataMember] public int? col15__lt { get; set; }
		/// <summary>
		/// col15__gtより大きい
		/// </summary>
		[DataMember] public int? col15__gt { get; set; }
		/// <summary>
		/// col15__le以下
		/// </summary>
		[DataMember] public int? col15__le { get; set; }
		/// <summary>
		/// col15__ge以上
		/// </summary>
		[DataMember] public int? col15__ge { get; set; }
		/// <summary>
		/// col15__inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> col15__in { get; set; }
		/// <summary>
		/// col15__niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> col15__ni { get; set; }
		/// <summary>
		/// col15__betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? col15__between { get; set; }
		/// <summary>
		/// col15_がNULLか
		/// </summary>
		[DataMember] public bool col15__isnull { get; set; } =  false ;
		/// <summary>
		/// col15_がNULLではないか
		/// </summary>
		[DataMember] public bool col15__isnotnull { get; set; } = false;
		#endregion
		#region col16
		/// <summary>
		/// col16_eqと等しい
		/// </summary>
		[DataMember] public Int64? col16_eq { get; set; }
		/// <summary>
		/// col16_neと等しくない
		/// </summary>
		[DataMember] public Int64? col16_ne { get; set; }
		/// <summary>
		/// col16_ltより小さい
		/// </summary>
		[DataMember] public Int64? col16_lt { get; set; }
		/// <summary>
		/// col16_gtより大きい
		/// </summary>
		[DataMember] public Int64? col16_gt { get; set; }
		/// <summary>
		/// col16_le以下
		/// </summary>
		[DataMember] public Int64? col16_le { get; set; }
		/// <summary>
		/// col16_ge以上
		/// </summary>
		[DataMember] public Int64? col16_ge { get; set; }
		/// <summary>
		/// col16_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<Int64> col16_in { get; set; }
		/// <summary>
		/// col16_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<Int64> col16_ni { get; set; }
		/// <summary>
		/// col16_betweenの範囲内にある
		/// </summary>
		[DataMember] public (Int64? low, Int64? high)? col16_between { get; set; }
		#endregion
		#region col16_
		/// <summary>
		/// col16__eqと等しい
		/// </summary>
		[DataMember] public Int64? col16__eq { get; set; }
		/// <summary>
		/// col16__neと等しくない
		/// </summary>
		[DataMember] public Int64? col16__ne { get; set; }
		/// <summary>
		/// col16__ltより小さい
		/// </summary>
		[DataMember] public Int64? col16__lt { get; set; }
		/// <summary>
		/// col16__gtより大きい
		/// </summary>
		[DataMember] public Int64? col16__gt { get; set; }
		/// <summary>
		/// col16__le以下
		/// </summary>
		[DataMember] public Int64? col16__le { get; set; }
		/// <summary>
		/// col16__ge以上
		/// </summary>
		[DataMember] public Int64? col16__ge { get; set; }
		/// <summary>
		/// col16__inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<Int64> col16__in { get; set; }
		/// <summary>
		/// col16__niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<Int64> col16__ni { get; set; }
		/// <summary>
		/// col16__betweenの範囲内にある
		/// </summary>
		[DataMember] public (Int64? low, Int64? high)? col16__between { get; set; }
		/// <summary>
		/// col16_がNULLか
		/// </summary>
		[DataMember] public bool col16__isnull { get; set; } =  false ;
		/// <summary>
		/// col16_がNULLではないか
		/// </summary>
		[DataMember] public bool col16__isnotnull { get; set; } = false;
		#endregion
		#region col17
		/// <summary>
		/// col17_eqと等しい
		/// </summary>
		[DataMember] public byte? col17_eq { get; set; }
		/// <summary>
		/// col17_neと等しくない
		/// </summary>
		[DataMember] public byte? col17_ne { get; set; }
		#endregion
		#region col17_
		/// <summary>
		/// col17__eqと等しい
		/// </summary>
		[DataMember] public byte? col17__eq { get; set; }
		/// <summary>
		/// col17__neと等しくない
		/// </summary>
		[DataMember] public byte? col17__ne { get; set; }
		/// <summary>
		/// col17_がNULLか
		/// </summary>
		[DataMember] public bool col17__isnull { get; set; } =  false ;
		/// <summary>
		/// col17_がNULLではないか
		/// </summary>
		[DataMember] public bool col17__isnotnull { get; set; } = false;
		#endregion
		#region col18
		/// <summary>
		/// col18_eqと等しい
		/// </summary>
		[DataMember] public float? col18_eq { get; set; }
		/// <summary>
		/// col18_neと等しくない
		/// </summary>
		[DataMember] public float? col18_ne { get; set; }
		/// <summary>
		/// col18_ltより小さい
		/// </summary>
		[DataMember] public float? col18_lt { get; set; }
		/// <summary>
		/// col18_gtより大きい
		/// </summary>
		[DataMember] public float? col18_gt { get; set; }
		/// <summary>
		/// col18_le以下
		/// </summary>
		[DataMember] public float? col18_le { get; set; }
		/// <summary>
		/// col18_ge以上
		/// </summary>
		[DataMember] public float? col18_ge { get; set; }
		/// <summary>
		/// col18_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<float> col18_in { get; set; }
		/// <summary>
		/// col18_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<float> col18_ni { get; set; }
		/// <summary>
		/// col18_betweenの範囲内にある
		/// </summary>
		[DataMember] public (float? low, float? high)? col18_between { get; set; }
		#endregion
		#region col18_
		/// <summary>
		/// col18__eqと等しい
		/// </summary>
		[DataMember] public float? col18__eq { get; set; }
		/// <summary>
		/// col18__neと等しくない
		/// </summary>
		[DataMember] public float? col18__ne { get; set; }
		/// <summary>
		/// col18__ltより小さい
		/// </summary>
		[DataMember] public float? col18__lt { get; set; }
		/// <summary>
		/// col18__gtより大きい
		/// </summary>
		[DataMember] public float? col18__gt { get; set; }
		/// <summary>
		/// col18__le以下
		/// </summary>
		[DataMember] public float? col18__le { get; set; }
		/// <summary>
		/// col18__ge以上
		/// </summary>
		[DataMember] public float? col18__ge { get; set; }
		/// <summary>
		/// col18__inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<float> col18__in { get; set; }
		/// <summary>
		/// col18__niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<float> col18__ni { get; set; }
		/// <summary>
		/// col18__betweenの範囲内にある
		/// </summary>
		[DataMember] public (float? low, float? high)? col18__between { get; set; }
		/// <summary>
		/// col18_がNULLか
		/// </summary>
		[DataMember] public bool col18__isnull { get; set; } =  false ;
		/// <summary>
		/// col18_がNULLではないか
		/// </summary>
		[DataMember] public bool col18__isnotnull { get; set; } = false;
		#endregion
		#region col19
		/// <summary>
		/// col19_eqと等しい
		/// </summary>
		[DataMember] public decimal? col19_eq { get; set; }
		/// <summary>
		/// col19_neと等しくない
		/// </summary>
		[DataMember] public decimal? col19_ne { get; set; }
		/// <summary>
		/// col19_ltより小さい
		/// </summary>
		[DataMember] public decimal? col19_lt { get; set; }
		/// <summary>
		/// col19_gtより大きい
		/// </summary>
		[DataMember] public decimal? col19_gt { get; set; }
		/// <summary>
		/// col19_le以下
		/// </summary>
		[DataMember] public decimal? col19_le { get; set; }
		/// <summary>
		/// col19_ge以上
		/// </summary>
		[DataMember] public decimal? col19_ge { get; set; }
		/// <summary>
		/// col19_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<decimal> col19_in { get; set; }
		/// <summary>
		/// col19_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<decimal> col19_ni { get; set; }
		/// <summary>
		/// col19_betweenの範囲内にある
		/// </summary>
		[DataMember] public (decimal? low, decimal? high)? col19_between { get; set; }
		#endregion
		#region col19_
		/// <summary>
		/// col19__eqと等しい
		/// </summary>
		[DataMember] public decimal? col19__eq { get; set; }
		/// <summary>
		/// col19__neと等しくない
		/// </summary>
		[DataMember] public decimal? col19__ne { get; set; }
		/// <summary>
		/// col19__ltより小さい
		/// </summary>
		[DataMember] public decimal? col19__lt { get; set; }
		/// <summary>
		/// col19__gtより大きい
		/// </summary>
		[DataMember] public decimal? col19__gt { get; set; }
		/// <summary>
		/// col19__le以下
		/// </summary>
		[DataMember] public decimal? col19__le { get; set; }
		/// <summary>
		/// col19__ge以上
		/// </summary>
		[DataMember] public decimal? col19__ge { get; set; }
		/// <summary>
		/// col19__inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<decimal> col19__in { get; set; }
		/// <summary>
		/// col19__niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<decimal> col19__ni { get; set; }
		/// <summary>
		/// col19__betweenの範囲内にある
		/// </summary>
		[DataMember] public (decimal? low, decimal? high)? col19__between { get; set; }
		/// <summary>
		/// col19_がNULLか
		/// </summary>
		[DataMember] public bool col19__isnull { get; set; } =  false ;
		/// <summary>
		/// col19_がNULLではないか
		/// </summary>
		[DataMember] public bool col19__isnotnull { get; set; } = false;
		#endregion
		#region col20
		/// <summary>
		/// col20_eqと等しい
		/// </summary>
		[DataMember] public decimal? col20_eq { get; set; }
		/// <summary>
		/// col20_neと等しくない
		/// </summary>
		[DataMember] public decimal? col20_ne { get; set; }
		/// <summary>
		/// col20_ltより小さい
		/// </summary>
		[DataMember] public decimal? col20_lt { get; set; }
		/// <summary>
		/// col20_gtより大きい
		/// </summary>
		[DataMember] public decimal? col20_gt { get; set; }
		/// <summary>
		/// col20_le以下
		/// </summary>
		[DataMember] public decimal? col20_le { get; set; }
		/// <summary>
		/// col20_ge以上
		/// </summary>
		[DataMember] public decimal? col20_ge { get; set; }
		/// <summary>
		/// col20_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<decimal> col20_in { get; set; }
		/// <summary>
		/// col20_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<decimal> col20_ni { get; set; }
		/// <summary>
		/// col20_betweenの範囲内にある
		/// </summary>
		[DataMember] public (decimal? low, decimal? high)? col20_between { get; set; }
		#endregion
		#region col20_
		/// <summary>
		/// col20__eqと等しい
		/// </summary>
		[DataMember] public decimal? col20__eq { get; set; }
		/// <summary>
		/// col20__neと等しくない
		/// </summary>
		[DataMember] public decimal? col20__ne { get; set; }
		/// <summary>
		/// col20__ltより小さい
		/// </summary>
		[DataMember] public decimal? col20__lt { get; set; }
		/// <summary>
		/// col20__gtより大きい
		/// </summary>
		[DataMember] public decimal? col20__gt { get; set; }
		/// <summary>
		/// col20__le以下
		/// </summary>
		[DataMember] public decimal? col20__le { get; set; }
		/// <summary>
		/// col20__ge以上
		/// </summary>
		[DataMember] public decimal? col20__ge { get; set; }
		/// <summary>
		/// col20__inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<decimal> col20__in { get; set; }
		/// <summary>
		/// col20__niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<decimal> col20__ni { get; set; }
		/// <summary>
		/// col20__betweenの範囲内にある
		/// </summary>
		[DataMember] public (decimal? low, decimal? high)? col20__between { get; set; }
		/// <summary>
		/// col20_がNULLか
		/// </summary>
		[DataMember] public bool col20__isnull { get; set; } =  false ;
		/// <summary>
		/// col20_がNULLではないか
		/// </summary>
		[DataMember] public bool col20__isnotnull { get; set; } = false;
		#endregion
		#region col21
		/// <summary>
		/// col21_eqと等しい
		/// </summary>
		[DataMember] public decimal? col21_eq { get; set; }
		/// <summary>
		/// col21_neと等しくない
		/// </summary>
		[DataMember] public decimal? col21_ne { get; set; }
		/// <summary>
		/// col21_ltより小さい
		/// </summary>
		[DataMember] public decimal? col21_lt { get; set; }
		/// <summary>
		/// col21_gtより大きい
		/// </summary>
		[DataMember] public decimal? col21_gt { get; set; }
		/// <summary>
		/// col21_le以下
		/// </summary>
		[DataMember] public decimal? col21_le { get; set; }
		/// <summary>
		/// col21_ge以上
		/// </summary>
		[DataMember] public decimal? col21_ge { get; set; }
		/// <summary>
		/// col21_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<decimal> col21_in { get; set; }
		/// <summary>
		/// col21_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<decimal> col21_ni { get; set; }
		/// <summary>
		/// col21_betweenの範囲内にある
		/// </summary>
		[DataMember] public (decimal? low, decimal? high)? col21_between { get; set; }
		#endregion
		#region col21_
		/// <summary>
		/// col21__eqと等しい
		/// </summary>
		[DataMember] public decimal? col21__eq { get; set; }
		/// <summary>
		/// col21__neと等しくない
		/// </summary>
		[DataMember] public decimal? col21__ne { get; set; }
		/// <summary>
		/// col21__ltより小さい
		/// </summary>
		[DataMember] public decimal? col21__lt { get; set; }
		/// <summary>
		/// col21__gtより大きい
		/// </summary>
		[DataMember] public decimal? col21__gt { get; set; }
		/// <summary>
		/// col21__le以下
		/// </summary>
		[DataMember] public decimal? col21__le { get; set; }
		/// <summary>
		/// col21__ge以上
		/// </summary>
		[DataMember] public decimal? col21__ge { get; set; }
		/// <summary>
		/// col21__inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<decimal> col21__in { get; set; }
		/// <summary>
		/// col21__niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<decimal> col21__ni { get; set; }
		/// <summary>
		/// col21__betweenの範囲内にある
		/// </summary>
		[DataMember] public (decimal? low, decimal? high)? col21__between { get; set; }
		/// <summary>
		/// col21_がNULLか
		/// </summary>
		[DataMember] public bool col21__isnull { get; set; } =  false ;
		/// <summary>
		/// col21_がNULLではないか
		/// </summary>
		[DataMember] public bool col21__isnotnull { get; set; } = false;
		#endregion
		#region col22
		/// <summary>
		/// col22_eqと等しい
		/// </summary>
		[DataMember] public decimal? col22_eq { get; set; }
		/// <summary>
		/// col22_neと等しくない
		/// </summary>
		[DataMember] public decimal? col22_ne { get; set; }
		/// <summary>
		/// col22_ltより小さい
		/// </summary>
		[DataMember] public decimal? col22_lt { get; set; }
		/// <summary>
		/// col22_gtより大きい
		/// </summary>
		[DataMember] public decimal? col22_gt { get; set; }
		/// <summary>
		/// col22_le以下
		/// </summary>
		[DataMember] public decimal? col22_le { get; set; }
		/// <summary>
		/// col22_ge以上
		/// </summary>
		[DataMember] public decimal? col22_ge { get; set; }
		/// <summary>
		/// col22_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<decimal> col22_in { get; set; }
		/// <summary>
		/// col22_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<decimal> col22_ni { get; set; }
		/// <summary>
		/// col22_betweenの範囲内にある
		/// </summary>
		[DataMember] public (decimal? low, decimal? high)? col22_between { get; set; }
		#endregion
		#region col22_
		/// <summary>
		/// col22__eqと等しい
		/// </summary>
		[DataMember] public decimal? col22__eq { get; set; }
		/// <summary>
		/// col22__neと等しくない
		/// </summary>
		[DataMember] public decimal? col22__ne { get; set; }
		/// <summary>
		/// col22__ltより小さい
		/// </summary>
		[DataMember] public decimal? col22__lt { get; set; }
		/// <summary>
		/// col22__gtより大きい
		/// </summary>
		[DataMember] public decimal? col22__gt { get; set; }
		/// <summary>
		/// col22__le以下
		/// </summary>
		[DataMember] public decimal? col22__le { get; set; }
		/// <summary>
		/// col22__ge以上
		/// </summary>
		[DataMember] public decimal? col22__ge { get; set; }
		/// <summary>
		/// col22__inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<decimal> col22__in { get; set; }
		/// <summary>
		/// col22__niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<decimal> col22__ni { get; set; }
		/// <summary>
		/// col22__betweenの範囲内にある
		/// </summary>
		[DataMember] public (decimal? low, decimal? high)? col22__between { get; set; }
		/// <summary>
		/// col22_がNULLか
		/// </summary>
		[DataMember] public bool col22__isnull { get; set; } =  false ;
		/// <summary>
		/// col22_がNULLではないか
		/// </summary>
		[DataMember] public bool col22__isnotnull { get; set; } = false;
		#endregion
		#region col23
		/// <summary>
		/// col23_eqと等しい
		/// </summary>
		[DataMember] public DateTime? col23_eq { get; set; }
		/// <summary>
		/// col23_neと等しくない
		/// </summary>
		[DataMember] public DateTime? col23_ne { get; set; }
		/// <summary>
		/// col23_ltより小さい
		/// </summary>
		[DataMember] public DateTime? col23_lt { get; set; }
		/// <summary>
		/// col23_gtより大きい
		/// </summary>
		[DataMember] public DateTime? col23_gt { get; set; }
		/// <summary>
		/// col23_le以下
		/// </summary>
		[DataMember] public DateTime? col23_le { get; set; }
		/// <summary>
		/// col23_ge以上
		/// </summary>
		[DataMember] public DateTime? col23_ge { get; set; }
		/// <summary>
		/// col23_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> col23_in { get; set; }
		/// <summary>
		/// col23_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> col23_ni { get; set; }
		/// <summary>
		/// col23_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? col23_between { get; set; }
		#endregion
		#region col23_
		/// <summary>
		/// col23__eqと等しい
		/// </summary>
		[DataMember] public DateTime? col23__eq { get; set; }
		/// <summary>
		/// col23__neと等しくない
		/// </summary>
		[DataMember] public DateTime? col23__ne { get; set; }
		/// <summary>
		/// col23__ltより小さい
		/// </summary>
		[DataMember] public DateTime? col23__lt { get; set; }
		/// <summary>
		/// col23__gtより大きい
		/// </summary>
		[DataMember] public DateTime? col23__gt { get; set; }
		/// <summary>
		/// col23__le以下
		/// </summary>
		[DataMember] public DateTime? col23__le { get; set; }
		/// <summary>
		/// col23__ge以上
		/// </summary>
		[DataMember] public DateTime? col23__ge { get; set; }
		/// <summary>
		/// col23__inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> col23__in { get; set; }
		/// <summary>
		/// col23__niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> col23__ni { get; set; }
		/// <summary>
		/// col23__betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? col23__between { get; set; }
		/// <summary>
		/// col23_がNULLか
		/// </summary>
		[DataMember] public bool col23__isnull { get; set; } =  false ;
		/// <summary>
		/// col23_がNULLではないか
		/// </summary>
		[DataMember] public bool col23__isnotnull { get; set; } = false;
		#endregion
		#region col24
		/// <summary>
		/// col24_eqと等しい
		/// </summary>
		[DataMember] public TimeSpan? col24_eq { get; set; }
		/// <summary>
		/// col24_neと等しくない
		/// </summary>
		[DataMember] public TimeSpan? col24_ne { get; set; }
		/// <summary>
		/// col24_ltより小さい
		/// </summary>
		[DataMember] public TimeSpan? col24_lt { get; set; }
		/// <summary>
		/// col24_gtより大きい
		/// </summary>
		[DataMember] public TimeSpan? col24_gt { get; set; }
		/// <summary>
		/// col24_le以下
		/// </summary>
		[DataMember] public TimeSpan? col24_le { get; set; }
		/// <summary>
		/// col24_ge以上
		/// </summary>
		[DataMember] public TimeSpan? col24_ge { get; set; }
		/// <summary>
		/// col24_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<TimeSpan> col24_in { get; set; }
		/// <summary>
		/// col24_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<TimeSpan> col24_ni { get; set; }
		/// <summary>
		/// col24_betweenの範囲内にある
		/// </summary>
		[DataMember] public (TimeSpan? low, TimeSpan? high)? col24_between { get; set; }
		#endregion
		#region col24_
		/// <summary>
		/// col24__eqと等しい
		/// </summary>
		[DataMember] public TimeSpan? col24__eq { get; set; }
		/// <summary>
		/// col24__neと等しくない
		/// </summary>
		[DataMember] public TimeSpan? col24__ne { get; set; }
		/// <summary>
		/// col24__ltより小さい
		/// </summary>
		[DataMember] public TimeSpan? col24__lt { get; set; }
		/// <summary>
		/// col24__gtより大きい
		/// </summary>
		[DataMember] public TimeSpan? col24__gt { get; set; }
		/// <summary>
		/// col24__le以下
		/// </summary>
		[DataMember] public TimeSpan? col24__le { get; set; }
		/// <summary>
		/// col24__ge以上
		/// </summary>
		[DataMember] public TimeSpan? col24__ge { get; set; }
		/// <summary>
		/// col24__inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<TimeSpan> col24__in { get; set; }
		/// <summary>
		/// col24__niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<TimeSpan> col24__ni { get; set; }
		/// <summary>
		/// col24__betweenの範囲内にある
		/// </summary>
		[DataMember] public (TimeSpan? low, TimeSpan? high)? col24__between { get; set; }
		/// <summary>
		/// col24_がNULLか
		/// </summary>
		[DataMember] public bool col24__isnull { get; set; } =  false ;
		/// <summary>
		/// col24_がNULLではないか
		/// </summary>
		[DataMember] public bool col24__isnotnull { get; set; } = false;
		#endregion
		#region col25
		/// <summary>
		/// col25_eqと等しい
		/// </summary>
		[DataMember] public DateTime? col25_eq { get; set; }
		/// <summary>
		/// col25_neと等しくない
		/// </summary>
		[DataMember] public DateTime? col25_ne { get; set; }
		/// <summary>
		/// col25_ltより小さい
		/// </summary>
		[DataMember] public DateTime? col25_lt { get; set; }
		/// <summary>
		/// col25_gtより大きい
		/// </summary>
		[DataMember] public DateTime? col25_gt { get; set; }
		/// <summary>
		/// col25_le以下
		/// </summary>
		[DataMember] public DateTime? col25_le { get; set; }
		/// <summary>
		/// col25_ge以上
		/// </summary>
		[DataMember] public DateTime? col25_ge { get; set; }
		/// <summary>
		/// col25_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> col25_in { get; set; }
		/// <summary>
		/// col25_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> col25_ni { get; set; }
		/// <summary>
		/// col25_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? col25_between { get; set; }
		#endregion
		#region col25_
		/// <summary>
		/// col25__eqと等しい
		/// </summary>
		[DataMember] public DateTime? col25__eq { get; set; }
		/// <summary>
		/// col25__neと等しくない
		/// </summary>
		[DataMember] public DateTime? col25__ne { get; set; }
		/// <summary>
		/// col25__ltより小さい
		/// </summary>
		[DataMember] public DateTime? col25__lt { get; set; }
		/// <summary>
		/// col25__gtより大きい
		/// </summary>
		[DataMember] public DateTime? col25__gt { get; set; }
		/// <summary>
		/// col25__le以下
		/// </summary>
		[DataMember] public DateTime? col25__le { get; set; }
		/// <summary>
		/// col25__ge以上
		/// </summary>
		[DataMember] public DateTime? col25__ge { get; set; }
		/// <summary>
		/// col25__inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> col25__in { get; set; }
		/// <summary>
		/// col25__niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> col25__ni { get; set; }
		/// <summary>
		/// col25__betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? col25__between { get; set; }
		/// <summary>
		/// col25_がNULLか
		/// </summary>
		[DataMember] public bool col25__isnull { get; set; } =  false ;
		/// <summary>
		/// col25_がNULLではないか
		/// </summary>
		[DataMember] public bool col25__isnotnull { get; set; } = false;
		#endregion
		#region col26
		/// <summary>
		/// col26_eqと等しい
		/// </summary>
		[DataMember] public DateTime? col26_eq { get; set; }
		/// <summary>
		/// col26_neと等しくない
		/// </summary>
		[DataMember] public DateTime? col26_ne { get; set; }
		/// <summary>
		/// col26_ltより小さい
		/// </summary>
		[DataMember] public DateTime? col26_lt { get; set; }
		/// <summary>
		/// col26_gtより大きい
		/// </summary>
		[DataMember] public DateTime? col26_gt { get; set; }
		/// <summary>
		/// col26_le以下
		/// </summary>
		[DataMember] public DateTime? col26_le { get; set; }
		/// <summary>
		/// col26_ge以上
		/// </summary>
		[DataMember] public DateTime? col26_ge { get; set; }
		/// <summary>
		/// col26_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> col26_in { get; set; }
		/// <summary>
		/// col26_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> col26_ni { get; set; }
		/// <summary>
		/// col26_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? col26_between { get; set; }
		#endregion
		#region col26_
		/// <summary>
		/// col26__eqと等しい
		/// </summary>
		[DataMember] public DateTime? col26__eq { get; set; }
		/// <summary>
		/// col26__neと等しくない
		/// </summary>
		[DataMember] public DateTime? col26__ne { get; set; }
		/// <summary>
		/// col26__ltより小さい
		/// </summary>
		[DataMember] public DateTime? col26__lt { get; set; }
		/// <summary>
		/// col26__gtより大きい
		/// </summary>
		[DataMember] public DateTime? col26__gt { get; set; }
		/// <summary>
		/// col26__le以下
		/// </summary>
		[DataMember] public DateTime? col26__le { get; set; }
		/// <summary>
		/// col26__ge以上
		/// </summary>
		[DataMember] public DateTime? col26__ge { get; set; }
		/// <summary>
		/// col26__inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> col26__in { get; set; }
		/// <summary>
		/// col26__niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> col26__ni { get; set; }
		/// <summary>
		/// col26__betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? col26__between { get; set; }
		/// <summary>
		/// col26_がNULLか
		/// </summary>
		[DataMember] public bool col26__isnull { get; set; } =  false ;
		/// <summary>
		/// col26_がNULLではないか
		/// </summary>
		[DataMember] public bool col26__isnotnull { get; set; } = false;
		#endregion
		#region col27
		/// <summary>
		/// col27_eqと等しい
		/// </summary>
		[DataMember] public DateTime? col27_eq { get; set; }
		/// <summary>
		/// col27_neと等しくない
		/// </summary>
		[DataMember] public DateTime? col27_ne { get; set; }
		/// <summary>
		/// col27_ltより小さい
		/// </summary>
		[DataMember] public DateTime? col27_lt { get; set; }
		/// <summary>
		/// col27_gtより大きい
		/// </summary>
		[DataMember] public DateTime? col27_gt { get; set; }
		/// <summary>
		/// col27_le以下
		/// </summary>
		[DataMember] public DateTime? col27_le { get; set; }
		/// <summary>
		/// col27_ge以上
		/// </summary>
		[DataMember] public DateTime? col27_ge { get; set; }
		/// <summary>
		/// col27_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> col27_in { get; set; }
		/// <summary>
		/// col27_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> col27_ni { get; set; }
		/// <summary>
		/// col27_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? col27_between { get; set; }
		#endregion
		#region col27_
		/// <summary>
		/// col27__eqと等しい
		/// </summary>
		[DataMember] public DateTime? col27__eq { get; set; }
		/// <summary>
		/// col27__neと等しくない
		/// </summary>
		[DataMember] public DateTime? col27__ne { get; set; }
		/// <summary>
		/// col27__ltより小さい
		/// </summary>
		[DataMember] public DateTime? col27__lt { get; set; }
		/// <summary>
		/// col27__gtより大きい
		/// </summary>
		[DataMember] public DateTime? col27__gt { get; set; }
		/// <summary>
		/// col27__le以下
		/// </summary>
		[DataMember] public DateTime? col27__le { get; set; }
		/// <summary>
		/// col27__ge以上
		/// </summary>
		[DataMember] public DateTime? col27__ge { get; set; }
		/// <summary>
		/// col27__inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> col27__in { get; set; }
		/// <summary>
		/// col27__niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> col27__ni { get; set; }
		/// <summary>
		/// col27__betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? col27__between { get; set; }
		/// <summary>
		/// col27_がNULLか
		/// </summary>
		[DataMember] public bool col27__isnull { get; set; } =  false ;
		/// <summary>
		/// col27_がNULLではないか
		/// </summary>
		[DataMember] public bool col27__isnotnull { get; set; } = false;
		#endregion
		#region col28
		/// <summary>
		/// col28_eqと等しい
		/// </summary>
		[DataMember] public DateTimeOffset? col28_eq { get; set; }
		/// <summary>
		/// col28_neと等しくない
		/// </summary>
		[DataMember] public DateTimeOffset? col28_ne { get; set; }
		/// <summary>
		/// col28_ltより小さい
		/// </summary>
		[DataMember] public DateTimeOffset? col28_lt { get; set; }
		/// <summary>
		/// col28_gtより大きい
		/// </summary>
		[DataMember] public DateTimeOffset? col28_gt { get; set; }
		/// <summary>
		/// col28_le以下
		/// </summary>
		[DataMember] public DateTimeOffset? col28_le { get; set; }
		/// <summary>
		/// col28_ge以上
		/// </summary>
		[DataMember] public DateTimeOffset? col28_ge { get; set; }
		/// <summary>
		/// col28_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTimeOffset> col28_in { get; set; }
		/// <summary>
		/// col28_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTimeOffset> col28_ni { get; set; }
		/// <summary>
		/// col28_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTimeOffset? low, DateTimeOffset? high)? col28_between { get; set; }
		#endregion
		#region col28_
		/// <summary>
		/// col28__eqと等しい
		/// </summary>
		[DataMember] public DateTimeOffset? col28__eq { get; set; }
		/// <summary>
		/// col28__neと等しくない
		/// </summary>
		[DataMember] public DateTimeOffset? col28__ne { get; set; }
		/// <summary>
		/// col28__ltより小さい
		/// </summary>
		[DataMember] public DateTimeOffset? col28__lt { get; set; }
		/// <summary>
		/// col28__gtより大きい
		/// </summary>
		[DataMember] public DateTimeOffset? col28__gt { get; set; }
		/// <summary>
		/// col28__le以下
		/// </summary>
		[DataMember] public DateTimeOffset? col28__le { get; set; }
		/// <summary>
		/// col28__ge以上
		/// </summary>
		[DataMember] public DateTimeOffset? col28__ge { get; set; }
		/// <summary>
		/// col28__inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTimeOffset> col28__in { get; set; }
		/// <summary>
		/// col28__niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTimeOffset> col28__ni { get; set; }
		/// <summary>
		/// col28__betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTimeOffset? low, DateTimeOffset? high)? col28__between { get; set; }
		/// <summary>
		/// col28_がNULLか
		/// </summary>
		[DataMember] public bool col28__isnull { get; set; } =  false ;
		/// <summary>
		/// col28_がNULLではないか
		/// </summary>
		[DataMember] public bool col28__isnotnull { get; set; } = false;
		#endregion
		#region col29
		/// <summary>
		/// col29_eqと等しい
		/// </summary>
		[DataMember] public byte[] col29_eq { get; set; }
		/// <summary>
		/// col29_neと等しくない
		/// </summary>
		[DataMember] public byte[] col29_ne { get; set; }
		#endregion
		#endregion

		#region override
		override public Expression<Func<Test, bool>> CreatePredicate()
		{
			var predicate = base.CreatePredicate();

			#region uid
			if (uid_eq != null) predicate = predicate.And(_ => _.uid == uid_eq);
			if (uid_ne != null) predicate = predicate.And(_ => _.uid != uid_ne);
			if (uid_lt != null) predicate = predicate.And(_ => _.uid < uid_lt);
			if (uid_gt != null) predicate = predicate.And(_ => _.uid > uid_gt);
			if (uid_le != null) predicate = predicate.And(_ => _.uid <= uid_le);
			if (uid_ge != null) predicate = predicate.And(_ => _.uid >= uid_ge);
			if (uid_in != null) predicate = predicate.And(_ => uid_in.Contains(_.uid));
			if (uid_ni != null) predicate = predicate.And(_ => !uid_ni.Contains(_.uid));
			#endregion
			#region col01
			if (col01_eq != null) predicate = predicate.And(_ => _.col01 == col01_eq);
			if (col01_ne != null) predicate = predicate.And(_ => _.col01 != col01_ne);
			if (col01_lt != null) predicate = predicate.And(_ => _.col01 < col01_lt);
			if (col01_gt != null) predicate = predicate.And(_ => _.col01 > col01_gt);
			if (col01_le != null) predicate = predicate.And(_ => _.col01 <= col01_le);
			if (col01_ge != null) predicate = predicate.And(_ => _.col01 >= col01_ge);
			if (col01_in != null) predicate = predicate.And(_ => col01_in.Contains(_.col01));
			if (col01_ni != null) predicate = predicate.And(_ => !col01_ni.Contains(_.col01));
			#endregion
			#region col01_
			if (col01__eq != null) predicate = predicate.And(_ => _.col01_ == col01__eq);
			if (col01__ne != null) predicate = predicate.And(_ => _.col01_ != col01__ne);
			if (col01__lt != null) predicate = predicate.And(_ => _.col01_ < col01__lt);
			if (col01__gt != null) predicate = predicate.And(_ => _.col01_ > col01__gt);
			if (col01__le != null) predicate = predicate.And(_ => _.col01_ <= col01__le);
			if (col01__ge != null) predicate = predicate.And(_ => _.col01_ >= col01__ge);
			if (col01__in != null) predicate = predicate.And(_ => col01__in.Contains(_.col01_.Value));
			if (col01__ni != null) predicate = predicate.And(_ => !col01__ni.Contains(_.col01_.Value));
			if (col01__isnull) predicate = predicate.And(_ => _.col01_ == null);
			if (col01__isnotnull) predicate = predicate.And(_ => _.col01_ != null);
			#endregion
			#region col02
			if (col02_eq != null) predicate = predicate.And(_ => _.col02 == col02_eq);
			if (col02_ne != null) predicate = predicate.And(_ => _.col02 != col02_ne);
			if (col02_lt != null) predicate = predicate.And(_ => col02_lt.CompareTo(_.col02) > 0);
			if (col02_gt != null) predicate = predicate.And(_ => col02_gt.CompareTo(_.col02) < 0);
			if (col02_le != null) predicate = predicate.And(_ => col02_le.CompareTo(_.col02) >= 0);
			if (col02_ge != null) predicate = predicate.And(_ => col02_ge.CompareTo(_.col02) <= 0);
			if (col02_in != null) predicate = predicate.And(_ => col02_in.Contains(_.col02));
			if (col02_ni != null) predicate = predicate.And(_ => !col02_ni.Contains(_.col02));
			#endregion
			#region col02_
			if (col02__eq != null) predicate = predicate.And(_ => _.col02_ == col02__eq);
			if (col02__ne != null) predicate = predicate.And(_ => _.col02_ != col02__ne);
			if (col02__lt != null) predicate = predicate.And(_ => col02__lt.CompareTo(_.col02_) > 0);
			if (col02__gt != null) predicate = predicate.And(_ => col02__gt.CompareTo(_.col02_) < 0);
			if (col02__le != null) predicate = predicate.And(_ => col02__le.CompareTo(_.col02_) >= 0);
			if (col02__ge != null) predicate = predicate.And(_ => col02__ge.CompareTo(_.col02_) <= 0);
			if (col02__in != null) predicate = predicate.And(_ => col02__in.Contains(_.col02_));
			if (col02__ni != null) predicate = predicate.And(_ => !col02__ni.Contains(_.col02_));
			if (col02__isnull) predicate = predicate.And(_ => _.col02_ == null);
			if (col02__isnotnull) predicate = predicate.And(_ => _.col02_ != null);
			#endregion
			#region col03
			if (col03_eq != null) predicate = predicate.And(_ => _.col03 == col03_eq);
			if (col03_ne != null) predicate = predicate.And(_ => _.col03 != col03_ne);
			if (col03_lt != null) predicate = predicate.And(_ => col03_lt.CompareTo(_.col03) > 0);
			if (col03_gt != null) predicate = predicate.And(_ => col03_gt.CompareTo(_.col03) < 0);
			if (col03_le != null) predicate = predicate.And(_ => col03_le.CompareTo(_.col03) >= 0);
			if (col03_ge != null) predicate = predicate.And(_ => col03_ge.CompareTo(_.col03) <= 0);
			if (col03_in != null) predicate = predicate.And(_ => col03_in.Contains(_.col03));
			if (col03_ni != null) predicate = predicate.And(_ => !col03_ni.Contains(_.col03));
			#endregion
			#region col03_
			if (col03__eq != null) predicate = predicate.And(_ => _.col03_ == col03__eq);
			if (col03__ne != null) predicate = predicate.And(_ => _.col03_ != col03__ne);
			if (col03__lt != null) predicate = predicate.And(_ => col03__lt.CompareTo(_.col03_) > 0);
			if (col03__gt != null) predicate = predicate.And(_ => col03__gt.CompareTo(_.col03_) < 0);
			if (col03__le != null) predicate = predicate.And(_ => col03__le.CompareTo(_.col03_) >= 0);
			if (col03__ge != null) predicate = predicate.And(_ => col03__ge.CompareTo(_.col03_) <= 0);
			if (col03__in != null) predicate = predicate.And(_ => col03__in.Contains(_.col03_));
			if (col03__ni != null) predicate = predicate.And(_ => !col03__ni.Contains(_.col03_));
			if (col03__isnull) predicate = predicate.And(_ => _.col03_ == null);
			if (col03__isnotnull) predicate = predicate.And(_ => _.col03_ != null);
			#endregion
			#region col04
			if (col04_eq != null) predicate = predicate.And(_ => _.col04 == col04_eq);
			if (col04_ne != null) predicate = predicate.And(_ => _.col04 != col04_ne);
			if (col04_lt != null) predicate = predicate.And(_ => col04_lt.CompareTo(_.col04) > 0);
			if (col04_gt != null) predicate = predicate.And(_ => col04_gt.CompareTo(_.col04) < 0);
			if (col04_le != null) predicate = predicate.And(_ => col04_le.CompareTo(_.col04) >= 0);
			if (col04_ge != null) predicate = predicate.And(_ => col04_ge.CompareTo(_.col04) <= 0);
			if (col04_in != null) predicate = predicate.And(_ => col04_in.Contains(_.col04));
			if (col04_ni != null) predicate = predicate.And(_ => !col04_ni.Contains(_.col04));
			#endregion
			#region col04_
			if (col04__eq != null) predicate = predicate.And(_ => _.col04_ == col04__eq);
			if (col04__ne != null) predicate = predicate.And(_ => _.col04_ != col04__ne);
			if (col04__lt != null) predicate = predicate.And(_ => col04__lt.CompareTo(_.col04_) > 0);
			if (col04__gt != null) predicate = predicate.And(_ => col04__gt.CompareTo(_.col04_) < 0);
			if (col04__le != null) predicate = predicate.And(_ => col04__le.CompareTo(_.col04_) >= 0);
			if (col04__ge != null) predicate = predicate.And(_ => col04__ge.CompareTo(_.col04_) <= 0);
			if (col04__in != null) predicate = predicate.And(_ => col04__in.Contains(_.col04_));
			if (col04__ni != null) predicate = predicate.And(_ => !col04__ni.Contains(_.col04_));
			if (col04__isnull) predicate = predicate.And(_ => _.col04_ == null);
			if (col04__isnotnull) predicate = predicate.And(_ => _.col04_ != null);
			#endregion
			#region col05
			if (col05_eq != null) predicate = predicate.And(_ => _.col05 == col05_eq);
			if (col05_ne != null) predicate = predicate.And(_ => _.col05 != col05_ne);
			if (col05_lt != null) predicate = predicate.And(_ => _.col05 < col05_lt);
			if (col05_gt != null) predicate = predicate.And(_ => _.col05 > col05_gt);
			if (col05_le != null) predicate = predicate.And(_ => _.col05 <= col05_le);
			if (col05_ge != null) predicate = predicate.And(_ => _.col05 >= col05_ge);
			if (col05_in != null) predicate = predicate.And(_ => col05_in.Contains(_.col05));
			if (col05_ni != null) predicate = predicate.And(_ => !col05_ni.Contains(_.col05));
			#endregion
			#region col05_
			if (col05__eq != null) predicate = predicate.And(_ => _.col05_ == col05__eq);
			if (col05__ne != null) predicate = predicate.And(_ => _.col05_ != col05__ne);
			if (col05__lt != null) predicate = predicate.And(_ => _.col05_ < col05__lt);
			if (col05__gt != null) predicate = predicate.And(_ => _.col05_ > col05__gt);
			if (col05__le != null) predicate = predicate.And(_ => _.col05_ <= col05__le);
			if (col05__ge != null) predicate = predicate.And(_ => _.col05_ >= col05__ge);
			if (col05__in != null) predicate = predicate.And(_ => col05__in.Contains(_.col05_.Value));
			if (col05__ni != null) predicate = predicate.And(_ => !col05__ni.Contains(_.col05_.Value));
			if (col05__isnull) predicate = predicate.And(_ => _.col05_ == null);
			if (col05__isnotnull) predicate = predicate.And(_ => _.col05_ != null);
			#endregion
			#region col06
			if (col06_eq != null) predicate = predicate.And(_ => _.col06 == col06_eq);
			if (col06_ne != null) predicate = predicate.And(_ => _.col06 != col06_ne);
			if (col06_lt != null) predicate = predicate.And(_ => col06_lt.CompareTo(_.col06) > 0);
			if (col06_gt != null) predicate = predicate.And(_ => col06_gt.CompareTo(_.col06) < 0);
			if (col06_le != null) predicate = predicate.And(_ => col06_le.CompareTo(_.col06) >= 0);
			if (col06_ge != null) predicate = predicate.And(_ => col06_ge.CompareTo(_.col06) <= 0);
			if (col06_in != null) predicate = predicate.And(_ => col06_in.Contains(_.col06));
			if (col06_ni != null) predicate = predicate.And(_ => !col06_ni.Contains(_.col06));
			#endregion
			#region col06_
			if (col06__eq != null) predicate = predicate.And(_ => _.col06_ == col06__eq);
			if (col06__ne != null) predicate = predicate.And(_ => _.col06_ != col06__ne);
			if (col06__lt != null) predicate = predicate.And(_ => col06__lt.CompareTo(_.col06_) > 0);
			if (col06__gt != null) predicate = predicate.And(_ => col06__gt.CompareTo(_.col06_) < 0);
			if (col06__le != null) predicate = predicate.And(_ => col06__le.CompareTo(_.col06_) >= 0);
			if (col06__ge != null) predicate = predicate.And(_ => col06__ge.CompareTo(_.col06_) <= 0);
			if (col06__in != null) predicate = predicate.And(_ => col06__in.Contains(_.col06_));
			if (col06__ni != null) predicate = predicate.And(_ => !col06__ni.Contains(_.col06_));
			if (col06__isnull) predicate = predicate.And(_ => _.col06_ == null);
			if (col06__isnotnull) predicate = predicate.And(_ => _.col06_ != null);
			#endregion
			#region col07
			if (col07_eq != null) predicate = predicate.And(_ => _.col07 == col07_eq);
			if (col07_ne != null) predicate = predicate.And(_ => _.col07 != col07_ne);
			if (col07_lt != null) predicate = predicate.And(_ => col07_lt.CompareTo(_.col07) > 0);
			if (col07_gt != null) predicate = predicate.And(_ => col07_gt.CompareTo(_.col07) < 0);
			if (col07_le != null) predicate = predicate.And(_ => col07_le.CompareTo(_.col07) >= 0);
			if (col07_ge != null) predicate = predicate.And(_ => col07_ge.CompareTo(_.col07) <= 0);
			if (col07_in != null) predicate = predicate.And(_ => col07_in.Contains(_.col07));
			if (col07_ni != null) predicate = predicate.And(_ => !col07_ni.Contains(_.col07));
			#endregion
			#region col07_
			if (col07__eq != null) predicate = predicate.And(_ => _.col07_ == col07__eq);
			if (col07__ne != null) predicate = predicate.And(_ => _.col07_ != col07__ne);
			if (col07__lt != null) predicate = predicate.And(_ => col07__lt.CompareTo(_.col07_) > 0);
			if (col07__gt != null) predicate = predicate.And(_ => col07__gt.CompareTo(_.col07_) < 0);
			if (col07__le != null) predicate = predicate.And(_ => col07__le.CompareTo(_.col07_) >= 0);
			if (col07__ge != null) predicate = predicate.And(_ => col07__ge.CompareTo(_.col07_) <= 0);
			if (col07__in != null) predicate = predicate.And(_ => col07__in.Contains(_.col07_));
			if (col07__ni != null) predicate = predicate.And(_ => !col07__ni.Contains(_.col07_));
			if (col07__isnull) predicate = predicate.And(_ => _.col07_ == null);
			if (col07__isnotnull) predicate = predicate.And(_ => _.col07_ != null);
			#endregion
			#region col08
			if (col08_eq != null) predicate = predicate.And(_ => _.col08 == col08_eq);
			if (col08_ne != null) predicate = predicate.And(_ => _.col08 != col08_ne);
			if (col08_lt != null) predicate = predicate.And(_ => col08_lt.CompareTo(_.col08) > 0);
			if (col08_gt != null) predicate = predicate.And(_ => col08_gt.CompareTo(_.col08) < 0);
			if (col08_le != null) predicate = predicate.And(_ => col08_le.CompareTo(_.col08) >= 0);
			if (col08_ge != null) predicate = predicate.And(_ => col08_ge.CompareTo(_.col08) <= 0);
			if (col08_in != null) predicate = predicate.And(_ => col08_in.Contains(_.col08));
			if (col08_ni != null) predicate = predicate.And(_ => !col08_ni.Contains(_.col08));
			#endregion
			#region col08_
			if (col08__eq != null) predicate = predicate.And(_ => _.col08_ == col08__eq);
			if (col08__ne != null) predicate = predicate.And(_ => _.col08_ != col08__ne);
			if (col08__lt != null) predicate = predicate.And(_ => col08__lt.CompareTo(_.col08_) > 0);
			if (col08__gt != null) predicate = predicate.And(_ => col08__gt.CompareTo(_.col08_) < 0);
			if (col08__le != null) predicate = predicate.And(_ => col08__le.CompareTo(_.col08_) >= 0);
			if (col08__ge != null) predicate = predicate.And(_ => col08__ge.CompareTo(_.col08_) <= 0);
			if (col08__in != null) predicate = predicate.And(_ => col08__in.Contains(_.col08_));
			if (col08__ni != null) predicate = predicate.And(_ => !col08__ni.Contains(_.col08_));
			if (col08__isnull) predicate = predicate.And(_ => _.col08_ == null);
			if (col08__isnotnull) predicate = predicate.And(_ => _.col08_ != null);
			#endregion
			#region col09
			if (col09_eq != null) predicate = predicate.And(_ => _.col09 == col09_eq);
			if (col09_ne != null) predicate = predicate.And(_ => _.col09 != col09_ne);
			#endregion
			#region col09_
			if (col09__eq != null) predicate = predicate.And(_ => _.col09_ == col09__eq);
			if (col09__ne != null) predicate = predicate.And(_ => _.col09_ != col09__ne);
			if (col09__isnull) predicate = predicate.And(_ => _.col09_ == null);
			if (col09__isnotnull) predicate = predicate.And(_ => _.col09_ != null);
			#endregion
			#region col10
			if (col10_eq != null) predicate = predicate.And(_ => _.col10 == col10_eq);
			if (col10_ne != null) predicate = predicate.And(_ => _.col10 != col10_ne);
			#endregion
			#region col10_
			if (col10__eq != null) predicate = predicate.And(_ => _.col10_ == col10__eq);
			if (col10__ne != null) predicate = predicate.And(_ => _.col10_ != col10__ne);
			if (col10__isnull) predicate = predicate.And(_ => _.col10_ == null);
			if (col10__isnotnull) predicate = predicate.And(_ => _.col10_ != null);
			#endregion
			#region col11
			if (col11_eq != null) predicate = predicate.And(_ => _.col11 == col11_eq);
			if (col11_ne != null) predicate = predicate.And(_ => _.col11 != col11_ne);
			#endregion
			#region col11_
			if (col11__eq != null) predicate = predicate.And(_ => _.col11_ == col11__eq);
			if (col11__ne != null) predicate = predicate.And(_ => _.col11_ != col11__ne);
			if (col11__isnull) predicate = predicate.And(_ => _.col11_ == null);
			if (col11__isnotnull) predicate = predicate.And(_ => _.col11_ != null);
			#endregion
			#region col12
			if (col12_eq != null) predicate = predicate.And(_ => _.col12 == col12_eq);
			if (col12_ne != null) predicate = predicate.And(_ => _.col12 != col12_ne);
			#endregion
			#region col12_
			if (col12__eq != null) predicate = predicate.And(_ => _.col12_ == col12__eq);
			if (col12__ne != null) predicate = predicate.And(_ => _.col12_ != col12__ne);
			if (col12__isnull) predicate = predicate.And(_ => _.col12_ == null);
			if (col12__isnotnull) predicate = predicate.And(_ => _.col12_ != null);
			#endregion
			#region col13
			if (col13_eq != null) predicate = predicate.And(_ => _.col13 == col13_eq);
			if (col13_ne != null) predicate = predicate.And(_ => _.col13 != col13_ne);
			#endregion
			#region col13_
			if (col13__eq != null) predicate = predicate.And(_ => _.col13_ == col13__eq);
			if (col13__ne != null) predicate = predicate.And(_ => _.col13_ != col13__ne);
			if (col13__isnull) predicate = predicate.And(_ => _.col13_ == null);
			if (col13__isnotnull) predicate = predicate.And(_ => _.col13_ != null);
			#endregion
			#region col14
			if (col14_eq != null) predicate = predicate.And(_ => _.col14 == col14_eq);
			if (col14_ne != null) predicate = predicate.And(_ => _.col14 != col14_ne);
			if (col14_lt != null) predicate = predicate.And(_ => _.col14 < col14_lt);
			if (col14_gt != null) predicate = predicate.And(_ => _.col14 > col14_gt);
			if (col14_le != null) predicate = predicate.And(_ => _.col14 <= col14_le);
			if (col14_ge != null) predicate = predicate.And(_ => _.col14 >= col14_ge);
			if (col14_in != null) predicate = predicate.And(_ => col14_in.Contains(_.col14));
			if (col14_ni != null) predicate = predicate.And(_ => !col14_ni.Contains(_.col14));
			#endregion
			#region col14_
			if (col14__eq != null) predicate = predicate.And(_ => _.col14_ == col14__eq);
			if (col14__ne != null) predicate = predicate.And(_ => _.col14_ != col14__ne);
			if (col14__lt != null) predicate = predicate.And(_ => _.col14_ < col14__lt);
			if (col14__gt != null) predicate = predicate.And(_ => _.col14_ > col14__gt);
			if (col14__le != null) predicate = predicate.And(_ => _.col14_ <= col14__le);
			if (col14__ge != null) predicate = predicate.And(_ => _.col14_ >= col14__ge);
			if (col14__in != null) predicate = predicate.And(_ => col14__in.Contains(_.col14_.Value));
			if (col14__ni != null) predicate = predicate.And(_ => !col14__ni.Contains(_.col14_.Value));
			if (col14__isnull) predicate = predicate.And(_ => _.col14_ == null);
			if (col14__isnotnull) predicate = predicate.And(_ => _.col14_ != null);
			#endregion
			#region col15
			if (col15_eq != null) predicate = predicate.And(_ => _.col15 == col15_eq);
			if (col15_ne != null) predicate = predicate.And(_ => _.col15 != col15_ne);
			if (col15_lt != null) predicate = predicate.And(_ => _.col15 < col15_lt);
			if (col15_gt != null) predicate = predicate.And(_ => _.col15 > col15_gt);
			if (col15_le != null) predicate = predicate.And(_ => _.col15 <= col15_le);
			if (col15_ge != null) predicate = predicate.And(_ => _.col15 >= col15_ge);
			if (col15_in != null) predicate = predicate.And(_ => col15_in.Contains(_.col15));
			if (col15_ni != null) predicate = predicate.And(_ => !col15_ni.Contains(_.col15));
			#endregion
			#region col15_
			if (col15__eq != null) predicate = predicate.And(_ => _.col15_ == col15__eq);
			if (col15__ne != null) predicate = predicate.And(_ => _.col15_ != col15__ne);
			if (col15__lt != null) predicate = predicate.And(_ => _.col15_ < col15__lt);
			if (col15__gt != null) predicate = predicate.And(_ => _.col15_ > col15__gt);
			if (col15__le != null) predicate = predicate.And(_ => _.col15_ <= col15__le);
			if (col15__ge != null) predicate = predicate.And(_ => _.col15_ >= col15__ge);
			if (col15__in != null) predicate = predicate.And(_ => col15__in.Contains(_.col15_.Value));
			if (col15__ni != null) predicate = predicate.And(_ => !col15__ni.Contains(_.col15_.Value));
			if (col15__isnull) predicate = predicate.And(_ => _.col15_ == null);
			if (col15__isnotnull) predicate = predicate.And(_ => _.col15_ != null);
			#endregion
			#region col16
			if (col16_eq != null) predicate = predicate.And(_ => _.col16 == col16_eq);
			if (col16_ne != null) predicate = predicate.And(_ => _.col16 != col16_ne);
			if (col16_lt != null) predicate = predicate.And(_ => _.col16 < col16_lt);
			if (col16_gt != null) predicate = predicate.And(_ => _.col16 > col16_gt);
			if (col16_le != null) predicate = predicate.And(_ => _.col16 <= col16_le);
			if (col16_ge != null) predicate = predicate.And(_ => _.col16 >= col16_ge);
			if (col16_in != null) predicate = predicate.And(_ => col16_in.Contains(_.col16));
			if (col16_ni != null) predicate = predicate.And(_ => !col16_ni.Contains(_.col16));
			#endregion
			#region col16_
			if (col16__eq != null) predicate = predicate.And(_ => _.col16_ == col16__eq);
			if (col16__ne != null) predicate = predicate.And(_ => _.col16_ != col16__ne);
			if (col16__lt != null) predicate = predicate.And(_ => _.col16_ < col16__lt);
			if (col16__gt != null) predicate = predicate.And(_ => _.col16_ > col16__gt);
			if (col16__le != null) predicate = predicate.And(_ => _.col16_ <= col16__le);
			if (col16__ge != null) predicate = predicate.And(_ => _.col16_ >= col16__ge);
			if (col16__in != null) predicate = predicate.And(_ => col16__in.Contains(_.col16_.Value));
			if (col16__ni != null) predicate = predicate.And(_ => !col16__ni.Contains(_.col16_.Value));
			if (col16__isnull) predicate = predicate.And(_ => _.col16_ == null);
			if (col16__isnotnull) predicate = predicate.And(_ => _.col16_ != null);
			#endregion
			#region col17
			if (col17_eq != null) predicate = predicate.And(_ => _.col17 == col17_eq);
			if (col17_ne != null) predicate = predicate.And(_ => _.col17 != col17_ne);
			#endregion
			#region col17_
			if (col17__eq != null) predicate = predicate.And(_ => _.col17_ == col17__eq);
			if (col17__ne != null) predicate = predicate.And(_ => _.col17_ != col17__ne);
			if (col17__isnull) predicate = predicate.And(_ => _.col17_ == null);
			if (col17__isnotnull) predicate = predicate.And(_ => _.col17_ != null);
			#endregion
			#region col18
			if (col18_eq != null) predicate = predicate.And(_ => _.col18 == col18_eq);
			if (col18_ne != null) predicate = predicate.And(_ => _.col18 != col18_ne);
			if (col18_lt != null) predicate = predicate.And(_ => _.col18 < col18_lt);
			if (col18_gt != null) predicate = predicate.And(_ => _.col18 > col18_gt);
			if (col18_le != null) predicate = predicate.And(_ => _.col18 <= col18_le);
			if (col18_ge != null) predicate = predicate.And(_ => _.col18 >= col18_ge);
			if (col18_in != null) predicate = predicate.And(_ => col18_in.Contains(_.col18));
			if (col18_ni != null) predicate = predicate.And(_ => !col18_ni.Contains(_.col18));
			#endregion
			#region col18_
			if (col18__eq != null) predicate = predicate.And(_ => _.col18_ == col18__eq);
			if (col18__ne != null) predicate = predicate.And(_ => _.col18_ != col18__ne);
			if (col18__lt != null) predicate = predicate.And(_ => _.col18_ < col18__lt);
			if (col18__gt != null) predicate = predicate.And(_ => _.col18_ > col18__gt);
			if (col18__le != null) predicate = predicate.And(_ => _.col18_ <= col18__le);
			if (col18__ge != null) predicate = predicate.And(_ => _.col18_ >= col18__ge);
			if (col18__in != null) predicate = predicate.And(_ => col18__in.Contains(_.col18_.Value));
			if (col18__ni != null) predicate = predicate.And(_ => !col18__ni.Contains(_.col18_.Value));
			if (col18__isnull) predicate = predicate.And(_ => _.col18_ == null);
			if (col18__isnotnull) predicate = predicate.And(_ => _.col18_ != null);
			#endregion
			#region col19
			if (col19_eq != null) predicate = predicate.And(_ => _.col19 == col19_eq);
			if (col19_ne != null) predicate = predicate.And(_ => _.col19 != col19_ne);
			if (col19_lt != null) predicate = predicate.And(_ => _.col19 < col19_lt);
			if (col19_gt != null) predicate = predicate.And(_ => _.col19 > col19_gt);
			if (col19_le != null) predicate = predicate.And(_ => _.col19 <= col19_le);
			if (col19_ge != null) predicate = predicate.And(_ => _.col19 >= col19_ge);
			if (col19_in != null) predicate = predicate.And(_ => col19_in.Contains(_.col19));
			if (col19_ni != null) predicate = predicate.And(_ => !col19_ni.Contains(_.col19));
			#endregion
			#region col19_
			if (col19__eq != null) predicate = predicate.And(_ => _.col19_ == col19__eq);
			if (col19__ne != null) predicate = predicate.And(_ => _.col19_ != col19__ne);
			if (col19__lt != null) predicate = predicate.And(_ => _.col19_ < col19__lt);
			if (col19__gt != null) predicate = predicate.And(_ => _.col19_ > col19__gt);
			if (col19__le != null) predicate = predicate.And(_ => _.col19_ <= col19__le);
			if (col19__ge != null) predicate = predicate.And(_ => _.col19_ >= col19__ge);
			if (col19__in != null) predicate = predicate.And(_ => col19__in.Contains(_.col19_.Value));
			if (col19__ni != null) predicate = predicate.And(_ => !col19__ni.Contains(_.col19_.Value));
			if (col19__isnull) predicate = predicate.And(_ => _.col19_ == null);
			if (col19__isnotnull) predicate = predicate.And(_ => _.col19_ != null);
			#endregion
			#region col20
			if (col20_eq != null) predicate = predicate.And(_ => _.col20 == col20_eq);
			if (col20_ne != null) predicate = predicate.And(_ => _.col20 != col20_ne);
			if (col20_lt != null) predicate = predicate.And(_ => _.col20 < col20_lt);
			if (col20_gt != null) predicate = predicate.And(_ => _.col20 > col20_gt);
			if (col20_le != null) predicate = predicate.And(_ => _.col20 <= col20_le);
			if (col20_ge != null) predicate = predicate.And(_ => _.col20 >= col20_ge);
			if (col20_in != null) predicate = predicate.And(_ => col20_in.Contains(_.col20));
			if (col20_ni != null) predicate = predicate.And(_ => !col20_ni.Contains(_.col20));
			#endregion
			#region col20_
			if (col20__eq != null) predicate = predicate.And(_ => _.col20_ == col20__eq);
			if (col20__ne != null) predicate = predicate.And(_ => _.col20_ != col20__ne);
			if (col20__lt != null) predicate = predicate.And(_ => _.col20_ < col20__lt);
			if (col20__gt != null) predicate = predicate.And(_ => _.col20_ > col20__gt);
			if (col20__le != null) predicate = predicate.And(_ => _.col20_ <= col20__le);
			if (col20__ge != null) predicate = predicate.And(_ => _.col20_ >= col20__ge);
			if (col20__in != null) predicate = predicate.And(_ => col20__in.Contains(_.col20_.Value));
			if (col20__ni != null) predicate = predicate.And(_ => !col20__ni.Contains(_.col20_.Value));
			if (col20__isnull) predicate = predicate.And(_ => _.col20_ == null);
			if (col20__isnotnull) predicate = predicate.And(_ => _.col20_ != null);
			#endregion
			#region col21
			if (col21_eq != null) predicate = predicate.And(_ => _.col21 == col21_eq);
			if (col21_ne != null) predicate = predicate.And(_ => _.col21 != col21_ne);
			if (col21_lt != null) predicate = predicate.And(_ => _.col21 < col21_lt);
			if (col21_gt != null) predicate = predicate.And(_ => _.col21 > col21_gt);
			if (col21_le != null) predicate = predicate.And(_ => _.col21 <= col21_le);
			if (col21_ge != null) predicate = predicate.And(_ => _.col21 >= col21_ge);
			if (col21_in != null) predicate = predicate.And(_ => col21_in.Contains(_.col21));
			if (col21_ni != null) predicate = predicate.And(_ => !col21_ni.Contains(_.col21));
			#endregion
			#region col21_
			if (col21__eq != null) predicate = predicate.And(_ => _.col21_ == col21__eq);
			if (col21__ne != null) predicate = predicate.And(_ => _.col21_ != col21__ne);
			if (col21__lt != null) predicate = predicate.And(_ => _.col21_ < col21__lt);
			if (col21__gt != null) predicate = predicate.And(_ => _.col21_ > col21__gt);
			if (col21__le != null) predicate = predicate.And(_ => _.col21_ <= col21__le);
			if (col21__ge != null) predicate = predicate.And(_ => _.col21_ >= col21__ge);
			if (col21__in != null) predicate = predicate.And(_ => col21__in.Contains(_.col21_.Value));
			if (col21__ni != null) predicate = predicate.And(_ => !col21__ni.Contains(_.col21_.Value));
			if (col21__isnull) predicate = predicate.And(_ => _.col21_ == null);
			if (col21__isnotnull) predicate = predicate.And(_ => _.col21_ != null);
			#endregion
			#region col22
			if (col22_eq != null) predicate = predicate.And(_ => _.col22 == col22_eq);
			if (col22_ne != null) predicate = predicate.And(_ => _.col22 != col22_ne);
			if (col22_lt != null) predicate = predicate.And(_ => _.col22 < col22_lt);
			if (col22_gt != null) predicate = predicate.And(_ => _.col22 > col22_gt);
			if (col22_le != null) predicate = predicate.And(_ => _.col22 <= col22_le);
			if (col22_ge != null) predicate = predicate.And(_ => _.col22 >= col22_ge);
			if (col22_in != null) predicate = predicate.And(_ => col22_in.Contains(_.col22));
			if (col22_ni != null) predicate = predicate.And(_ => !col22_ni.Contains(_.col22));
			#endregion
			#region col22_
			if (col22__eq != null) predicate = predicate.And(_ => _.col22_ == col22__eq);
			if (col22__ne != null) predicate = predicate.And(_ => _.col22_ != col22__ne);
			if (col22__lt != null) predicate = predicate.And(_ => _.col22_ < col22__lt);
			if (col22__gt != null) predicate = predicate.And(_ => _.col22_ > col22__gt);
			if (col22__le != null) predicate = predicate.And(_ => _.col22_ <= col22__le);
			if (col22__ge != null) predicate = predicate.And(_ => _.col22_ >= col22__ge);
			if (col22__in != null) predicate = predicate.And(_ => col22__in.Contains(_.col22_.Value));
			if (col22__ni != null) predicate = predicate.And(_ => !col22__ni.Contains(_.col22_.Value));
			if (col22__isnull) predicate = predicate.And(_ => _.col22_ == null);
			if (col22__isnotnull) predicate = predicate.And(_ => _.col22_ != null);
			#endregion
			#region col23
			if (col23_eq != null) predicate = predicate.And(_ => _.col23 == col23_eq);
			if (col23_ne != null) predicate = predicate.And(_ => _.col23 != col23_ne);
			if (col23_lt != null) predicate = predicate.And(_ => _.col23 < col23_lt);
			if (col23_gt != null) predicate = predicate.And(_ => _.col23 > col23_gt);
			if (col23_le != null) predicate = predicate.And(_ => _.col23 <= col23_le);
			if (col23_ge != null) predicate = predicate.And(_ => _.col23 >= col23_ge);
			if (col23_in != null) predicate = predicate.And(_ => col23_in.Contains(_.col23));
			if (col23_ni != null) predicate = predicate.And(_ => !col23_ni.Contains(_.col23));
			#endregion
			#region col23_
			if (col23__eq != null) predicate = predicate.And(_ => _.col23_ == col23__eq);
			if (col23__ne != null) predicate = predicate.And(_ => _.col23_ != col23__ne);
			if (col23__lt != null) predicate = predicate.And(_ => _.col23_ < col23__lt);
			if (col23__gt != null) predicate = predicate.And(_ => _.col23_ > col23__gt);
			if (col23__le != null) predicate = predicate.And(_ => _.col23_ <= col23__le);
			if (col23__ge != null) predicate = predicate.And(_ => _.col23_ >= col23__ge);
			if (col23__in != null) predicate = predicate.And(_ => col23__in.Contains(_.col23_.Value));
			if (col23__ni != null) predicate = predicate.And(_ => !col23__ni.Contains(_.col23_.Value));
			if (col23__isnull) predicate = predicate.And(_ => _.col23_ == null);
			if (col23__isnotnull) predicate = predicate.And(_ => _.col23_ != null);
			#endregion
			#region col24
			if (col24_eq != null) predicate = predicate.And(_ => _.col24 == col24_eq);
			if (col24_ne != null) predicate = predicate.And(_ => _.col24 != col24_ne);
			if (col24_lt != null) predicate = predicate.And(_ => _.col24 < col24_lt);
			if (col24_gt != null) predicate = predicate.And(_ => _.col24 > col24_gt);
			if (col24_le != null) predicate = predicate.And(_ => _.col24 <= col24_le);
			if (col24_ge != null) predicate = predicate.And(_ => _.col24 >= col24_ge);
			if (col24_in != null) predicate = predicate.And(_ => col24_in.Contains(_.col24));
			if (col24_ni != null) predicate = predicate.And(_ => !col24_ni.Contains(_.col24));
			#endregion
			#region col24_
			if (col24__eq != null) predicate = predicate.And(_ => _.col24_ == col24__eq);
			if (col24__ne != null) predicate = predicate.And(_ => _.col24_ != col24__ne);
			if (col24__lt != null) predicate = predicate.And(_ => _.col24_ < col24__lt);
			if (col24__gt != null) predicate = predicate.And(_ => _.col24_ > col24__gt);
			if (col24__le != null) predicate = predicate.And(_ => _.col24_ <= col24__le);
			if (col24__ge != null) predicate = predicate.And(_ => _.col24_ >= col24__ge);
			if (col24__in != null) predicate = predicate.And(_ => col24__in.Contains(_.col24_.Value));
			if (col24__ni != null) predicate = predicate.And(_ => !col24__ni.Contains(_.col24_.Value));
			if (col24__isnull) predicate = predicate.And(_ => _.col24_ == null);
			if (col24__isnotnull) predicate = predicate.And(_ => _.col24_ != null);
			#endregion
			#region col25
			if (col25_eq != null) predicate = predicate.And(_ => _.col25 == col25_eq);
			if (col25_ne != null) predicate = predicate.And(_ => _.col25 != col25_ne);
			if (col25_lt != null) predicate = predicate.And(_ => _.col25 < col25_lt);
			if (col25_gt != null) predicate = predicate.And(_ => _.col25 > col25_gt);
			if (col25_le != null) predicate = predicate.And(_ => _.col25 <= col25_le);
			if (col25_ge != null) predicate = predicate.And(_ => _.col25 >= col25_ge);
			if (col25_in != null) predicate = predicate.And(_ => col25_in.Contains(_.col25));
			if (col25_ni != null) predicate = predicate.And(_ => !col25_ni.Contains(_.col25));
			#endregion
			#region col25_
			if (col25__eq != null) predicate = predicate.And(_ => _.col25_ == col25__eq);
			if (col25__ne != null) predicate = predicate.And(_ => _.col25_ != col25__ne);
			if (col25__lt != null) predicate = predicate.And(_ => _.col25_ < col25__lt);
			if (col25__gt != null) predicate = predicate.And(_ => _.col25_ > col25__gt);
			if (col25__le != null) predicate = predicate.And(_ => _.col25_ <= col25__le);
			if (col25__ge != null) predicate = predicate.And(_ => _.col25_ >= col25__ge);
			if (col25__in != null) predicate = predicate.And(_ => col25__in.Contains(_.col25_.Value));
			if (col25__ni != null) predicate = predicate.And(_ => !col25__ni.Contains(_.col25_.Value));
			if (col25__isnull) predicate = predicate.And(_ => _.col25_ == null);
			if (col25__isnotnull) predicate = predicate.And(_ => _.col25_ != null);
			#endregion
			#region col26
			if (col26_eq != null) predicate = predicate.And(_ => _.col26 == col26_eq);
			if (col26_ne != null) predicate = predicate.And(_ => _.col26 != col26_ne);
			if (col26_lt != null) predicate = predicate.And(_ => _.col26 < col26_lt);
			if (col26_gt != null) predicate = predicate.And(_ => _.col26 > col26_gt);
			if (col26_le != null) predicate = predicate.And(_ => _.col26 <= col26_le);
			if (col26_ge != null) predicate = predicate.And(_ => _.col26 >= col26_ge);
			if (col26_in != null) predicate = predicate.And(_ => col26_in.Contains(_.col26));
			if (col26_ni != null) predicate = predicate.And(_ => !col26_ni.Contains(_.col26));
			#endregion
			#region col26_
			if (col26__eq != null) predicate = predicate.And(_ => _.col26_ == col26__eq);
			if (col26__ne != null) predicate = predicate.And(_ => _.col26_ != col26__ne);
			if (col26__lt != null) predicate = predicate.And(_ => _.col26_ < col26__lt);
			if (col26__gt != null) predicate = predicate.And(_ => _.col26_ > col26__gt);
			if (col26__le != null) predicate = predicate.And(_ => _.col26_ <= col26__le);
			if (col26__ge != null) predicate = predicate.And(_ => _.col26_ >= col26__ge);
			if (col26__in != null) predicate = predicate.And(_ => col26__in.Contains(_.col26_.Value));
			if (col26__ni != null) predicate = predicate.And(_ => !col26__ni.Contains(_.col26_.Value));
			if (col26__isnull) predicate = predicate.And(_ => _.col26_ == null);
			if (col26__isnotnull) predicate = predicate.And(_ => _.col26_ != null);
			#endregion
			#region col27
			if (col27_eq != null) predicate = predicate.And(_ => _.col27 == col27_eq);
			if (col27_ne != null) predicate = predicate.And(_ => _.col27 != col27_ne);
			if (col27_lt != null) predicate = predicate.And(_ => _.col27 < col27_lt);
			if (col27_gt != null) predicate = predicate.And(_ => _.col27 > col27_gt);
			if (col27_le != null) predicate = predicate.And(_ => _.col27 <= col27_le);
			if (col27_ge != null) predicate = predicate.And(_ => _.col27 >= col27_ge);
			if (col27_in != null) predicate = predicate.And(_ => col27_in.Contains(_.col27));
			if (col27_ni != null) predicate = predicate.And(_ => !col27_ni.Contains(_.col27));
			#endregion
			#region col27_
			if (col27__eq != null) predicate = predicate.And(_ => _.col27_ == col27__eq);
			if (col27__ne != null) predicate = predicate.And(_ => _.col27_ != col27__ne);
			if (col27__lt != null) predicate = predicate.And(_ => _.col27_ < col27__lt);
			if (col27__gt != null) predicate = predicate.And(_ => _.col27_ > col27__gt);
			if (col27__le != null) predicate = predicate.And(_ => _.col27_ <= col27__le);
			if (col27__ge != null) predicate = predicate.And(_ => _.col27_ >= col27__ge);
			if (col27__in != null) predicate = predicate.And(_ => col27__in.Contains(_.col27_.Value));
			if (col27__ni != null) predicate = predicate.And(_ => !col27__ni.Contains(_.col27_.Value));
			if (col27__isnull) predicate = predicate.And(_ => _.col27_ == null);
			if (col27__isnotnull) predicate = predicate.And(_ => _.col27_ != null);
			#endregion
			#region col28
			if (col28_eq != null) predicate = predicate.And(_ => _.col28 == col28_eq);
			if (col28_ne != null) predicate = predicate.And(_ => _.col28 != col28_ne);
			if (col28_lt != null) predicate = predicate.And(_ => _.col28 < col28_lt);
			if (col28_gt != null) predicate = predicate.And(_ => _.col28 > col28_gt);
			if (col28_le != null) predicate = predicate.And(_ => _.col28 <= col28_le);
			if (col28_ge != null) predicate = predicate.And(_ => _.col28 >= col28_ge);
			if (col28_in != null) predicate = predicate.And(_ => col28_in.Contains(_.col28));
			if (col28_ni != null) predicate = predicate.And(_ => !col28_ni.Contains(_.col28));
			#endregion
			#region col28_
			if (col28__eq != null) predicate = predicate.And(_ => _.col28_ == col28__eq);
			if (col28__ne != null) predicate = predicate.And(_ => _.col28_ != col28__ne);
			if (col28__lt != null) predicate = predicate.And(_ => _.col28_ < col28__lt);
			if (col28__gt != null) predicate = predicate.And(_ => _.col28_ > col28__gt);
			if (col28__le != null) predicate = predicate.And(_ => _.col28_ <= col28__le);
			if (col28__ge != null) predicate = predicate.And(_ => _.col28_ >= col28__ge);
			if (col28__in != null) predicate = predicate.And(_ => col28__in.Contains(_.col28_.Value));
			if (col28__ni != null) predicate = predicate.And(_ => !col28__ni.Contains(_.col28_.Value));
			if (col28__isnull) predicate = predicate.And(_ => _.col28_ == null);
			if (col28__isnotnull) predicate = predicate.And(_ => _.col28_ != null);
			#endregion
			#region col29
			if (col29_eq != null) predicate = predicate.And(_ => _.col29 == col29_eq);
			if (col29_ne != null) predicate = predicate.And(_ => _.col29 != col29_ne);
			#endregion

			return predicate;
		}
		#endregion
	}
	#endregion
	#endregion
	#region ロールマスタ
	/// <summary>
	/// ロールマスタ
	/// </summary>
	[Table(Schema="Core", Name="Role"), DataContract]
	public partial class Role : TableBase<Role>, INotifyPropertyChanged
	{
		#region uid : int

		private int _uid;
		/// <summary>
		/// ユニークID
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull, Identity]
		public  int  uid
		{
			get { return _uid; }
			set
			{
				if (_uid != value)
				{
					BeforeuidChanged(value);
					_uid = value;
					AfteruidChanged();

					OnuidChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeuidChanged(int newValue);
		partial void AfteruidChanged();

		public const string NameOfuid = "uid";

		private static readonly PropertyChangedEventArgs _uidChangedEventArgs = new PropertyChangedEventArgs(NameOfuid);

		private void OnuidChanged()
		{
			OnPropertyChanged(_uidChangedEventArgs);
		}

		#endregion

		#endregion
		#region role_id : string

		private string _role_id;
		/// <summary>
		/// ロールID
		/// </summary>
		[Column(DbType="varchar(16)", DataType=DataType.VarChar, Length=16), DataMember, NotNull, PrimaryKey(Order = 1), System.ComponentModel.DataAnnotations.Required]
		public  string  role_id
		{
			get { return _role_id; }
			set
			{
				if (_role_id != value)
				{
					Beforerole_idChanged(value);
					_role_id = value;
					Afterrole_idChanged();

					Onrole_idChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforerole_idChanged(string newValue);
		partial void Afterrole_idChanged();

		public const string NameOfrole_id = "role_id";

		private static readonly PropertyChangedEventArgs _role_idChangedEventArgs = new PropertyChangedEventArgs(NameOfrole_id);

		private void Onrole_idChanged()
		{
			OnPropertyChanged(_role_idChangedEventArgs);
		}

		#endregion

		#endregion
		#region name : string

		private string _name;
		/// <summary>
		/// 名称
		/// </summary>
		[Column(DbType="nvarchar(20)", DataType=DataType.NVarChar, Length=20), DataMember, NotNull, System.ComponentModel.DataAnnotations.Required]
		public  string  name
		{
			get { return _name; }
			set
			{
				if (_name != value)
				{
					BeforenameChanged(value);
					_name = value;
					AfternameChanged();

					OnnameChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforenameChanged(string newValue);
		partial void AfternameChanged();

		public const string NameOfname = "name";

		private static readonly PropertyChangedEventArgs _nameChangedEventArgs = new PropertyChangedEventArgs(NameOfname);

		private void OnnameChanged()
		{
			OnPropertyChanged(_nameChangedEventArgs);
		}

		#endregion

		#endregion
		#region abbrev : string

		private string _abbrev;
		/// <summary>
		/// 略称
		/// </summary>
		[Column(DbType="nvarchar(2)", DataType=DataType.NVarChar, Length=2), DataMember, NotNull]
		public  string  abbrev
		{
			get { return _abbrev; }
			set
			{
				if (_abbrev != value)
				{
					BeforeabbrevChanged(value);
					_abbrev = value;
					AfterabbrevChanged();

					OnabbrevChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeabbrevChanged(string newValue);
		partial void AfterabbrevChanged();

		public const string NameOfabbrev = "abbrev";

		private static readonly PropertyChangedEventArgs _abbrevChangedEventArgs = new PropertyChangedEventArgs(NameOfabbrev);

		private void OnabbrevChanged()
		{
			OnPropertyChanged(_abbrevChangedEventArgs);
		}

		#endregion

		#endregion
		#region name_en : string

		private string _name_en;
		/// <summary>
		/// 英字名称
		/// </summary>
		[Column(DbType="varchar(20)", DataType=DataType.VarChar, Length=20), DataMember, NotNull]
		public  string  name_en
		{
			get { return _name_en; }
			set
			{
				if (_name_en != value)
				{
					Beforename_enChanged(value);
					_name_en = value;
					Aftername_enChanged();

					Onname_enChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforename_enChanged(string newValue);
		partial void Aftername_enChanged();

		public const string NameOfname_en = "name_en";

		private static readonly PropertyChangedEventArgs _name_enChangedEventArgs = new PropertyChangedEventArgs(NameOfname_en);

		private void Onname_enChanged()
		{
			OnPropertyChanged(_name_enChangedEventArgs);
		}

		#endregion

		#endregion
		#region abbrev_en : string

		private string _abbrev_en;
		/// <summary>
		/// 英字略称
		/// </summary>
		[Column(DbType="varchar(2)", DataType=DataType.VarChar, Length=2), DataMember, NotNull]
		public  string  abbrev_en
		{
			get { return _abbrev_en; }
			set
			{
				if (_abbrev_en != value)
				{
					Beforeabbrev_enChanged(value);
					_abbrev_en = value;
					Afterabbrev_enChanged();

					Onabbrev_enChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeabbrev_enChanged(string newValue);
		partial void Afterabbrev_enChanged();

		public const string NameOfabbrev_en = "abbrev_en";

		private static readonly PropertyChangedEventArgs _abbrev_enChangedEventArgs = new PropertyChangedEventArgs(NameOfabbrev_en);

		private void Onabbrev_enChanged()
		{
			OnPropertyChanged(_abbrev_enChangedEventArgs);
		}

		#endregion

		#endregion
		#region created_at : DateTime

		private DateTime _created_at;
		/// <summary>
		/// 作成日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, NotNull]
		public  DateTime  created_at
		{
			get { return _created_at; }
			set
			{
				if (_created_at != value)
				{
					Beforecreated_atChanged(value);
					_created_at = value;
					Aftercreated_atChanged();

					Oncreated_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecreated_atChanged(DateTime newValue);
		partial void Aftercreated_atChanged();

		public const string NameOfcreated_at = "created_at";

		private static readonly PropertyChangedEventArgs _created_atChangedEventArgs = new PropertyChangedEventArgs(NameOfcreated_at);

		private void Oncreated_atChanged()
		{
			OnPropertyChanged(_created_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region created_by : int?

		private int? _created_by;
		/// <summary>
		/// 作成者
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, Nullable]
		public  int?  created_by
		{
			get { return _created_by; }
			set
			{
				if (_created_by != value)
				{
					Beforecreated_byChanged(value);
					_created_by = value;
					Aftercreated_byChanged();

					Oncreated_byChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecreated_byChanged(int? newValue);
		partial void Aftercreated_byChanged();

		public const string NameOfcreated_by = "created_by";

		private static readonly PropertyChangedEventArgs _created_byChangedEventArgs = new PropertyChangedEventArgs(NameOfcreated_by);

		private void Oncreated_byChanged()
		{
			OnPropertyChanged(_created_byChangedEventArgs);
		}

		#endregion

		#endregion
		#region modified_at : DateTime

		private DateTime _modified_at;
		/// <summary>
		/// 更新日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, NotNull]
		public  DateTime  modified_at
		{
			get { return _modified_at; }
			set
			{
				if (_modified_at != value)
				{
					Beforemodified_atChanged(value);
					_modified_at = value;
					Aftermodified_atChanged();

					Onmodified_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforemodified_atChanged(DateTime newValue);
		partial void Aftermodified_atChanged();

		public const string NameOfmodified_at = "modified_at";

		private static readonly PropertyChangedEventArgs _modified_atChangedEventArgs = new PropertyChangedEventArgs(NameOfmodified_at);

		private void Onmodified_atChanged()
		{
			OnPropertyChanged(_modified_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region modified_by : int?

		private int? _modified_by;
		/// <summary>
		/// 更新者
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, Nullable]
		public  int?  modified_by
		{
			get { return _modified_by; }
			set
			{
				if (_modified_by != value)
				{
					Beforemodified_byChanged(value);
					_modified_by = value;
					Aftermodified_byChanged();

					Onmodified_byChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforemodified_byChanged(int? newValue);
		partial void Aftermodified_byChanged();

		public const string NameOfmodified_by = "modified_by";

		private static readonly PropertyChangedEventArgs _modified_byChangedEventArgs = new PropertyChangedEventArgs(NameOfmodified_by);

		private void Onmodified_byChanged()
		{
			OnPropertyChanged(_modified_byChangedEventArgs);
		}

		#endregion

		#endregion
		#region removed_at : DateTime?

		private DateTime? _removed_at;
		/// <summary>
		/// 削除日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, Nullable]
		public  DateTime?  removed_at
		{
			get { return _removed_at; }
			set
			{
				if (_removed_at != value)
				{
					Beforeremoved_atChanged(value);
					_removed_at = value;
					Afterremoved_atChanged();

					Onremoved_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeremoved_atChanged(DateTime? newValue);
		partial void Afterremoved_atChanged();

		public const string NameOfremoved_at = "removed_at";

		private static readonly PropertyChangedEventArgs _removed_atChangedEventArgs = new PropertyChangedEventArgs(NameOfremoved_at);

		private void Onremoved_atChanged()
		{
			OnPropertyChanged(_removed_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region row_version : byte[]

		private byte[] _row_version;
		/// <summary>
		/// 版
		/// </summary>
		[Column(DbType="timestamp", DataType=DataType.Timestamp, SkipOnInsert=true, SkipOnUpdate=true), DataMember, Nullable]
		public  byte[]  row_version
		{
			get { return _row_version; }
			set
			{
				if (_row_version != value)
				{
					Beforerow_versionChanged(value);
					_row_version = value;
					Afterrow_versionChanged();

					Onrow_versionChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforerow_versionChanged(byte[] newValue);
		partial void Afterrow_versionChanged();

		public const string NameOfrow_version = "row_version";

		private static readonly PropertyChangedEventArgs _row_versionChangedEventArgs = new PropertyChangedEventArgs(NameOfrow_version);

		private void Onrow_versionChanged()
		{
			OnPropertyChanged(_row_versionChangedEventArgs);
		}

		#endregion

		#endregion

		#region enum用アクセスラッパー
		#endregion

		#region Constructor

		public Role()
		{
			#region フィールド初期化
			uid = default(int);
			role_id = "";
			name = "";
			abbrev = "";
			name_en = "";
			abbrev_en = "";
			created_at = DateTime.UtcNow;
			created_by = null;
			modified_at = DateTime.UtcNow;
			modified_by = null;
			removed_at = null;
			row_version = default(byte[]);
			#endregion
		}

		#endregion

		#region Association

		#region IEnumerable<RolePermission> : role_id to RolePermission : role_id (FK_Role_RolePermission)

		private IEnumerable<RolePermission> _RolePermissionList;
		/// <summary>
		/// FK_Role_RolePermission_BackReference
		/// </summary>
		[Association(ThisKey="role_id", OtherKey="role_id", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true), DataMember]
		public  IEnumerable<RolePermission>  RolePermissionList
		{
			get { return _RolePermissionList; }
			set
			{
				if (_RolePermissionList != value)
				{
					BeforeRolePermissionListChanged(value);
					_RolePermissionList = value;
					AfterRolePermissionListChanged();

					OnRolePermissionListChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeRolePermissionListChanged(IEnumerable<RolePermission> newValue);
		partial void AfterRolePermissionListChanged ();

		public const string NameOfRolePermissionList = "RolePermissionList";

		private static readonly PropertyChangedEventArgs _RolePermissionListChangedEventArgs = new PropertyChangedEventArgs(NameOfRolePermissionList);

		private void OnRolePermissionListChanged()
		{
			OnPropertyChanged(_RolePermissionListChangedEventArgs);
		}

		#endregion

		#endregion

		#endregion

		#region INotifyPropertyChanged support

		[field : NonSerialized]
		public virtual event PropertyChangedEventHandler PropertyChanged;

		protected void OnPropertyChanged(string propertyName)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		protected void OnPropertyChanged(PropertyChangedEventArgs arg)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, arg);
			}
		}

		#endregion

	}
	#region ロールマスタ条件
	/// <summary>
	/// ロールマスタ条件
	/// </summary>
	[DataContract]
	public partial class RoleCondition : RoleConditionBase
	{
	}

	/// <summary>
	/// ロールマスタ条件ベース
	/// </summary>
	[DataContract]
	public class RoleConditionBase : ConditionBase<Role>
	{
		#region properties
		#region uid
		/// <summary>
		/// uid_eqと等しい
		/// </summary>
		[DataMember] public int? uid_eq { get; set; }
		/// <summary>
		/// uid_neと等しくない
		/// </summary>
		[DataMember] public int? uid_ne { get; set; }
		/// <summary>
		/// uid_ltより小さい
		/// </summary>
		[DataMember] public int? uid_lt { get; set; }
		/// <summary>
		/// uid_gtより大きい
		/// </summary>
		[DataMember] public int? uid_gt { get; set; }
		/// <summary>
		/// uid_le以下
		/// </summary>
		[DataMember] public int? uid_le { get; set; }
		/// <summary>
		/// uid_ge以上
		/// </summary>
		[DataMember] public int? uid_ge { get; set; }
		/// <summary>
		/// uid_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> uid_in { get; set; }
		/// <summary>
		/// uid_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> uid_ni { get; set; }
		/// <summary>
		/// uid_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? uid_between { get; set; }
		#endregion
		#region role_id
		/// <summary>
		/// role_id_eqと等しい
		/// </summary>
		[DataMember] public string role_id_eq { get; set; }
		/// <summary>
		/// role_id_neと等しくない
		/// </summary>
		[DataMember] public string role_id_ne { get; set; }
		/// <summary>
		/// role_id_ltより小さい
		/// </summary>
		[DataMember] public string role_id_lt { get; set; }
		/// <summary>
		/// role_id_gtより大きい
		/// </summary>
		[DataMember] public string role_id_gt { get; set; }
		/// <summary>
		/// role_id_le以下
		/// </summary>
		[DataMember] public string role_id_le { get; set; }
		/// <summary>
		/// role_id_ge以上
		/// </summary>
		[DataMember] public string role_id_ge { get; set; }
		/// <summary>
		/// role_id_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> role_id_in { get; set; }
		/// <summary>
		/// role_id_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> role_id_ni { get; set; }
		/// <summary>
		/// role_id_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? role_id_between { get; set; }
		/// <summary>
		/// role_id_likeと部分一致する
		/// </summary>
		[DataMember] public string role_id_like { get; set; }
		#endregion
		#region name
		/// <summary>
		/// name_eqと等しい
		/// </summary>
		[DataMember] public string name_eq { get; set; }
		/// <summary>
		/// name_neと等しくない
		/// </summary>
		[DataMember] public string name_ne { get; set; }
		/// <summary>
		/// name_ltより小さい
		/// </summary>
		[DataMember] public string name_lt { get; set; }
		/// <summary>
		/// name_gtより大きい
		/// </summary>
		[DataMember] public string name_gt { get; set; }
		/// <summary>
		/// name_le以下
		/// </summary>
		[DataMember] public string name_le { get; set; }
		/// <summary>
		/// name_ge以上
		/// </summary>
		[DataMember] public string name_ge { get; set; }
		/// <summary>
		/// name_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> name_in { get; set; }
		/// <summary>
		/// name_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> name_ni { get; set; }
		/// <summary>
		/// name_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? name_between { get; set; }
		/// <summary>
		/// name_likeと部分一致する
		/// </summary>
		[DataMember] public string name_like { get; set; }
		#endregion
		#region abbrev
		/// <summary>
		/// abbrev_eqと等しい
		/// </summary>
		[DataMember] public string abbrev_eq { get; set; }
		/// <summary>
		/// abbrev_neと等しくない
		/// </summary>
		[DataMember] public string abbrev_ne { get; set; }
		/// <summary>
		/// abbrev_ltより小さい
		/// </summary>
		[DataMember] public string abbrev_lt { get; set; }
		/// <summary>
		/// abbrev_gtより大きい
		/// </summary>
		[DataMember] public string abbrev_gt { get; set; }
		/// <summary>
		/// abbrev_le以下
		/// </summary>
		[DataMember] public string abbrev_le { get; set; }
		/// <summary>
		/// abbrev_ge以上
		/// </summary>
		[DataMember] public string abbrev_ge { get; set; }
		/// <summary>
		/// abbrev_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> abbrev_in { get; set; }
		/// <summary>
		/// abbrev_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> abbrev_ni { get; set; }
		/// <summary>
		/// abbrev_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? abbrev_between { get; set; }
		/// <summary>
		/// abbrev_likeと部分一致する
		/// </summary>
		[DataMember] public string abbrev_like { get; set; }
		#endregion
		#region name_en
		/// <summary>
		/// name_en_eqと等しい
		/// </summary>
		[DataMember] public string name_en_eq { get; set; }
		/// <summary>
		/// name_en_neと等しくない
		/// </summary>
		[DataMember] public string name_en_ne { get; set; }
		/// <summary>
		/// name_en_ltより小さい
		/// </summary>
		[DataMember] public string name_en_lt { get; set; }
		/// <summary>
		/// name_en_gtより大きい
		/// </summary>
		[DataMember] public string name_en_gt { get; set; }
		/// <summary>
		/// name_en_le以下
		/// </summary>
		[DataMember] public string name_en_le { get; set; }
		/// <summary>
		/// name_en_ge以上
		/// </summary>
		[DataMember] public string name_en_ge { get; set; }
		/// <summary>
		/// name_en_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> name_en_in { get; set; }
		/// <summary>
		/// name_en_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> name_en_ni { get; set; }
		/// <summary>
		/// name_en_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? name_en_between { get; set; }
		/// <summary>
		/// name_en_likeと部分一致する
		/// </summary>
		[DataMember] public string name_en_like { get; set; }
		#endregion
		#region abbrev_en
		/// <summary>
		/// abbrev_en_eqと等しい
		/// </summary>
		[DataMember] public string abbrev_en_eq { get; set; }
		/// <summary>
		/// abbrev_en_neと等しくない
		/// </summary>
		[DataMember] public string abbrev_en_ne { get; set; }
		/// <summary>
		/// abbrev_en_ltより小さい
		/// </summary>
		[DataMember] public string abbrev_en_lt { get; set; }
		/// <summary>
		/// abbrev_en_gtより大きい
		/// </summary>
		[DataMember] public string abbrev_en_gt { get; set; }
		/// <summary>
		/// abbrev_en_le以下
		/// </summary>
		[DataMember] public string abbrev_en_le { get; set; }
		/// <summary>
		/// abbrev_en_ge以上
		/// </summary>
		[DataMember] public string abbrev_en_ge { get; set; }
		/// <summary>
		/// abbrev_en_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> abbrev_en_in { get; set; }
		/// <summary>
		/// abbrev_en_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> abbrev_en_ni { get; set; }
		/// <summary>
		/// abbrev_en_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? abbrev_en_between { get; set; }
		/// <summary>
		/// abbrev_en_likeと部分一致する
		/// </summary>
		[DataMember] public string abbrev_en_like { get; set; }
		#endregion
		#region created_at
		/// <summary>
		/// created_at_eqと等しい
		/// </summary>
		[DataMember] public DateTime? created_at_eq { get; set; }
		/// <summary>
		/// created_at_neと等しくない
		/// </summary>
		[DataMember] public DateTime? created_at_ne { get; set; }
		/// <summary>
		/// created_at_ltより小さい
		/// </summary>
		[DataMember] public DateTime? created_at_lt { get; set; }
		/// <summary>
		/// created_at_gtより大きい
		/// </summary>
		[DataMember] public DateTime? created_at_gt { get; set; }
		/// <summary>
		/// created_at_le以下
		/// </summary>
		[DataMember] public DateTime? created_at_le { get; set; }
		/// <summary>
		/// created_at_ge以上
		/// </summary>
		[DataMember] public DateTime? created_at_ge { get; set; }
		/// <summary>
		/// created_at_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> created_at_in { get; set; }
		/// <summary>
		/// created_at_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> created_at_ni { get; set; }
		/// <summary>
		/// created_at_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? created_at_between { get; set; }
		#endregion
		#region created_by
		/// <summary>
		/// created_by_eqと等しい
		/// </summary>
		[DataMember] public int? created_by_eq { get; set; }
		/// <summary>
		/// created_by_neと等しくない
		/// </summary>
		[DataMember] public int? created_by_ne { get; set; }
		/// <summary>
		/// created_by_ltより小さい
		/// </summary>
		[DataMember] public int? created_by_lt { get; set; }
		/// <summary>
		/// created_by_gtより大きい
		/// </summary>
		[DataMember] public int? created_by_gt { get; set; }
		/// <summary>
		/// created_by_le以下
		/// </summary>
		[DataMember] public int? created_by_le { get; set; }
		/// <summary>
		/// created_by_ge以上
		/// </summary>
		[DataMember] public int? created_by_ge { get; set; }
		/// <summary>
		/// created_by_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> created_by_in { get; set; }
		/// <summary>
		/// created_by_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> created_by_ni { get; set; }
		/// <summary>
		/// created_by_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? created_by_between { get; set; }
		/// <summary>
		/// created_byがNULLか
		/// </summary>
		[DataMember] public bool created_by_isnull { get; set; } =  false ;
		/// <summary>
		/// created_byがNULLではないか
		/// </summary>
		[DataMember] public bool created_by_isnotnull { get; set; } = false;
		#endregion
		#region modified_at
		/// <summary>
		/// modified_at_eqと等しい
		/// </summary>
		[DataMember] public DateTime? modified_at_eq { get; set; }
		/// <summary>
		/// modified_at_neと等しくない
		/// </summary>
		[DataMember] public DateTime? modified_at_ne { get; set; }
		/// <summary>
		/// modified_at_ltより小さい
		/// </summary>
		[DataMember] public DateTime? modified_at_lt { get; set; }
		/// <summary>
		/// modified_at_gtより大きい
		/// </summary>
		[DataMember] public DateTime? modified_at_gt { get; set; }
		/// <summary>
		/// modified_at_le以下
		/// </summary>
		[DataMember] public DateTime? modified_at_le { get; set; }
		/// <summary>
		/// modified_at_ge以上
		/// </summary>
		[DataMember] public DateTime? modified_at_ge { get; set; }
		/// <summary>
		/// modified_at_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> modified_at_in { get; set; }
		/// <summary>
		/// modified_at_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> modified_at_ni { get; set; }
		/// <summary>
		/// modified_at_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? modified_at_between { get; set; }
		#endregion
		#region modified_by
		/// <summary>
		/// modified_by_eqと等しい
		/// </summary>
		[DataMember] public int? modified_by_eq { get; set; }
		/// <summary>
		/// modified_by_neと等しくない
		/// </summary>
		[DataMember] public int? modified_by_ne { get; set; }
		/// <summary>
		/// modified_by_ltより小さい
		/// </summary>
		[DataMember] public int? modified_by_lt { get; set; }
		/// <summary>
		/// modified_by_gtより大きい
		/// </summary>
		[DataMember] public int? modified_by_gt { get; set; }
		/// <summary>
		/// modified_by_le以下
		/// </summary>
		[DataMember] public int? modified_by_le { get; set; }
		/// <summary>
		/// modified_by_ge以上
		/// </summary>
		[DataMember] public int? modified_by_ge { get; set; }
		/// <summary>
		/// modified_by_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> modified_by_in { get; set; }
		/// <summary>
		/// modified_by_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> modified_by_ni { get; set; }
		/// <summary>
		/// modified_by_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? modified_by_between { get; set; }
		/// <summary>
		/// modified_byがNULLか
		/// </summary>
		[DataMember] public bool modified_by_isnull { get; set; } =  false ;
		/// <summary>
		/// modified_byがNULLではないか
		/// </summary>
		[DataMember] public bool modified_by_isnotnull { get; set; } = false;
		#endregion
		#region removed_at
		/// <summary>
		/// removed_at_eqと等しい
		/// </summary>
		[DataMember] public DateTime? removed_at_eq { get; set; }
		/// <summary>
		/// removed_at_neと等しくない
		/// </summary>
		[DataMember] public DateTime? removed_at_ne { get; set; }
		/// <summary>
		/// removed_at_ltより小さい
		/// </summary>
		[DataMember] public DateTime? removed_at_lt { get; set; }
		/// <summary>
		/// removed_at_gtより大きい
		/// </summary>
		[DataMember] public DateTime? removed_at_gt { get; set; }
		/// <summary>
		/// removed_at_le以下
		/// </summary>
		[DataMember] public DateTime? removed_at_le { get; set; }
		/// <summary>
		/// removed_at_ge以上
		/// </summary>
		[DataMember] public DateTime? removed_at_ge { get; set; }
		/// <summary>
		/// removed_at_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> removed_at_in { get; set; }
		/// <summary>
		/// removed_at_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> removed_at_ni { get; set; }
		/// <summary>
		/// removed_at_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? removed_at_between { get; set; }
		/// <summary>
		/// removed_atがNULLか
		/// </summary>
		[DataMember] public bool removed_at_isnull { get; set; } =  true ;
		/// <summary>
		/// removed_atがNULLではないか
		/// </summary>
		[DataMember] public bool removed_at_isnotnull { get; set; } = false;
		#endregion
		#region row_version
		/// <summary>
		/// row_version_eqと等しい
		/// </summary>
		[DataMember] public byte[] row_version_eq { get; set; }
		/// <summary>
		/// row_version_neと等しくない
		/// </summary>
		[DataMember] public byte[] row_version_ne { get; set; }
		/// <summary>
		/// row_versionがNULLか
		/// </summary>
		[DataMember] public bool row_version_isnull { get; set; } =  false ;
		/// <summary>
		/// row_versionがNULLではないか
		/// </summary>
		[DataMember] public bool row_version_isnotnull { get; set; } = false;
		#endregion
		#endregion

		#region override
		override public Expression<Func<Role, bool>> CreatePredicate()
		{
			var predicate = base.CreatePredicate();

			#region uid
			if (uid_eq != null) predicate = predicate.And(_ => _.uid == uid_eq);
			if (uid_ne != null) predicate = predicate.And(_ => _.uid != uid_ne);
			if (uid_lt != null) predicate = predicate.And(_ => _.uid < uid_lt);
			if (uid_gt != null) predicate = predicate.And(_ => _.uid > uid_gt);
			if (uid_le != null) predicate = predicate.And(_ => _.uid <= uid_le);
			if (uid_ge != null) predicate = predicate.And(_ => _.uid >= uid_ge);
			if (uid_in != null) predicate = predicate.And(_ => uid_in.Contains(_.uid));
			if (uid_ni != null) predicate = predicate.And(_ => !uid_ni.Contains(_.uid));
			#endregion
			#region role_id
			if (role_id_eq != null) predicate = predicate.And(_ => _.role_id == role_id_eq);
			if (role_id_ne != null) predicate = predicate.And(_ => _.role_id != role_id_ne);
			if (role_id_lt != null) predicate = predicate.And(_ => role_id_lt.CompareTo(_.role_id) > 0);
			if (role_id_gt != null) predicate = predicate.And(_ => role_id_gt.CompareTo(_.role_id) < 0);
			if (role_id_le != null) predicate = predicate.And(_ => role_id_le.CompareTo(_.role_id) >= 0);
			if (role_id_ge != null) predicate = predicate.And(_ => role_id_ge.CompareTo(_.role_id) <= 0);
			if (role_id_in != null) predicate = predicate.And(_ => role_id_in.Contains(_.role_id));
			if (role_id_ni != null) predicate = predicate.And(_ => !role_id_ni.Contains(_.role_id));
			#endregion
			#region name
			if (name_eq != null) predicate = predicate.And(_ => _.name == name_eq);
			if (name_ne != null) predicate = predicate.And(_ => _.name != name_ne);
			if (name_lt != null) predicate = predicate.And(_ => name_lt.CompareTo(_.name) > 0);
			if (name_gt != null) predicate = predicate.And(_ => name_gt.CompareTo(_.name) < 0);
			if (name_le != null) predicate = predicate.And(_ => name_le.CompareTo(_.name) >= 0);
			if (name_ge != null) predicate = predicate.And(_ => name_ge.CompareTo(_.name) <= 0);
			if (name_in != null) predicate = predicate.And(_ => name_in.Contains(_.name));
			if (name_ni != null) predicate = predicate.And(_ => !name_ni.Contains(_.name));
			#endregion
			#region abbrev
			if (abbrev_eq != null) predicate = predicate.And(_ => _.abbrev == abbrev_eq);
			if (abbrev_ne != null) predicate = predicate.And(_ => _.abbrev != abbrev_ne);
			if (abbrev_lt != null) predicate = predicate.And(_ => abbrev_lt.CompareTo(_.abbrev) > 0);
			if (abbrev_gt != null) predicate = predicate.And(_ => abbrev_gt.CompareTo(_.abbrev) < 0);
			if (abbrev_le != null) predicate = predicate.And(_ => abbrev_le.CompareTo(_.abbrev) >= 0);
			if (abbrev_ge != null) predicate = predicate.And(_ => abbrev_ge.CompareTo(_.abbrev) <= 0);
			if (abbrev_in != null) predicate = predicate.And(_ => abbrev_in.Contains(_.abbrev));
			if (abbrev_ni != null) predicate = predicate.And(_ => !abbrev_ni.Contains(_.abbrev));
			#endregion
			#region name_en
			if (name_en_eq != null) predicate = predicate.And(_ => _.name_en == name_en_eq);
			if (name_en_ne != null) predicate = predicate.And(_ => _.name_en != name_en_ne);
			if (name_en_lt != null) predicate = predicate.And(_ => name_en_lt.CompareTo(_.name_en) > 0);
			if (name_en_gt != null) predicate = predicate.And(_ => name_en_gt.CompareTo(_.name_en) < 0);
			if (name_en_le != null) predicate = predicate.And(_ => name_en_le.CompareTo(_.name_en) >= 0);
			if (name_en_ge != null) predicate = predicate.And(_ => name_en_ge.CompareTo(_.name_en) <= 0);
			if (name_en_in != null) predicate = predicate.And(_ => name_en_in.Contains(_.name_en));
			if (name_en_ni != null) predicate = predicate.And(_ => !name_en_ni.Contains(_.name_en));
			#endregion
			#region abbrev_en
			if (abbrev_en_eq != null) predicate = predicate.And(_ => _.abbrev_en == abbrev_en_eq);
			if (abbrev_en_ne != null) predicate = predicate.And(_ => _.abbrev_en != abbrev_en_ne);
			if (abbrev_en_lt != null) predicate = predicate.And(_ => abbrev_en_lt.CompareTo(_.abbrev_en) > 0);
			if (abbrev_en_gt != null) predicate = predicate.And(_ => abbrev_en_gt.CompareTo(_.abbrev_en) < 0);
			if (abbrev_en_le != null) predicate = predicate.And(_ => abbrev_en_le.CompareTo(_.abbrev_en) >= 0);
			if (abbrev_en_ge != null) predicate = predicate.And(_ => abbrev_en_ge.CompareTo(_.abbrev_en) <= 0);
			if (abbrev_en_in != null) predicate = predicate.And(_ => abbrev_en_in.Contains(_.abbrev_en));
			if (abbrev_en_ni != null) predicate = predicate.And(_ => !abbrev_en_ni.Contains(_.abbrev_en));
			#endregion
			#region created_at
			if (created_at_eq != null) predicate = predicate.And(_ => _.created_at == created_at_eq);
			if (created_at_ne != null) predicate = predicate.And(_ => _.created_at != created_at_ne);
			if (created_at_lt != null) predicate = predicate.And(_ => _.created_at < created_at_lt);
			if (created_at_gt != null) predicate = predicate.And(_ => _.created_at > created_at_gt);
			if (created_at_le != null) predicate = predicate.And(_ => _.created_at <= created_at_le);
			if (created_at_ge != null) predicate = predicate.And(_ => _.created_at >= created_at_ge);
			if (created_at_in != null) predicate = predicate.And(_ => created_at_in.Contains(_.created_at));
			if (created_at_ni != null) predicate = predicate.And(_ => !created_at_ni.Contains(_.created_at));
			#endregion
			#region created_by
			if (created_by_eq != null) predicate = predicate.And(_ => _.created_by == created_by_eq);
			if (created_by_ne != null) predicate = predicate.And(_ => _.created_by != created_by_ne);
			if (created_by_lt != null) predicate = predicate.And(_ => _.created_by < created_by_lt);
			if (created_by_gt != null) predicate = predicate.And(_ => _.created_by > created_by_gt);
			if (created_by_le != null) predicate = predicate.And(_ => _.created_by <= created_by_le);
			if (created_by_ge != null) predicate = predicate.And(_ => _.created_by >= created_by_ge);
			if (created_by_in != null) predicate = predicate.And(_ => created_by_in.Contains(_.created_by.Value));
			if (created_by_ni != null) predicate = predicate.And(_ => !created_by_ni.Contains(_.created_by.Value));
			if (created_by_isnull) predicate = predicate.And(_ => _.created_by == null);
			if (created_by_isnotnull) predicate = predicate.And(_ => _.created_by != null);
			#endregion
			#region modified_at
			if (modified_at_eq != null) predicate = predicate.And(_ => _.modified_at == modified_at_eq);
			if (modified_at_ne != null) predicate = predicate.And(_ => _.modified_at != modified_at_ne);
			if (modified_at_lt != null) predicate = predicate.And(_ => _.modified_at < modified_at_lt);
			if (modified_at_gt != null) predicate = predicate.And(_ => _.modified_at > modified_at_gt);
			if (modified_at_le != null) predicate = predicate.And(_ => _.modified_at <= modified_at_le);
			if (modified_at_ge != null) predicate = predicate.And(_ => _.modified_at >= modified_at_ge);
			if (modified_at_in != null) predicate = predicate.And(_ => modified_at_in.Contains(_.modified_at));
			if (modified_at_ni != null) predicate = predicate.And(_ => !modified_at_ni.Contains(_.modified_at));
			#endregion
			#region modified_by
			if (modified_by_eq != null) predicate = predicate.And(_ => _.modified_by == modified_by_eq);
			if (modified_by_ne != null) predicate = predicate.And(_ => _.modified_by != modified_by_ne);
			if (modified_by_lt != null) predicate = predicate.And(_ => _.modified_by < modified_by_lt);
			if (modified_by_gt != null) predicate = predicate.And(_ => _.modified_by > modified_by_gt);
			if (modified_by_le != null) predicate = predicate.And(_ => _.modified_by <= modified_by_le);
			if (modified_by_ge != null) predicate = predicate.And(_ => _.modified_by >= modified_by_ge);
			if (modified_by_in != null) predicate = predicate.And(_ => modified_by_in.Contains(_.modified_by.Value));
			if (modified_by_ni != null) predicate = predicate.And(_ => !modified_by_ni.Contains(_.modified_by.Value));
			if (modified_by_isnull) predicate = predicate.And(_ => _.modified_by == null);
			if (modified_by_isnotnull) predicate = predicate.And(_ => _.modified_by != null);
			#endregion
			#region removed_at
			if (removed_at_eq != null) predicate = predicate.And(_ => _.removed_at == removed_at_eq);
			if (removed_at_ne != null) predicate = predicate.And(_ => _.removed_at != removed_at_ne);
			if (removed_at_lt != null) predicate = predicate.And(_ => _.removed_at < removed_at_lt);
			if (removed_at_gt != null) predicate = predicate.And(_ => _.removed_at > removed_at_gt);
			if (removed_at_le != null) predicate = predicate.And(_ => _.removed_at <= removed_at_le);
			if (removed_at_ge != null) predicate = predicate.And(_ => _.removed_at >= removed_at_ge);
			if (removed_at_in != null) predicate = predicate.And(_ => removed_at_in.Contains(_.removed_at.Value));
			if (removed_at_ni != null) predicate = predicate.And(_ => !removed_at_ni.Contains(_.removed_at.Value));
			if (removed_at_isnull) predicate = predicate.And(_ => _.removed_at == null);
			if (removed_at_isnotnull) predicate = predicate.And(_ => _.removed_at != null);
			#endregion
			#region row_version
			if (row_version_eq != null) predicate = predicate.And(_ => _.row_version == row_version_eq);
			if (row_version_ne != null) predicate = predicate.And(_ => _.row_version != row_version_ne);
			if (row_version_isnull) predicate = predicate.And(_ => _.row_version == null);
			if (row_version_isnotnull) predicate = predicate.And(_ => _.row_version != null);
			#endregion

			return predicate;
		}
		#endregion
	}
	#endregion
	#endregion
	#region ロール権限
	/// <summary>
	/// ロール権限
	/// </summary>
	[Table(Schema="Core", Name="RolePermission"), DataContract]
	public partial class RolePermission : TableBase<RolePermission>, INotifyPropertyChanged
	{
		#region uid : int

		private int _uid;
		/// <summary>
		/// ユニークID
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull, Identity]
		public  int  uid
		{
			get { return _uid; }
			set
			{
				if (_uid != value)
				{
					BeforeuidChanged(value);
					_uid = value;
					AfteruidChanged();

					OnuidChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeuidChanged(int newValue);
		partial void AfteruidChanged();

		public const string NameOfuid = "uid";

		private static readonly PropertyChangedEventArgs _uidChangedEventArgs = new PropertyChangedEventArgs(NameOfuid);

		private void OnuidChanged()
		{
			OnPropertyChanged(_uidChangedEventArgs);
		}

		#endregion

		#endregion
		#region role_id : string

		private string _role_id;
		/// <summary>
		/// ロールID
		/// </summary>
		[Column(DbType="varchar(16)", DataType=DataType.VarChar, Length=16), DataMember, NotNull, PrimaryKey(Order = 1), System.ComponentModel.DataAnnotations.Required]
		public  string  role_id
		{
			get { return _role_id; }
			set
			{
				if (_role_id != value)
				{
					Beforerole_idChanged(value);
					_role_id = value;
					Afterrole_idChanged();

					Onrole_idChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforerole_idChanged(string newValue);
		partial void Afterrole_idChanged();

		public const string NameOfrole_id = "role_id";

		private static readonly PropertyChangedEventArgs _role_idChangedEventArgs = new PropertyChangedEventArgs(NameOfrole_id);

		private void Onrole_idChanged()
		{
			OnPropertyChanged(_role_idChangedEventArgs);
		}

		#endregion

		#endregion
		#region permission_id : string

		private string _permission_id;
		/// <summary>
		/// 権限ID
		/// </summary>
		[Column(DbType="varchar(40)", DataType=DataType.VarChar, Length=40), DataMember, NotNull, PrimaryKey(Order = 2), System.ComponentModel.DataAnnotations.Required]
		public  string  permission_id
		{
			get { return _permission_id; }
			set
			{
				if (_permission_id != value)
				{
					Beforepermission_idChanged(value);
					_permission_id = value;
					Afterpermission_idChanged();

					Onpermission_idChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforepermission_idChanged(string newValue);
		partial void Afterpermission_idChanged();

		public const string NameOfpermission_id = "permission_id";

		private static readonly PropertyChangedEventArgs _permission_idChangedEventArgs = new PropertyChangedEventArgs(NameOfpermission_id);

		private void Onpermission_idChanged()
		{
			OnPropertyChanged(_permission_idChangedEventArgs);
		}

		#endregion

		#endregion
		#region created_at : DateTime

		private DateTime _created_at;
		/// <summary>
		/// 作成日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, NotNull]
		public  DateTime  created_at
		{
			get { return _created_at; }
			set
			{
				if (_created_at != value)
				{
					Beforecreated_atChanged(value);
					_created_at = value;
					Aftercreated_atChanged();

					Oncreated_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecreated_atChanged(DateTime newValue);
		partial void Aftercreated_atChanged();

		public const string NameOfcreated_at = "created_at";

		private static readonly PropertyChangedEventArgs _created_atChangedEventArgs = new PropertyChangedEventArgs(NameOfcreated_at);

		private void Oncreated_atChanged()
		{
			OnPropertyChanged(_created_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region created_by : int?

		private int? _created_by;
		/// <summary>
		/// 作成者
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, Nullable]
		public  int?  created_by
		{
			get { return _created_by; }
			set
			{
				if (_created_by != value)
				{
					Beforecreated_byChanged(value);
					_created_by = value;
					Aftercreated_byChanged();

					Oncreated_byChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecreated_byChanged(int? newValue);
		partial void Aftercreated_byChanged();

		public const string NameOfcreated_by = "created_by";

		private static readonly PropertyChangedEventArgs _created_byChangedEventArgs = new PropertyChangedEventArgs(NameOfcreated_by);

		private void Oncreated_byChanged()
		{
			OnPropertyChanged(_created_byChangedEventArgs);
		}

		#endregion

		#endregion
		#region modified_at : DateTime

		private DateTime _modified_at;
		/// <summary>
		/// 更新日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, NotNull]
		public  DateTime  modified_at
		{
			get { return _modified_at; }
			set
			{
				if (_modified_at != value)
				{
					Beforemodified_atChanged(value);
					_modified_at = value;
					Aftermodified_atChanged();

					Onmodified_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforemodified_atChanged(DateTime newValue);
		partial void Aftermodified_atChanged();

		public const string NameOfmodified_at = "modified_at";

		private static readonly PropertyChangedEventArgs _modified_atChangedEventArgs = new PropertyChangedEventArgs(NameOfmodified_at);

		private void Onmodified_atChanged()
		{
			OnPropertyChanged(_modified_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region modified_by : int?

		private int? _modified_by;
		/// <summary>
		/// 更新者
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, Nullable]
		public  int?  modified_by
		{
			get { return _modified_by; }
			set
			{
				if (_modified_by != value)
				{
					Beforemodified_byChanged(value);
					_modified_by = value;
					Aftermodified_byChanged();

					Onmodified_byChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforemodified_byChanged(int? newValue);
		partial void Aftermodified_byChanged();

		public const string NameOfmodified_by = "modified_by";

		private static readonly PropertyChangedEventArgs _modified_byChangedEventArgs = new PropertyChangedEventArgs(NameOfmodified_by);

		private void Onmodified_byChanged()
		{
			OnPropertyChanged(_modified_byChangedEventArgs);
		}

		#endregion

		#endregion
		#region row_version : byte[]

		private byte[] _row_version;
		/// <summary>
		/// 版
		/// </summary>
		[Column(DbType="timestamp", DataType=DataType.Timestamp, SkipOnInsert=true, SkipOnUpdate=true), DataMember, Nullable]
		public  byte[]  row_version
		{
			get { return _row_version; }
			set
			{
				if (_row_version != value)
				{
					Beforerow_versionChanged(value);
					_row_version = value;
					Afterrow_versionChanged();

					Onrow_versionChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforerow_versionChanged(byte[] newValue);
		partial void Afterrow_versionChanged();

		public const string NameOfrow_version = "row_version";

		private static readonly PropertyChangedEventArgs _row_versionChangedEventArgs = new PropertyChangedEventArgs(NameOfrow_version);

		private void Onrow_versionChanged()
		{
			OnPropertyChanged(_row_versionChangedEventArgs);
		}

		#endregion

		#endregion

		#region enum用アクセスラッパー
		/// <summary>
		/// permission_idのenumラッパー
		/// </summary>
		[ColumnAlias("permission_id")]
		public PermissionType PermissionId
		{
			get
			{
				switch (permission_id)
				{
					case "Create_Role":
						return PermissionType.ロール作成;
					case "Read_Role":
						return PermissionType.ロール表示;
					case "Update_Role":
						return PermissionType.ロール更新;
					case "Delete_Role":
						return PermissionType.ロール削除;
					case "Create_RolePermission":
						return PermissionType.ロール権限作成;
					case "Read_RolePermission":
						return PermissionType.ロール権限表示;
					case "Update_RolePermission":
						return PermissionType.ロール権限更新;
					case "Delete_RolePermission":
						return PermissionType.ロール権限削除;
					case "Create_Account":
						return PermissionType.アカウント作成;
					case "Read_Account":
						return PermissionType.アカウント表示;
					case "Update_Account":
						return PermissionType.アカウント更新;
					case "Delete_Account":
						return PermissionType.アカウント削除;
					case "Create_AccountRole":
						return PermissionType.アカウントロール作成;
					case "Read_AccountRole":
						return PermissionType.アカウントロール表示;
					case "Update_AccountRole":
						return PermissionType.アカウントロール更新;
					case "Delete_AccountRole":
						return PermissionType.アカウントロール削除;
					case "Create_Password":
						return PermissionType.パスワード作成;
					case "Read_Password":
						return PermissionType.パスワード表示;
					case "Update_Password":
						return PermissionType.パスワード更新;
					case "Change_Password":
						return PermissionType.パスワード変更;
					case "Delete_Password":
						return PermissionType.パスワード削除;
					case "Create_Staff":
						return PermissionType.職員作成;
					case "Read_Staff":
						return PermissionType.職員表示;
					case "Update_Staff":
						return PermissionType.職員更新;
					case "Delete_Staff":
						return PermissionType.職員削除;
					case "Create_Teacher":
						return PermissionType.教員作成;
					case "Read_Teacher":
						return PermissionType.教員表示;
					case "Update_Teacher":
						return PermissionType.教員更新;
					case "Delete_Teacher":
						return PermissionType.教員削除;
					case "Create_User":
						return PermissionType.他ユーザ作成;
					case "Read_User":
						return PermissionType.他ユーザ表示;
					case "Update_User":
						return PermissionType.他ユーザ更新;
					case "Delete_User":
						return PermissionType.他ユーザ削除;
					case "Create_SexType":
						return PermissionType.性別区分作成;
					case "Read_SexType":
						return PermissionType.性別区分表示;
					case "Update_SexType":
						return PermissionType.性別区分更新;
					case "Delete_SexType":
						return PermissionType.性別区分削除;
					case "Create_WorkStyleType":
						return PermissionType.勤務形態種別作成;
					case "Read_WorkStyleType":
						return PermissionType.勤務形態種別表示;
					case "Update_WorkStyleType":
						return PermissionType.勤務形態種別更新;
					case "Delete_WorkStyleType":
						return PermissionType.勤務形態種別削除;
					case "Create_PositionType":
						return PermissionType.職階種別作成;
					case "Read_PositionType":
						return PermissionType.職階種別表示;
					case "Update_PositionType":
						return PermissionType.職階種別更新;
					case "Delete_PositionType":
						return PermissionType.職階種別削除;
					case "Create_TeacherLisenceType":
						return PermissionType.教員資格種別作成;
					case "Read_TeacherLisenceType":
						return PermissionType.教員資格種別表示;
					case "Update_TeacherLisenceType":
						return PermissionType.教員資格種別更新;
					case "Delete_TeacherLisenceType":
						return PermissionType.教員資格種別削除;
					case "Create_PersonName":
						return PermissionType.人名作成;
					case "Read_PersonName":
						return PermissionType.人名表示;
					case "Update_PersonName":
						return PermissionType.人名更新;
					case "Change_PersonName":
						return PermissionType.人名変更;
					case "Delete_PersonName":
						return PermissionType.人名削除;
					case "Create_PersonNameType":
						return PermissionType.人名種別作成;
					case "Read_PersonNameType":
						return PermissionType.人名種別表示;
					case "Update_PersonNameType":
						return PermissionType.人名種別更新;
					case "Delete_PersonNameType":
						return PermissionType.人名種別削除;
					case "Create_Address":
						return PermissionType.住所作成;
					case "Read_Address":
						return PermissionType.住所表示;
					case "Update_Address":
						return PermissionType.住所更新;
					case "Change_Address":
						return PermissionType.住所変更;
					case "Delete_Address":
						return PermissionType.住所削除;
					case "Create_AddressType":
						return PermissionType.住所種別作成;
					case "Read_AddressType":
						return PermissionType.住所種別表示;
					case "Update_AddressType":
						return PermissionType.住所種別更新;
					case "Delete_AddressType":
						return PermissionType.住所種別削除;
					case "Create_Contact":
						return PermissionType.連絡先作成;
					case "Read_Contact":
						return PermissionType.連絡先表示;
					case "Update_Contact":
						return PermissionType.連絡先更新;
					case "Change_Contact":
						return PermissionType.連絡先変更;
					case "Delete_Contact":
						return PermissionType.連絡先削除;
					case "Create_ContactType":
						return PermissionType.連絡先種別作成;
					case "Read_ContactType":
						return PermissionType.連絡先種別表示;
					case "Update_ContactType":
						return PermissionType.連絡先種別更新;
					case "Delete_ContactType":
						return PermissionType.連絡先種別削除;
					case "Create_ErrorLog":
						return PermissionType.エラーログ作成;
					case "Read_ErrorLog":
						return PermissionType.エラーログ表示;
					case "Update_ErrorLog":
						return PermissionType.エラーログ更新;
					case "Delete_ErrorLog":
						return PermissionType.エラーログ削除;
					case "Create_Test":
						return PermissionType.テスト作成;
					case "Read_Test":
						return PermissionType.テスト表示;
					case "Update_Test":
						return PermissionType.テスト更新;
					case "Delete_Test":
						return PermissionType.テスト削除;
					default:
						throw new Exception($"Unknown permission_id: {permission_id}");
				}
			}
			set
			{
				switch (value)
				{
					case PermissionType.ロール作成:
						permission_id = "Create_Role";
						break;
					case PermissionType.ロール表示:
						permission_id = "Read_Role";
						break;
					case PermissionType.ロール更新:
						permission_id = "Update_Role";
						break;
					case PermissionType.ロール削除:
						permission_id = "Delete_Role";
						break;
					case PermissionType.ロール権限作成:
						permission_id = "Create_RolePermission";
						break;
					case PermissionType.ロール権限表示:
						permission_id = "Read_RolePermission";
						break;
					case PermissionType.ロール権限更新:
						permission_id = "Update_RolePermission";
						break;
					case PermissionType.ロール権限削除:
						permission_id = "Delete_RolePermission";
						break;
					case PermissionType.アカウント作成:
						permission_id = "Create_Account";
						break;
					case PermissionType.アカウント表示:
						permission_id = "Read_Account";
						break;
					case PermissionType.アカウント更新:
						permission_id = "Update_Account";
						break;
					case PermissionType.アカウント削除:
						permission_id = "Delete_Account";
						break;
					case PermissionType.アカウントロール作成:
						permission_id = "Create_AccountRole";
						break;
					case PermissionType.アカウントロール表示:
						permission_id = "Read_AccountRole";
						break;
					case PermissionType.アカウントロール更新:
						permission_id = "Update_AccountRole";
						break;
					case PermissionType.アカウントロール削除:
						permission_id = "Delete_AccountRole";
						break;
					case PermissionType.パスワード作成:
						permission_id = "Create_Password";
						break;
					case PermissionType.パスワード表示:
						permission_id = "Read_Password";
						break;
					case PermissionType.パスワード更新:
						permission_id = "Update_Password";
						break;
					case PermissionType.パスワード変更:
						permission_id = "Change_Password";
						break;
					case PermissionType.パスワード削除:
						permission_id = "Delete_Password";
						break;
					case PermissionType.職員作成:
						permission_id = "Create_Staff";
						break;
					case PermissionType.職員表示:
						permission_id = "Read_Staff";
						break;
					case PermissionType.職員更新:
						permission_id = "Update_Staff";
						break;
					case PermissionType.職員削除:
						permission_id = "Delete_Staff";
						break;
					case PermissionType.教員作成:
						permission_id = "Create_Teacher";
						break;
					case PermissionType.教員表示:
						permission_id = "Read_Teacher";
						break;
					case PermissionType.教員更新:
						permission_id = "Update_Teacher";
						break;
					case PermissionType.教員削除:
						permission_id = "Delete_Teacher";
						break;
					case PermissionType.他ユーザ作成:
						permission_id = "Create_User";
						break;
					case PermissionType.他ユーザ表示:
						permission_id = "Read_User";
						break;
					case PermissionType.他ユーザ更新:
						permission_id = "Update_User";
						break;
					case PermissionType.他ユーザ削除:
						permission_id = "Delete_User";
						break;
					case PermissionType.性別区分作成:
						permission_id = "Create_SexType";
						break;
					case PermissionType.性別区分表示:
						permission_id = "Read_SexType";
						break;
					case PermissionType.性別区分更新:
						permission_id = "Update_SexType";
						break;
					case PermissionType.性別区分削除:
						permission_id = "Delete_SexType";
						break;
					case PermissionType.勤務形態種別作成:
						permission_id = "Create_WorkStyleType";
						break;
					case PermissionType.勤務形態種別表示:
						permission_id = "Read_WorkStyleType";
						break;
					case PermissionType.勤務形態種別更新:
						permission_id = "Update_WorkStyleType";
						break;
					case PermissionType.勤務形態種別削除:
						permission_id = "Delete_WorkStyleType";
						break;
					case PermissionType.職階種別作成:
						permission_id = "Create_PositionType";
						break;
					case PermissionType.職階種別表示:
						permission_id = "Read_PositionType";
						break;
					case PermissionType.職階種別更新:
						permission_id = "Update_PositionType";
						break;
					case PermissionType.職階種別削除:
						permission_id = "Delete_PositionType";
						break;
					case PermissionType.教員資格種別作成:
						permission_id = "Create_TeacherLisenceType";
						break;
					case PermissionType.教員資格種別表示:
						permission_id = "Read_TeacherLisenceType";
						break;
					case PermissionType.教員資格種別更新:
						permission_id = "Update_TeacherLisenceType";
						break;
					case PermissionType.教員資格種別削除:
						permission_id = "Delete_TeacherLisenceType";
						break;
					case PermissionType.人名作成:
						permission_id = "Create_PersonName";
						break;
					case PermissionType.人名表示:
						permission_id = "Read_PersonName";
						break;
					case PermissionType.人名更新:
						permission_id = "Update_PersonName";
						break;
					case PermissionType.人名変更:
						permission_id = "Change_PersonName";
						break;
					case PermissionType.人名削除:
						permission_id = "Delete_PersonName";
						break;
					case PermissionType.人名種別作成:
						permission_id = "Create_PersonNameType";
						break;
					case PermissionType.人名種別表示:
						permission_id = "Read_PersonNameType";
						break;
					case PermissionType.人名種別更新:
						permission_id = "Update_PersonNameType";
						break;
					case PermissionType.人名種別削除:
						permission_id = "Delete_PersonNameType";
						break;
					case PermissionType.住所作成:
						permission_id = "Create_Address";
						break;
					case PermissionType.住所表示:
						permission_id = "Read_Address";
						break;
					case PermissionType.住所更新:
						permission_id = "Update_Address";
						break;
					case PermissionType.住所変更:
						permission_id = "Change_Address";
						break;
					case PermissionType.住所削除:
						permission_id = "Delete_Address";
						break;
					case PermissionType.住所種別作成:
						permission_id = "Create_AddressType";
						break;
					case PermissionType.住所種別表示:
						permission_id = "Read_AddressType";
						break;
					case PermissionType.住所種別更新:
						permission_id = "Update_AddressType";
						break;
					case PermissionType.住所種別削除:
						permission_id = "Delete_AddressType";
						break;
					case PermissionType.連絡先作成:
						permission_id = "Create_Contact";
						break;
					case PermissionType.連絡先表示:
						permission_id = "Read_Contact";
						break;
					case PermissionType.連絡先更新:
						permission_id = "Update_Contact";
						break;
					case PermissionType.連絡先変更:
						permission_id = "Change_Contact";
						break;
					case PermissionType.連絡先削除:
						permission_id = "Delete_Contact";
						break;
					case PermissionType.連絡先種別作成:
						permission_id = "Create_ContactType";
						break;
					case PermissionType.連絡先種別表示:
						permission_id = "Read_ContactType";
						break;
					case PermissionType.連絡先種別更新:
						permission_id = "Update_ContactType";
						break;
					case PermissionType.連絡先種別削除:
						permission_id = "Delete_ContactType";
						break;
					case PermissionType.エラーログ作成:
						permission_id = "Create_ErrorLog";
						break;
					case PermissionType.エラーログ表示:
						permission_id = "Read_ErrorLog";
						break;
					case PermissionType.エラーログ更新:
						permission_id = "Update_ErrorLog";
						break;
					case PermissionType.エラーログ削除:
						permission_id = "Delete_ErrorLog";
						break;
					case PermissionType.テスト作成:
						permission_id = "Create_Test";
						break;
					case PermissionType.テスト表示:
						permission_id = "Read_Test";
						break;
					case PermissionType.テスト更新:
						permission_id = "Update_Test";
						break;
					case PermissionType.テスト削除:
						permission_id = "Delete_Test";
						break;
					default:
						throw new Exception($"Unknown PermissionType: {value}");
				}
			}
		}
		#endregion

		#region Constructor

		public RolePermission()
		{
			#region フィールド初期化
			uid = default(int);
			role_id = "";
			permission_id = "";
			created_at = DateTime.UtcNow;
			created_by = null;
			modified_at = DateTime.UtcNow;
			modified_by = null;
			row_version = default(byte[]);
			#endregion
		}

		#endregion

		#region Association


		#endregion

		#region INotifyPropertyChanged support

		[field : NonSerialized]
		public virtual event PropertyChangedEventHandler PropertyChanged;

		protected void OnPropertyChanged(string propertyName)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		protected void OnPropertyChanged(PropertyChangedEventArgs arg)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, arg);
			}
		}

		#endregion

	}
	#region ロール権限条件
	/// <summary>
	/// ロール権限条件
	/// </summary>
	[DataContract]
	public partial class RolePermissionCondition : RolePermissionConditionBase
	{
	}

	/// <summary>
	/// ロール権限条件ベース
	/// </summary>
	[DataContract]
	public class RolePermissionConditionBase : ConditionBase<RolePermission>
	{
		#region properties
		#region uid
		/// <summary>
		/// uid_eqと等しい
		/// </summary>
		[DataMember] public int? uid_eq { get; set; }
		/// <summary>
		/// uid_neと等しくない
		/// </summary>
		[DataMember] public int? uid_ne { get; set; }
		/// <summary>
		/// uid_ltより小さい
		/// </summary>
		[DataMember] public int? uid_lt { get; set; }
		/// <summary>
		/// uid_gtより大きい
		/// </summary>
		[DataMember] public int? uid_gt { get; set; }
		/// <summary>
		/// uid_le以下
		/// </summary>
		[DataMember] public int? uid_le { get; set; }
		/// <summary>
		/// uid_ge以上
		/// </summary>
		[DataMember] public int? uid_ge { get; set; }
		/// <summary>
		/// uid_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> uid_in { get; set; }
		/// <summary>
		/// uid_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> uid_ni { get; set; }
		/// <summary>
		/// uid_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? uid_between { get; set; }
		#endregion
		#region role_id
		/// <summary>
		/// role_id_eqと等しい
		/// </summary>
		[DataMember] public string role_id_eq { get; set; }
		/// <summary>
		/// role_id_neと等しくない
		/// </summary>
		[DataMember] public string role_id_ne { get; set; }
		/// <summary>
		/// role_id_ltより小さい
		/// </summary>
		[DataMember] public string role_id_lt { get; set; }
		/// <summary>
		/// role_id_gtより大きい
		/// </summary>
		[DataMember] public string role_id_gt { get; set; }
		/// <summary>
		/// role_id_le以下
		/// </summary>
		[DataMember] public string role_id_le { get; set; }
		/// <summary>
		/// role_id_ge以上
		/// </summary>
		[DataMember] public string role_id_ge { get; set; }
		/// <summary>
		/// role_id_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> role_id_in { get; set; }
		/// <summary>
		/// role_id_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> role_id_ni { get; set; }
		/// <summary>
		/// role_id_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? role_id_between { get; set; }
		/// <summary>
		/// role_id_likeと部分一致する
		/// </summary>
		[DataMember] public string role_id_like { get; set; }
		#endregion
		#region permission_id (PermissionId)
		private string _permission_id_eq;
		/// <summary>
		/// PermissionId_eqと等しい
		/// </summary>
		[DataMember] public PermissionType? PermissionId_eq
		{
			get => _permission_id_eq?.ToPermissionType();
			set => _permission_id_eq = value.HasValue ? value.Value.Val() : (string)null;
		}
		private string _permission_id_ne;
		/// <summary>
		/// PermissionId_neと等しくない
		/// </summary>
		[DataMember] public PermissionType? PermissionId_ne
		{
			get => _permission_id_ne?.ToPermissionType();
			set => _permission_id_ne = value.HasValue ? value.Value.Val() : (string)null;
		}
		private string _permission_id_lt;
		/// <summary>
		/// PermissionId_ltより小さい
		/// </summary>
		[DataMember] public PermissionType? PermissionId_lt
		{
			get => _permission_id_lt?.ToPermissionType();
			set => _permission_id_lt = value.HasValue ? value.Value.Val() : (string)null;
		}
		private string _permission_id_gt;
		/// <summary>
		/// PermissionId_gtより大きい
		/// </summary>
		[DataMember] public PermissionType? PermissionId_gt
		{
			get => _permission_id_gt?.ToPermissionType();
			set => _permission_id_gt = value.HasValue ? value.Value.Val() : (string)null;
		}
		private string _permission_id_le;
		/// <summary>
		/// PermissionId_le以下
		/// </summary>
		[DataMember] public PermissionType? PermissionId_le
		{
			get => _permission_id_le?.ToPermissionType();
			set => _permission_id_le = value.HasValue ? value.Value.Val() : (string)null;
		}
		private string _permission_id_ge;
		/// <summary>
		/// PermissionId_ge以上
		/// </summary>
		[DataMember] public PermissionType? PermissionId_ge
		{
			get => _permission_id_ge?.ToPermissionType();
			set => _permission_id_ge = value.HasValue ? value.Value.Val() : (string)null;
		}
		private IEnumerable<string> _permission_id_in;
		/// <summary>
		/// PermissionId_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<PermissionType> PermissionId_in
		{
			get => _permission_id_in?.Select(_ => _.ToPermissionType().Value) ?? Enumerable.Empty<PermissionType>();
			set => _permission_id_in = value.Select(_ => _.Val());
		}
		private IEnumerable<string> _permission_id_ni;
		/// <summary>
		/// PermissionId_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<PermissionType> PermissionId_ni
		{
			get => _permission_id_ni?.Select(_ => _.ToPermissionType().Value) ?? Enumerable.Empty<PermissionType>();
			set => _permission_id_ni = value.Select(_ => _.Val());
		}
		private (string low, string high)? _permission_id_between;
		/// <summary>
		/// PermissionId_betweenの範囲内にある
		/// </summary>
		[DataMember] public (PermissionType low, PermissionType high)? PermissionId_between
		{
			get => _permission_id_between.HasValue ? (_permission_id_between.Value.low.ToPermissionType().Value, _permission_id_between.Value.high.ToPermissionType().Value) : ((PermissionType, PermissionType)?)null;
			set => _permission_id_between = value.HasValue ? (value.Value.low.Val(), value.Value.high.Val()) : ((string, string)?)null;
		}
		#endregion
		#region created_at
		/// <summary>
		/// created_at_eqと等しい
		/// </summary>
		[DataMember] public DateTime? created_at_eq { get; set; }
		/// <summary>
		/// created_at_neと等しくない
		/// </summary>
		[DataMember] public DateTime? created_at_ne { get; set; }
		/// <summary>
		/// created_at_ltより小さい
		/// </summary>
		[DataMember] public DateTime? created_at_lt { get; set; }
		/// <summary>
		/// created_at_gtより大きい
		/// </summary>
		[DataMember] public DateTime? created_at_gt { get; set; }
		/// <summary>
		/// created_at_le以下
		/// </summary>
		[DataMember] public DateTime? created_at_le { get; set; }
		/// <summary>
		/// created_at_ge以上
		/// </summary>
		[DataMember] public DateTime? created_at_ge { get; set; }
		/// <summary>
		/// created_at_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> created_at_in { get; set; }
		/// <summary>
		/// created_at_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> created_at_ni { get; set; }
		/// <summary>
		/// created_at_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? created_at_between { get; set; }
		#endregion
		#region created_by
		/// <summary>
		/// created_by_eqと等しい
		/// </summary>
		[DataMember] public int? created_by_eq { get; set; }
		/// <summary>
		/// created_by_neと等しくない
		/// </summary>
		[DataMember] public int? created_by_ne { get; set; }
		/// <summary>
		/// created_by_ltより小さい
		/// </summary>
		[DataMember] public int? created_by_lt { get; set; }
		/// <summary>
		/// created_by_gtより大きい
		/// </summary>
		[DataMember] public int? created_by_gt { get; set; }
		/// <summary>
		/// created_by_le以下
		/// </summary>
		[DataMember] public int? created_by_le { get; set; }
		/// <summary>
		/// created_by_ge以上
		/// </summary>
		[DataMember] public int? created_by_ge { get; set; }
		/// <summary>
		/// created_by_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> created_by_in { get; set; }
		/// <summary>
		/// created_by_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> created_by_ni { get; set; }
		/// <summary>
		/// created_by_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? created_by_between { get; set; }
		/// <summary>
		/// created_byがNULLか
		/// </summary>
		[DataMember] public bool created_by_isnull { get; set; } =  false ;
		/// <summary>
		/// created_byがNULLではないか
		/// </summary>
		[DataMember] public bool created_by_isnotnull { get; set; } = false;
		#endregion
		#region modified_at
		/// <summary>
		/// modified_at_eqと等しい
		/// </summary>
		[DataMember] public DateTime? modified_at_eq { get; set; }
		/// <summary>
		/// modified_at_neと等しくない
		/// </summary>
		[DataMember] public DateTime? modified_at_ne { get; set; }
		/// <summary>
		/// modified_at_ltより小さい
		/// </summary>
		[DataMember] public DateTime? modified_at_lt { get; set; }
		/// <summary>
		/// modified_at_gtより大きい
		/// </summary>
		[DataMember] public DateTime? modified_at_gt { get; set; }
		/// <summary>
		/// modified_at_le以下
		/// </summary>
		[DataMember] public DateTime? modified_at_le { get; set; }
		/// <summary>
		/// modified_at_ge以上
		/// </summary>
		[DataMember] public DateTime? modified_at_ge { get; set; }
		/// <summary>
		/// modified_at_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> modified_at_in { get; set; }
		/// <summary>
		/// modified_at_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> modified_at_ni { get; set; }
		/// <summary>
		/// modified_at_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? modified_at_between { get; set; }
		#endregion
		#region modified_by
		/// <summary>
		/// modified_by_eqと等しい
		/// </summary>
		[DataMember] public int? modified_by_eq { get; set; }
		/// <summary>
		/// modified_by_neと等しくない
		/// </summary>
		[DataMember] public int? modified_by_ne { get; set; }
		/// <summary>
		/// modified_by_ltより小さい
		/// </summary>
		[DataMember] public int? modified_by_lt { get; set; }
		/// <summary>
		/// modified_by_gtより大きい
		/// </summary>
		[DataMember] public int? modified_by_gt { get; set; }
		/// <summary>
		/// modified_by_le以下
		/// </summary>
		[DataMember] public int? modified_by_le { get; set; }
		/// <summary>
		/// modified_by_ge以上
		/// </summary>
		[DataMember] public int? modified_by_ge { get; set; }
		/// <summary>
		/// modified_by_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> modified_by_in { get; set; }
		/// <summary>
		/// modified_by_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> modified_by_ni { get; set; }
		/// <summary>
		/// modified_by_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? modified_by_between { get; set; }
		/// <summary>
		/// modified_byがNULLか
		/// </summary>
		[DataMember] public bool modified_by_isnull { get; set; } =  false ;
		/// <summary>
		/// modified_byがNULLではないか
		/// </summary>
		[DataMember] public bool modified_by_isnotnull { get; set; } = false;
		#endregion
		#region row_version
		/// <summary>
		/// row_version_eqと等しい
		/// </summary>
		[DataMember] public byte[] row_version_eq { get; set; }
		/// <summary>
		/// row_version_neと等しくない
		/// </summary>
		[DataMember] public byte[] row_version_ne { get; set; }
		/// <summary>
		/// row_versionがNULLか
		/// </summary>
		[DataMember] public bool row_version_isnull { get; set; } =  false ;
		/// <summary>
		/// row_versionがNULLではないか
		/// </summary>
		[DataMember] public bool row_version_isnotnull { get; set; } = false;
		#endregion
		#endregion

		#region override
		override public Expression<Func<RolePermission, bool>> CreatePredicate()
		{
			var predicate = base.CreatePredicate();

			#region uid
			if (uid_eq != null) predicate = predicate.And(_ => _.uid == uid_eq);
			if (uid_ne != null) predicate = predicate.And(_ => _.uid != uid_ne);
			if (uid_lt != null) predicate = predicate.And(_ => _.uid < uid_lt);
			if (uid_gt != null) predicate = predicate.And(_ => _.uid > uid_gt);
			if (uid_le != null) predicate = predicate.And(_ => _.uid <= uid_le);
			if (uid_ge != null) predicate = predicate.And(_ => _.uid >= uid_ge);
			if (uid_in != null) predicate = predicate.And(_ => uid_in.Contains(_.uid));
			if (uid_ni != null) predicate = predicate.And(_ => !uid_ni.Contains(_.uid));
			#endregion
			#region role_id
			if (role_id_eq != null) predicate = predicate.And(_ => _.role_id == role_id_eq);
			if (role_id_ne != null) predicate = predicate.And(_ => _.role_id != role_id_ne);
			if (role_id_lt != null) predicate = predicate.And(_ => role_id_lt.CompareTo(_.role_id) > 0);
			if (role_id_gt != null) predicate = predicate.And(_ => role_id_gt.CompareTo(_.role_id) < 0);
			if (role_id_le != null) predicate = predicate.And(_ => role_id_le.CompareTo(_.role_id) >= 0);
			if (role_id_ge != null) predicate = predicate.And(_ => role_id_ge.CompareTo(_.role_id) <= 0);
			if (role_id_in != null) predicate = predicate.And(_ => role_id_in.Contains(_.role_id));
			if (role_id_ni != null) predicate = predicate.And(_ => !role_id_ni.Contains(_.role_id));
			#endregion
			#region permission_id
			if (_permission_id_eq != null) predicate = predicate.And(_ => _.permission_id == _permission_id_eq);
			if (_permission_id_ne != null) predicate = predicate.And(_ => _.permission_id != _permission_id_ne);
			if (_permission_id_lt != null) predicate = predicate.And(_ => _permission_id_lt.CompareTo(_.permission_id) > 0);
			if (_permission_id_gt != null) predicate = predicate.And(_ => _permission_id_gt.CompareTo(_.permission_id) < 0);
			if (_permission_id_le != null) predicate = predicate.And(_ => _permission_id_le.CompareTo(_.permission_id) >= 0);
			if (_permission_id_ge != null) predicate = predicate.And(_ => _permission_id_ge.CompareTo(_.permission_id) <= 0);
			if (_permission_id_in != null) predicate = predicate.And(_ => _permission_id_in.Contains(_.permission_id));
			if (_permission_id_ni != null) predicate = predicate.And(_ => !_permission_id_ni.Contains(_.permission_id));
			#endregion
			#region created_at
			if (created_at_eq != null) predicate = predicate.And(_ => _.created_at == created_at_eq);
			if (created_at_ne != null) predicate = predicate.And(_ => _.created_at != created_at_ne);
			if (created_at_lt != null) predicate = predicate.And(_ => _.created_at < created_at_lt);
			if (created_at_gt != null) predicate = predicate.And(_ => _.created_at > created_at_gt);
			if (created_at_le != null) predicate = predicate.And(_ => _.created_at <= created_at_le);
			if (created_at_ge != null) predicate = predicate.And(_ => _.created_at >= created_at_ge);
			if (created_at_in != null) predicate = predicate.And(_ => created_at_in.Contains(_.created_at));
			if (created_at_ni != null) predicate = predicate.And(_ => !created_at_ni.Contains(_.created_at));
			#endregion
			#region created_by
			if (created_by_eq != null) predicate = predicate.And(_ => _.created_by == created_by_eq);
			if (created_by_ne != null) predicate = predicate.And(_ => _.created_by != created_by_ne);
			if (created_by_lt != null) predicate = predicate.And(_ => _.created_by < created_by_lt);
			if (created_by_gt != null) predicate = predicate.And(_ => _.created_by > created_by_gt);
			if (created_by_le != null) predicate = predicate.And(_ => _.created_by <= created_by_le);
			if (created_by_ge != null) predicate = predicate.And(_ => _.created_by >= created_by_ge);
			if (created_by_in != null) predicate = predicate.And(_ => created_by_in.Contains(_.created_by.Value));
			if (created_by_ni != null) predicate = predicate.And(_ => !created_by_ni.Contains(_.created_by.Value));
			if (created_by_isnull) predicate = predicate.And(_ => _.created_by == null);
			if (created_by_isnotnull) predicate = predicate.And(_ => _.created_by != null);
			#endregion
			#region modified_at
			if (modified_at_eq != null) predicate = predicate.And(_ => _.modified_at == modified_at_eq);
			if (modified_at_ne != null) predicate = predicate.And(_ => _.modified_at != modified_at_ne);
			if (modified_at_lt != null) predicate = predicate.And(_ => _.modified_at < modified_at_lt);
			if (modified_at_gt != null) predicate = predicate.And(_ => _.modified_at > modified_at_gt);
			if (modified_at_le != null) predicate = predicate.And(_ => _.modified_at <= modified_at_le);
			if (modified_at_ge != null) predicate = predicate.And(_ => _.modified_at >= modified_at_ge);
			if (modified_at_in != null) predicate = predicate.And(_ => modified_at_in.Contains(_.modified_at));
			if (modified_at_ni != null) predicate = predicate.And(_ => !modified_at_ni.Contains(_.modified_at));
			#endregion
			#region modified_by
			if (modified_by_eq != null) predicate = predicate.And(_ => _.modified_by == modified_by_eq);
			if (modified_by_ne != null) predicate = predicate.And(_ => _.modified_by != modified_by_ne);
			if (modified_by_lt != null) predicate = predicate.And(_ => _.modified_by < modified_by_lt);
			if (modified_by_gt != null) predicate = predicate.And(_ => _.modified_by > modified_by_gt);
			if (modified_by_le != null) predicate = predicate.And(_ => _.modified_by <= modified_by_le);
			if (modified_by_ge != null) predicate = predicate.And(_ => _.modified_by >= modified_by_ge);
			if (modified_by_in != null) predicate = predicate.And(_ => modified_by_in.Contains(_.modified_by.Value));
			if (modified_by_ni != null) predicate = predicate.And(_ => !modified_by_ni.Contains(_.modified_by.Value));
			if (modified_by_isnull) predicate = predicate.And(_ => _.modified_by == null);
			if (modified_by_isnotnull) predicate = predicate.And(_ => _.modified_by != null);
			#endregion
			#region row_version
			if (row_version_eq != null) predicate = predicate.And(_ => _.row_version == row_version_eq);
			if (row_version_ne != null) predicate = predicate.And(_ => _.row_version != row_version_ne);
			if (row_version_isnull) predicate = predicate.And(_ => _.row_version == null);
			if (row_version_isnotnull) predicate = predicate.And(_ => _.row_version != null);
			#endregion

			return predicate;
		}
		#endregion
	}
	#endregion
	#endregion
	#region アカウント
	/// <summary>
	/// アカウント
	/// </summary>
	[Table(Schema="Core", Name="Account"), DataContract]
	public partial class Account : TableBase<Account>, INotifyPropertyChanged
	{
		#region uid : int

		private int _uid;
		/// <summary>
		/// ユニークID
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull, Identity]
		public  int  uid
		{
			get { return _uid; }
			set
			{
				if (_uid != value)
				{
					BeforeuidChanged(value);
					_uid = value;
					AfteruidChanged();

					OnuidChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeuidChanged(int newValue);
		partial void AfteruidChanged();

		public const string NameOfuid = "uid";

		private static readonly PropertyChangedEventArgs _uidChangedEventArgs = new PropertyChangedEventArgs(NameOfuid);

		private void OnuidChanged()
		{
			OnPropertyChanged(_uidChangedEventArgs);
		}

		#endregion

		#endregion
		#region account_id : int

		private int _account_id;
		/// <summary>
		/// アカウントID
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull, PrimaryKey(Order = 1), System.ComponentModel.DataAnnotations.Required]
		public  int  account_id
		{
			get { return _account_id; }
			set
			{
				if (_account_id != value)
				{
					Beforeaccount_idChanged(value);
					_account_id = value;
					Afteraccount_idChanged();

					Onaccount_idChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeaccount_idChanged(int newValue);
		partial void Afteraccount_idChanged();

		public const string NameOfaccount_id = "account_id";

		private static readonly PropertyChangedEventArgs _account_idChangedEventArgs = new PropertyChangedEventArgs(NameOfaccount_id);

		private void Onaccount_idChanged()
		{
			OnPropertyChanged(_account_idChangedEventArgs);
		}

		#endregion

		#endregion
		#region staff_no : string

		private string _staff_no;
		/// <summary>
		/// 職員番号
		/// </summary>
		[Column(DbType="varchar(16)", DataType=DataType.VarChar, Length=16), DataMember, Nullable]
		public  string  staff_no
		{
			get { return _staff_no; }
			set
			{
				if (_staff_no != value)
				{
					Beforestaff_noChanged(value);
					_staff_no = value;
					Afterstaff_noChanged();

					Onstaff_noChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforestaff_noChanged(string newValue);
		partial void Afterstaff_noChanged();

		public const string NameOfstaff_no = "staff_no";

		private static readonly PropertyChangedEventArgs _staff_noChangedEventArgs = new PropertyChangedEventArgs(NameOfstaff_no);

		private void Onstaff_noChanged()
		{
			OnPropertyChanged(_staff_noChangedEventArgs);
		}

		#endregion

		#endregion
		#region teacher_no : string

		private string _teacher_no;
		/// <summary>
		/// 教員番号
		/// </summary>
		[Column(DbType="varchar(16)", DataType=DataType.VarChar, Length=16), DataMember, Nullable]
		public  string  teacher_no
		{
			get { return _teacher_no; }
			set
			{
				if (_teacher_no != value)
				{
					Beforeteacher_noChanged(value);
					_teacher_no = value;
					Afterteacher_noChanged();

					Onteacher_noChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeteacher_noChanged(string newValue);
		partial void Afterteacher_noChanged();

		public const string NameOfteacher_no = "teacher_no";

		private static readonly PropertyChangedEventArgs _teacher_noChangedEventArgs = new PropertyChangedEventArgs(NameOfteacher_no);

		private void Onteacher_noChanged()
		{
			OnPropertyChanged(_teacher_noChangedEventArgs);
		}

		#endregion

		#endregion
		#region student_no : string

		private string _student_no;
		/// <summary>
		/// 学生番号
		/// </summary>
		[Column(DbType="varchar(16)", DataType=DataType.VarChar, Length=16), DataMember, Nullable]
		public  string  student_no
		{
			get { return _student_no; }
			set
			{
				if (_student_no != value)
				{
					Beforestudent_noChanged(value);
					_student_no = value;
					Afterstudent_noChanged();

					Onstudent_noChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforestudent_noChanged(string newValue);
		partial void Afterstudent_noChanged();

		public const string NameOfstudent_no = "student_no";

		private static readonly PropertyChangedEventArgs _student_noChangedEventArgs = new PropertyChangedEventArgs(NameOfstudent_no);

		private void Onstudent_noChanged()
		{
			OnPropertyChanged(_student_noChangedEventArgs);
		}

		#endregion

		#endregion
		#region out_student_no : string

		private string _out_student_no;
		/// <summary>
		/// 除籍生番号
		/// </summary>
		[Column(DbType="varchar(16)", DataType=DataType.VarChar, Length=16), DataMember, Nullable]
		public  string  out_student_no
		{
			get { return _out_student_no; }
			set
			{
				if (_out_student_no != value)
				{
					Beforeout_student_noChanged(value);
					_out_student_no = value;
					Afterout_student_noChanged();

					Onout_student_noChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeout_student_noChanged(string newValue);
		partial void Afterout_student_noChanged();

		public const string NameOfout_student_no = "out_student_no";

		private static readonly PropertyChangedEventArgs _out_student_noChangedEventArgs = new PropertyChangedEventArgs(NameOfout_student_no);

		private void Onout_student_noChanged()
		{
			OnPropertyChanged(_out_student_noChangedEventArgs);
		}

		#endregion

		#endregion
		#region parent_no : string

		private string _parent_no;
		/// <summary>
		/// 保護者番号
		/// </summary>
		[Column(DbType="varchar(16)", DataType=DataType.VarChar, Length=16), DataMember, Nullable]
		public  string  parent_no
		{
			get { return _parent_no; }
			set
			{
				if (_parent_no != value)
				{
					Beforeparent_noChanged(value);
					_parent_no = value;
					Afterparent_noChanged();

					Onparent_noChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeparent_noChanged(string newValue);
		partial void Afterparent_noChanged();

		public const string NameOfparent_no = "parent_no";

		private static readonly PropertyChangedEventArgs _parent_noChangedEventArgs = new PropertyChangedEventArgs(NameOfparent_no);

		private void Onparent_noChanged()
		{
			OnPropertyChanged(_parent_noChangedEventArgs);
		}

		#endregion

		#endregion
		#region user_no : string

		private string _user_no;
		/// <summary>
		/// ユーザ番号
		/// </summary>
		[Column(DbType="varchar(16)", DataType=DataType.VarChar, Length=16), DataMember, Nullable]
		public  string  user_no
		{
			get { return _user_no; }
			set
			{
				if (_user_no != value)
				{
					Beforeuser_noChanged(value);
					_user_no = value;
					Afteruser_noChanged();

					Onuser_noChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeuser_noChanged(string newValue);
		partial void Afteruser_noChanged();

		public const string NameOfuser_no = "user_no";

		private static readonly PropertyChangedEventArgs _user_noChangedEventArgs = new PropertyChangedEventArgs(NameOfuser_no);

		private void Onuser_noChanged()
		{
			OnPropertyChanged(_user_noChangedEventArgs);
		}

		#endregion

		#endregion
		#region is_valid : int

		private int _is_valid;
		/// <summary>
		/// 有効フラグ
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull, System.ComponentModel.DataAnnotations.Required]
		public  int  is_valid
		{
			get { return _is_valid; }
			set
			{
				if (_is_valid != value)
				{
					Beforeis_validChanged(value);
					_is_valid = value;
					Afteris_validChanged();

					Onis_validChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeis_validChanged(int newValue);
		partial void Afteris_validChanged();

		public const string NameOfis_valid = "is_valid";

		private static readonly PropertyChangedEventArgs _is_validChangedEventArgs = new PropertyChangedEventArgs(NameOfis_valid);

		private void Onis_validChanged()
		{
			OnPropertyChanged(_is_validChangedEventArgs);
		}

		#endregion

		#endregion
		#region created_at : DateTime

		private DateTime _created_at;
		/// <summary>
		/// 作成日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, NotNull]
		public  DateTime  created_at
		{
			get { return _created_at; }
			set
			{
				if (_created_at != value)
				{
					Beforecreated_atChanged(value);
					_created_at = value;
					Aftercreated_atChanged();

					Oncreated_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecreated_atChanged(DateTime newValue);
		partial void Aftercreated_atChanged();

		public const string NameOfcreated_at = "created_at";

		private static readonly PropertyChangedEventArgs _created_atChangedEventArgs = new PropertyChangedEventArgs(NameOfcreated_at);

		private void Oncreated_atChanged()
		{
			OnPropertyChanged(_created_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region created_by : int?

		private int? _created_by;
		/// <summary>
		/// 作成者
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, Nullable]
		public  int?  created_by
		{
			get { return _created_by; }
			set
			{
				if (_created_by != value)
				{
					Beforecreated_byChanged(value);
					_created_by = value;
					Aftercreated_byChanged();

					Oncreated_byChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecreated_byChanged(int? newValue);
		partial void Aftercreated_byChanged();

		public const string NameOfcreated_by = "created_by";

		private static readonly PropertyChangedEventArgs _created_byChangedEventArgs = new PropertyChangedEventArgs(NameOfcreated_by);

		private void Oncreated_byChanged()
		{
			OnPropertyChanged(_created_byChangedEventArgs);
		}

		#endregion

		#endregion
		#region modified_at : DateTime

		private DateTime _modified_at;
		/// <summary>
		/// 更新日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, NotNull]
		public  DateTime  modified_at
		{
			get { return _modified_at; }
			set
			{
				if (_modified_at != value)
				{
					Beforemodified_atChanged(value);
					_modified_at = value;
					Aftermodified_atChanged();

					Onmodified_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforemodified_atChanged(DateTime newValue);
		partial void Aftermodified_atChanged();

		public const string NameOfmodified_at = "modified_at";

		private static readonly PropertyChangedEventArgs _modified_atChangedEventArgs = new PropertyChangedEventArgs(NameOfmodified_at);

		private void Onmodified_atChanged()
		{
			OnPropertyChanged(_modified_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region modified_by : int?

		private int? _modified_by;
		/// <summary>
		/// 更新者
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, Nullable]
		public  int?  modified_by
		{
			get { return _modified_by; }
			set
			{
				if (_modified_by != value)
				{
					Beforemodified_byChanged(value);
					_modified_by = value;
					Aftermodified_byChanged();

					Onmodified_byChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforemodified_byChanged(int? newValue);
		partial void Aftermodified_byChanged();

		public const string NameOfmodified_by = "modified_by";

		private static readonly PropertyChangedEventArgs _modified_byChangedEventArgs = new PropertyChangedEventArgs(NameOfmodified_by);

		private void Onmodified_byChanged()
		{
			OnPropertyChanged(_modified_byChangedEventArgs);
		}

		#endregion

		#endregion
		#region removed_at : DateTime?

		private DateTime? _removed_at;
		/// <summary>
		/// 削除日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, Nullable]
		public  DateTime?  removed_at
		{
			get { return _removed_at; }
			set
			{
				if (_removed_at != value)
				{
					Beforeremoved_atChanged(value);
					_removed_at = value;
					Afterremoved_atChanged();

					Onremoved_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeremoved_atChanged(DateTime? newValue);
		partial void Afterremoved_atChanged();

		public const string NameOfremoved_at = "removed_at";

		private static readonly PropertyChangedEventArgs _removed_atChangedEventArgs = new PropertyChangedEventArgs(NameOfremoved_at);

		private void Onremoved_atChanged()
		{
			OnPropertyChanged(_removed_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region row_version : byte[]

		private byte[] _row_version;
		/// <summary>
		/// 版
		/// </summary>
		[Column(DbType="timestamp", DataType=DataType.Timestamp, SkipOnInsert=true, SkipOnUpdate=true), DataMember, Nullable]
		public  byte[]  row_version
		{
			get { return _row_version; }
			set
			{
				if (_row_version != value)
				{
					Beforerow_versionChanged(value);
					_row_version = value;
					Afterrow_versionChanged();

					Onrow_versionChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforerow_versionChanged(byte[] newValue);
		partial void Afterrow_versionChanged();

		public const string NameOfrow_version = "row_version";

		private static readonly PropertyChangedEventArgs _row_versionChangedEventArgs = new PropertyChangedEventArgs(NameOfrow_version);

		private void Onrow_versionChanged()
		{
			OnPropertyChanged(_row_versionChangedEventArgs);
		}

		#endregion

		#endregion

		#region enum用アクセスラッパー
		/// <summary>
		/// is_validのenumラッパー
		/// </summary>
		[ColumnAlias("is_valid")]
		public ValidityFlag IsValid
		{
			get => (ValidityFlag)is_valid;
			set => is_valid = value.Val();
		}
		#endregion

		#region Constructor

		public Account()
		{
			#region フィールド初期化
			uid = default(int);
			account_id = 0;
			staff_no = null;
			teacher_no = null;
			student_no = null;
			out_student_no = null;
			parent_no = null;
			user_no = null;
			is_valid = 1;
			created_at = DateTime.UtcNow;
			created_by = null;
			modified_at = DateTime.UtcNow;
			modified_by = null;
			removed_at = null;
			row_version = default(byte[]);
			#endregion
		}

		#endregion

		#region Association

		#region Staff : staff_no (FK_Account_Staff)

		private Staff _Staff;
		/// <summary>
		/// FK_Account_Staff
		/// </summary>
		[Association(ThisKey="staff_no", OtherKey="staff_no", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_Account_Staff", BackReferenceName="Account"), DataMember]
		public  Staff  Staff
		{
			get { return _Staff; }
			set
			{
				if (_Staff != value)
				{
					BeforeStaffChanged(value);
					_Staff = value;
					AfterStaffChanged();

					OnStaffChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeStaffChanged(Staff newValue);
		partial void AfterStaffChanged ();

		public const string NameOfStaff = "Staff";

		private static readonly PropertyChangedEventArgs _StaffChangedEventArgs = new PropertyChangedEventArgs(NameOfStaff);

		private void OnStaffChanged()
		{
			OnPropertyChanged(_StaffChangedEventArgs);
		}

		#endregion

		#endregion
		#region Teacher : teacher_no (FK_Account_Teacher)

		private Teacher _Teacher;
		/// <summary>
		/// FK_Account_Teacher
		/// </summary>
		[Association(ThisKey="teacher_no", OtherKey="teacher_no", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_Account_Teacher", BackReferenceName="Account"), DataMember]
		public  Teacher  Teacher
		{
			get { return _Teacher; }
			set
			{
				if (_Teacher != value)
				{
					BeforeTeacherChanged(value);
					_Teacher = value;
					AfterTeacherChanged();

					OnTeacherChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeTeacherChanged(Teacher newValue);
		partial void AfterTeacherChanged ();

		public const string NameOfTeacher = "Teacher";

		private static readonly PropertyChangedEventArgs _TeacherChangedEventArgs = new PropertyChangedEventArgs(NameOfTeacher);

		private void OnTeacherChanged()
		{
			OnPropertyChanged(_TeacherChangedEventArgs);
		}

		#endregion

		#endregion
		#region User : user_no (FK_Account_User)

		private User _User;
		/// <summary>
		/// FK_Account_User
		/// </summary>
		[Association(ThisKey="user_no", OtherKey="user_no", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_Account_User", BackReferenceName="Account"), DataMember]
		public  User  User
		{
			get { return _User; }
			set
			{
				if (_User != value)
				{
					BeforeUserChanged(value);
					_User = value;
					AfterUserChanged();

					OnUserChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeUserChanged(User newValue);
		partial void AfterUserChanged ();

		public const string NameOfUser = "User";

		private static readonly PropertyChangedEventArgs _UserChangedEventArgs = new PropertyChangedEventArgs(NameOfUser);

		private void OnUserChanged()
		{
			OnPropertyChanged(_UserChangedEventArgs);
		}

		#endregion

		#endregion
		#region IEnumerable<AccountRole> : account_id to AccountRole : account_id (FK_Account_AccountRole)

		private IEnumerable<AccountRole> _AccountRoleList;
		/// <summary>
		/// FK_Account_AccountRole_BackReference
		/// </summary>
		[Association(ThisKey="account_id", OtherKey="account_id", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true), DataMember]
		public  IEnumerable<AccountRole>  AccountRoleList
		{
			get { return _AccountRoleList; }
			set
			{
				if (_AccountRoleList != value)
				{
					BeforeAccountRoleListChanged(value);
					_AccountRoleList = value;
					AfterAccountRoleListChanged();

					OnAccountRoleListChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeAccountRoleListChanged(IEnumerable<AccountRole> newValue);
		partial void AfterAccountRoleListChanged ();

		public const string NameOfAccountRoleList = "AccountRoleList";

		private static readonly PropertyChangedEventArgs _AccountRoleListChangedEventArgs = new PropertyChangedEventArgs(NameOfAccountRoleList);

		private void OnAccountRoleListChanged()
		{
			OnPropertyChanged(_AccountRoleListChangedEventArgs);
		}

		#endregion

		#endregion
		#region IEnumerable<Password> : account_id to Password : account_id (FK_Account_Password)

		private IEnumerable<Password> _PasswordList;
		/// <summary>
		/// FK_Account_Password_BackReference
		/// </summary>
		[Association(ThisKey="account_id", OtherKey="account_id", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true), DataMember]
		public  IEnumerable<Password>  PasswordList
		{
			get { return _PasswordList; }
			set
			{
				if (_PasswordList != value)
				{
					BeforePasswordListChanged(value);
					_PasswordList = value;
					AfterPasswordListChanged();

					OnPasswordListChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforePasswordListChanged(IEnumerable<Password> newValue);
		partial void AfterPasswordListChanged ();

		public const string NameOfPasswordList = "PasswordList";

		private static readonly PropertyChangedEventArgs _PasswordListChangedEventArgs = new PropertyChangedEventArgs(NameOfPasswordList);

		private void OnPasswordListChanged()
		{
			OnPropertyChanged(_PasswordListChangedEventArgs);
		}

		#endregion

		#endregion

		#endregion

		#region INotifyPropertyChanged support

		[field : NonSerialized]
		public virtual event PropertyChangedEventHandler PropertyChanged;

		protected void OnPropertyChanged(string propertyName)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		protected void OnPropertyChanged(PropertyChangedEventArgs arg)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, arg);
			}
		}

		#endregion

	}
	#region アカウント条件
	/// <summary>
	/// アカウント条件
	/// </summary>
	[DataContract]
	public partial class AccountCondition : AccountConditionBase
	{
	}

	/// <summary>
	/// アカウント条件ベース
	/// </summary>
	[DataContract]
	public class AccountConditionBase : ConditionBase<Account>
	{
		#region properties
		#region uid
		/// <summary>
		/// uid_eqと等しい
		/// </summary>
		[DataMember] public int? uid_eq { get; set; }
		/// <summary>
		/// uid_neと等しくない
		/// </summary>
		[DataMember] public int? uid_ne { get; set; }
		/// <summary>
		/// uid_ltより小さい
		/// </summary>
		[DataMember] public int? uid_lt { get; set; }
		/// <summary>
		/// uid_gtより大きい
		/// </summary>
		[DataMember] public int? uid_gt { get; set; }
		/// <summary>
		/// uid_le以下
		/// </summary>
		[DataMember] public int? uid_le { get; set; }
		/// <summary>
		/// uid_ge以上
		/// </summary>
		[DataMember] public int? uid_ge { get; set; }
		/// <summary>
		/// uid_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> uid_in { get; set; }
		/// <summary>
		/// uid_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> uid_ni { get; set; }
		/// <summary>
		/// uid_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? uid_between { get; set; }
		#endregion
		#region account_id
		/// <summary>
		/// account_id_eqと等しい
		/// </summary>
		[DataMember] public int? account_id_eq { get; set; }
		/// <summary>
		/// account_id_neと等しくない
		/// </summary>
		[DataMember] public int? account_id_ne { get; set; }
		/// <summary>
		/// account_id_ltより小さい
		/// </summary>
		[DataMember] public int? account_id_lt { get; set; }
		/// <summary>
		/// account_id_gtより大きい
		/// </summary>
		[DataMember] public int? account_id_gt { get; set; }
		/// <summary>
		/// account_id_le以下
		/// </summary>
		[DataMember] public int? account_id_le { get; set; }
		/// <summary>
		/// account_id_ge以上
		/// </summary>
		[DataMember] public int? account_id_ge { get; set; }
		/// <summary>
		/// account_id_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> account_id_in { get; set; }
		/// <summary>
		/// account_id_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> account_id_ni { get; set; }
		/// <summary>
		/// account_id_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? account_id_between { get; set; }
		#endregion
		#region staff_no
		/// <summary>
		/// staff_no_eqと等しい
		/// </summary>
		[DataMember] public string staff_no_eq { get; set; }
		/// <summary>
		/// staff_no_neと等しくない
		/// </summary>
		[DataMember] public string staff_no_ne { get; set; }
		/// <summary>
		/// staff_no_ltより小さい
		/// </summary>
		[DataMember] public string staff_no_lt { get; set; }
		/// <summary>
		/// staff_no_gtより大きい
		/// </summary>
		[DataMember] public string staff_no_gt { get; set; }
		/// <summary>
		/// staff_no_le以下
		/// </summary>
		[DataMember] public string staff_no_le { get; set; }
		/// <summary>
		/// staff_no_ge以上
		/// </summary>
		[DataMember] public string staff_no_ge { get; set; }
		/// <summary>
		/// staff_no_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> staff_no_in { get; set; }
		/// <summary>
		/// staff_no_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> staff_no_ni { get; set; }
		/// <summary>
		/// staff_no_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? staff_no_between { get; set; }
		/// <summary>
		/// staff_noがNULLか
		/// </summary>
		[DataMember] public bool staff_no_isnull { get; set; } =  false ;
		/// <summary>
		/// staff_noがNULLではないか
		/// </summary>
		[DataMember] public bool staff_no_isnotnull { get; set; } = false;
		/// <summary>
		/// staff_no_likeと部分一致する
		/// </summary>
		[DataMember] public string staff_no_like { get; set; }
		#endregion
		#region teacher_no
		/// <summary>
		/// teacher_no_eqと等しい
		/// </summary>
		[DataMember] public string teacher_no_eq { get; set; }
		/// <summary>
		/// teacher_no_neと等しくない
		/// </summary>
		[DataMember] public string teacher_no_ne { get; set; }
		/// <summary>
		/// teacher_no_ltより小さい
		/// </summary>
		[DataMember] public string teacher_no_lt { get; set; }
		/// <summary>
		/// teacher_no_gtより大きい
		/// </summary>
		[DataMember] public string teacher_no_gt { get; set; }
		/// <summary>
		/// teacher_no_le以下
		/// </summary>
		[DataMember] public string teacher_no_le { get; set; }
		/// <summary>
		/// teacher_no_ge以上
		/// </summary>
		[DataMember] public string teacher_no_ge { get; set; }
		/// <summary>
		/// teacher_no_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> teacher_no_in { get; set; }
		/// <summary>
		/// teacher_no_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> teacher_no_ni { get; set; }
		/// <summary>
		/// teacher_no_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? teacher_no_between { get; set; }
		/// <summary>
		/// teacher_noがNULLか
		/// </summary>
		[DataMember] public bool teacher_no_isnull { get; set; } =  false ;
		/// <summary>
		/// teacher_noがNULLではないか
		/// </summary>
		[DataMember] public bool teacher_no_isnotnull { get; set; } = false;
		/// <summary>
		/// teacher_no_likeと部分一致する
		/// </summary>
		[DataMember] public string teacher_no_like { get; set; }
		#endregion
		#region student_no
		/// <summary>
		/// student_no_eqと等しい
		/// </summary>
		[DataMember] public string student_no_eq { get; set; }
		/// <summary>
		/// student_no_neと等しくない
		/// </summary>
		[DataMember] public string student_no_ne { get; set; }
		/// <summary>
		/// student_no_ltより小さい
		/// </summary>
		[DataMember] public string student_no_lt { get; set; }
		/// <summary>
		/// student_no_gtより大きい
		/// </summary>
		[DataMember] public string student_no_gt { get; set; }
		/// <summary>
		/// student_no_le以下
		/// </summary>
		[DataMember] public string student_no_le { get; set; }
		/// <summary>
		/// student_no_ge以上
		/// </summary>
		[DataMember] public string student_no_ge { get; set; }
		/// <summary>
		/// student_no_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> student_no_in { get; set; }
		/// <summary>
		/// student_no_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> student_no_ni { get; set; }
		/// <summary>
		/// student_no_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? student_no_between { get; set; }
		/// <summary>
		/// student_noがNULLか
		/// </summary>
		[DataMember] public bool student_no_isnull { get; set; } =  false ;
		/// <summary>
		/// student_noがNULLではないか
		/// </summary>
		[DataMember] public bool student_no_isnotnull { get; set; } = false;
		/// <summary>
		/// student_no_likeと部分一致する
		/// </summary>
		[DataMember] public string student_no_like { get; set; }
		#endregion
		#region out_student_no
		/// <summary>
		/// out_student_no_eqと等しい
		/// </summary>
		[DataMember] public string out_student_no_eq { get; set; }
		/// <summary>
		/// out_student_no_neと等しくない
		/// </summary>
		[DataMember] public string out_student_no_ne { get; set; }
		/// <summary>
		/// out_student_no_ltより小さい
		/// </summary>
		[DataMember] public string out_student_no_lt { get; set; }
		/// <summary>
		/// out_student_no_gtより大きい
		/// </summary>
		[DataMember] public string out_student_no_gt { get; set; }
		/// <summary>
		/// out_student_no_le以下
		/// </summary>
		[DataMember] public string out_student_no_le { get; set; }
		/// <summary>
		/// out_student_no_ge以上
		/// </summary>
		[DataMember] public string out_student_no_ge { get; set; }
		/// <summary>
		/// out_student_no_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> out_student_no_in { get; set; }
		/// <summary>
		/// out_student_no_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> out_student_no_ni { get; set; }
		/// <summary>
		/// out_student_no_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? out_student_no_between { get; set; }
		/// <summary>
		/// out_student_noがNULLか
		/// </summary>
		[DataMember] public bool out_student_no_isnull { get; set; } =  false ;
		/// <summary>
		/// out_student_noがNULLではないか
		/// </summary>
		[DataMember] public bool out_student_no_isnotnull { get; set; } = false;
		/// <summary>
		/// out_student_no_likeと部分一致する
		/// </summary>
		[DataMember] public string out_student_no_like { get; set; }
		#endregion
		#region parent_no
		/// <summary>
		/// parent_no_eqと等しい
		/// </summary>
		[DataMember] public string parent_no_eq { get; set; }
		/// <summary>
		/// parent_no_neと等しくない
		/// </summary>
		[DataMember] public string parent_no_ne { get; set; }
		/// <summary>
		/// parent_no_ltより小さい
		/// </summary>
		[DataMember] public string parent_no_lt { get; set; }
		/// <summary>
		/// parent_no_gtより大きい
		/// </summary>
		[DataMember] public string parent_no_gt { get; set; }
		/// <summary>
		/// parent_no_le以下
		/// </summary>
		[DataMember] public string parent_no_le { get; set; }
		/// <summary>
		/// parent_no_ge以上
		/// </summary>
		[DataMember] public string parent_no_ge { get; set; }
		/// <summary>
		/// parent_no_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> parent_no_in { get; set; }
		/// <summary>
		/// parent_no_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> parent_no_ni { get; set; }
		/// <summary>
		/// parent_no_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? parent_no_between { get; set; }
		/// <summary>
		/// parent_noがNULLか
		/// </summary>
		[DataMember] public bool parent_no_isnull { get; set; } =  false ;
		/// <summary>
		/// parent_noがNULLではないか
		/// </summary>
		[DataMember] public bool parent_no_isnotnull { get; set; } = false;
		/// <summary>
		/// parent_no_likeと部分一致する
		/// </summary>
		[DataMember] public string parent_no_like { get; set; }
		#endregion
		#region user_no
		/// <summary>
		/// user_no_eqと等しい
		/// </summary>
		[DataMember] public string user_no_eq { get; set; }
		/// <summary>
		/// user_no_neと等しくない
		/// </summary>
		[DataMember] public string user_no_ne { get; set; }
		/// <summary>
		/// user_no_ltより小さい
		/// </summary>
		[DataMember] public string user_no_lt { get; set; }
		/// <summary>
		/// user_no_gtより大きい
		/// </summary>
		[DataMember] public string user_no_gt { get; set; }
		/// <summary>
		/// user_no_le以下
		/// </summary>
		[DataMember] public string user_no_le { get; set; }
		/// <summary>
		/// user_no_ge以上
		/// </summary>
		[DataMember] public string user_no_ge { get; set; }
		/// <summary>
		/// user_no_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> user_no_in { get; set; }
		/// <summary>
		/// user_no_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> user_no_ni { get; set; }
		/// <summary>
		/// user_no_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? user_no_between { get; set; }
		/// <summary>
		/// user_noがNULLか
		/// </summary>
		[DataMember] public bool user_no_isnull { get; set; } =  false ;
		/// <summary>
		/// user_noがNULLではないか
		/// </summary>
		[DataMember] public bool user_no_isnotnull { get; set; } = false;
		/// <summary>
		/// user_no_likeと部分一致する
		/// </summary>
		[DataMember] public string user_no_like { get; set; }
		#endregion
		#region is_valid (IsValid)
		private int? _is_valid_eq;
		/// <summary>
		/// IsValid_eqと等しい
		/// </summary>
		[DataMember] public ValidityFlag? IsValid_eq
		{
			get => _is_valid_eq?.ToValidityFlag();
			set => _is_valid_eq = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _is_valid_ne;
		/// <summary>
		/// IsValid_neと等しくない
		/// </summary>
		[DataMember] public ValidityFlag? IsValid_ne
		{
			get => _is_valid_ne?.ToValidityFlag();
			set => _is_valid_ne = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _is_valid_lt;
		/// <summary>
		/// IsValid_ltより小さい
		/// </summary>
		[DataMember] public ValidityFlag? IsValid_lt
		{
			get => _is_valid_lt?.ToValidityFlag();
			set => _is_valid_lt = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _is_valid_gt;
		/// <summary>
		/// IsValid_gtより大きい
		/// </summary>
		[DataMember] public ValidityFlag? IsValid_gt
		{
			get => _is_valid_gt?.ToValidityFlag();
			set => _is_valid_gt = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _is_valid_le;
		/// <summary>
		/// IsValid_le以下
		/// </summary>
		[DataMember] public ValidityFlag? IsValid_le
		{
			get => _is_valid_le?.ToValidityFlag();
			set => _is_valid_le = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _is_valid_ge;
		/// <summary>
		/// IsValid_ge以上
		/// </summary>
		[DataMember] public ValidityFlag? IsValid_ge
		{
			get => _is_valid_ge?.ToValidityFlag();
			set => _is_valid_ge = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private IEnumerable<int> _is_valid_in;
		/// <summary>
		/// IsValid_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<ValidityFlag> IsValid_in
		{
			get => _is_valid_in?.Select(_ => _.ToValidityFlag().Value) ?? Enumerable.Empty<ValidityFlag>();
			set => _is_valid_in = value.Select(_ => _.Val());
		}
		private IEnumerable<int> _is_valid_ni;
		/// <summary>
		/// IsValid_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<ValidityFlag> IsValid_ni
		{
			get => _is_valid_ni?.Select(_ => _.ToValidityFlag().Value) ?? Enumerable.Empty<ValidityFlag>();
			set => _is_valid_ni = value.Select(_ => _.Val());
		}
		private (int low, int high)? _is_valid_between;
		/// <summary>
		/// IsValid_betweenの範囲内にある
		/// </summary>
		[DataMember] public (ValidityFlag low, ValidityFlag high)? IsValid_between
		{
			get => _is_valid_between.HasValue ? (_is_valid_between.Value.low.ToValidityFlag().Value, _is_valid_between.Value.high.ToValidityFlag().Value) : ((ValidityFlag, ValidityFlag)?)null;
			set => _is_valid_between = value.HasValue ? (value.Value.low.Val(), value.Value.high.Val()) : ((int, int)?)null;
		}
		#endregion
		#region created_at
		/// <summary>
		/// created_at_eqと等しい
		/// </summary>
		[DataMember] public DateTime? created_at_eq { get; set; }
		/// <summary>
		/// created_at_neと等しくない
		/// </summary>
		[DataMember] public DateTime? created_at_ne { get; set; }
		/// <summary>
		/// created_at_ltより小さい
		/// </summary>
		[DataMember] public DateTime? created_at_lt { get; set; }
		/// <summary>
		/// created_at_gtより大きい
		/// </summary>
		[DataMember] public DateTime? created_at_gt { get; set; }
		/// <summary>
		/// created_at_le以下
		/// </summary>
		[DataMember] public DateTime? created_at_le { get; set; }
		/// <summary>
		/// created_at_ge以上
		/// </summary>
		[DataMember] public DateTime? created_at_ge { get; set; }
		/// <summary>
		/// created_at_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> created_at_in { get; set; }
		/// <summary>
		/// created_at_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> created_at_ni { get; set; }
		/// <summary>
		/// created_at_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? created_at_between { get; set; }
		#endregion
		#region created_by
		/// <summary>
		/// created_by_eqと等しい
		/// </summary>
		[DataMember] public int? created_by_eq { get; set; }
		/// <summary>
		/// created_by_neと等しくない
		/// </summary>
		[DataMember] public int? created_by_ne { get; set; }
		/// <summary>
		/// created_by_ltより小さい
		/// </summary>
		[DataMember] public int? created_by_lt { get; set; }
		/// <summary>
		/// created_by_gtより大きい
		/// </summary>
		[DataMember] public int? created_by_gt { get; set; }
		/// <summary>
		/// created_by_le以下
		/// </summary>
		[DataMember] public int? created_by_le { get; set; }
		/// <summary>
		/// created_by_ge以上
		/// </summary>
		[DataMember] public int? created_by_ge { get; set; }
		/// <summary>
		/// created_by_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> created_by_in { get; set; }
		/// <summary>
		/// created_by_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> created_by_ni { get; set; }
		/// <summary>
		/// created_by_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? created_by_between { get; set; }
		/// <summary>
		/// created_byがNULLか
		/// </summary>
		[DataMember] public bool created_by_isnull { get; set; } =  false ;
		/// <summary>
		/// created_byがNULLではないか
		/// </summary>
		[DataMember] public bool created_by_isnotnull { get; set; } = false;
		#endregion
		#region modified_at
		/// <summary>
		/// modified_at_eqと等しい
		/// </summary>
		[DataMember] public DateTime? modified_at_eq { get; set; }
		/// <summary>
		/// modified_at_neと等しくない
		/// </summary>
		[DataMember] public DateTime? modified_at_ne { get; set; }
		/// <summary>
		/// modified_at_ltより小さい
		/// </summary>
		[DataMember] public DateTime? modified_at_lt { get; set; }
		/// <summary>
		/// modified_at_gtより大きい
		/// </summary>
		[DataMember] public DateTime? modified_at_gt { get; set; }
		/// <summary>
		/// modified_at_le以下
		/// </summary>
		[DataMember] public DateTime? modified_at_le { get; set; }
		/// <summary>
		/// modified_at_ge以上
		/// </summary>
		[DataMember] public DateTime? modified_at_ge { get; set; }
		/// <summary>
		/// modified_at_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> modified_at_in { get; set; }
		/// <summary>
		/// modified_at_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> modified_at_ni { get; set; }
		/// <summary>
		/// modified_at_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? modified_at_between { get; set; }
		#endregion
		#region modified_by
		/// <summary>
		/// modified_by_eqと等しい
		/// </summary>
		[DataMember] public int? modified_by_eq { get; set; }
		/// <summary>
		/// modified_by_neと等しくない
		/// </summary>
		[DataMember] public int? modified_by_ne { get; set; }
		/// <summary>
		/// modified_by_ltより小さい
		/// </summary>
		[DataMember] public int? modified_by_lt { get; set; }
		/// <summary>
		/// modified_by_gtより大きい
		/// </summary>
		[DataMember] public int? modified_by_gt { get; set; }
		/// <summary>
		/// modified_by_le以下
		/// </summary>
		[DataMember] public int? modified_by_le { get; set; }
		/// <summary>
		/// modified_by_ge以上
		/// </summary>
		[DataMember] public int? modified_by_ge { get; set; }
		/// <summary>
		/// modified_by_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> modified_by_in { get; set; }
		/// <summary>
		/// modified_by_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> modified_by_ni { get; set; }
		/// <summary>
		/// modified_by_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? modified_by_between { get; set; }
		/// <summary>
		/// modified_byがNULLか
		/// </summary>
		[DataMember] public bool modified_by_isnull { get; set; } =  false ;
		/// <summary>
		/// modified_byがNULLではないか
		/// </summary>
		[DataMember] public bool modified_by_isnotnull { get; set; } = false;
		#endregion
		#region removed_at
		/// <summary>
		/// removed_at_eqと等しい
		/// </summary>
		[DataMember] public DateTime? removed_at_eq { get; set; }
		/// <summary>
		/// removed_at_neと等しくない
		/// </summary>
		[DataMember] public DateTime? removed_at_ne { get; set; }
		/// <summary>
		/// removed_at_ltより小さい
		/// </summary>
		[DataMember] public DateTime? removed_at_lt { get; set; }
		/// <summary>
		/// removed_at_gtより大きい
		/// </summary>
		[DataMember] public DateTime? removed_at_gt { get; set; }
		/// <summary>
		/// removed_at_le以下
		/// </summary>
		[DataMember] public DateTime? removed_at_le { get; set; }
		/// <summary>
		/// removed_at_ge以上
		/// </summary>
		[DataMember] public DateTime? removed_at_ge { get; set; }
		/// <summary>
		/// removed_at_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> removed_at_in { get; set; }
		/// <summary>
		/// removed_at_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> removed_at_ni { get; set; }
		/// <summary>
		/// removed_at_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? removed_at_between { get; set; }
		/// <summary>
		/// removed_atがNULLか
		/// </summary>
		[DataMember] public bool removed_at_isnull { get; set; } =  true ;
		/// <summary>
		/// removed_atがNULLではないか
		/// </summary>
		[DataMember] public bool removed_at_isnotnull { get; set; } = false;
		#endregion
		#region row_version
		/// <summary>
		/// row_version_eqと等しい
		/// </summary>
		[DataMember] public byte[] row_version_eq { get; set; }
		/// <summary>
		/// row_version_neと等しくない
		/// </summary>
		[DataMember] public byte[] row_version_ne { get; set; }
		/// <summary>
		/// row_versionがNULLか
		/// </summary>
		[DataMember] public bool row_version_isnull { get; set; } =  false ;
		/// <summary>
		/// row_versionがNULLではないか
		/// </summary>
		[DataMember] public bool row_version_isnotnull { get; set; } = false;
		#endregion
		#endregion

		#region override
		override public Expression<Func<Account, bool>> CreatePredicate()
		{
			var predicate = base.CreatePredicate();

			#region uid
			if (uid_eq != null) predicate = predicate.And(_ => _.uid == uid_eq);
			if (uid_ne != null) predicate = predicate.And(_ => _.uid != uid_ne);
			if (uid_lt != null) predicate = predicate.And(_ => _.uid < uid_lt);
			if (uid_gt != null) predicate = predicate.And(_ => _.uid > uid_gt);
			if (uid_le != null) predicate = predicate.And(_ => _.uid <= uid_le);
			if (uid_ge != null) predicate = predicate.And(_ => _.uid >= uid_ge);
			if (uid_in != null) predicate = predicate.And(_ => uid_in.Contains(_.uid));
			if (uid_ni != null) predicate = predicate.And(_ => !uid_ni.Contains(_.uid));
			#endregion
			#region account_id
			if (account_id_eq != null) predicate = predicate.And(_ => _.account_id == account_id_eq);
			if (account_id_ne != null) predicate = predicate.And(_ => _.account_id != account_id_ne);
			if (account_id_lt != null) predicate = predicate.And(_ => _.account_id < account_id_lt);
			if (account_id_gt != null) predicate = predicate.And(_ => _.account_id > account_id_gt);
			if (account_id_le != null) predicate = predicate.And(_ => _.account_id <= account_id_le);
			if (account_id_ge != null) predicate = predicate.And(_ => _.account_id >= account_id_ge);
			if (account_id_in != null) predicate = predicate.And(_ => account_id_in.Contains(_.account_id));
			if (account_id_ni != null) predicate = predicate.And(_ => !account_id_ni.Contains(_.account_id));
			#endregion
			#region staff_no
			if (staff_no_eq != null) predicate = predicate.And(_ => _.staff_no == staff_no_eq);
			if (staff_no_ne != null) predicate = predicate.And(_ => _.staff_no != staff_no_ne);
			if (staff_no_lt != null) predicate = predicate.And(_ => staff_no_lt.CompareTo(_.staff_no) > 0);
			if (staff_no_gt != null) predicate = predicate.And(_ => staff_no_gt.CompareTo(_.staff_no) < 0);
			if (staff_no_le != null) predicate = predicate.And(_ => staff_no_le.CompareTo(_.staff_no) >= 0);
			if (staff_no_ge != null) predicate = predicate.And(_ => staff_no_ge.CompareTo(_.staff_no) <= 0);
			if (staff_no_in != null) predicate = predicate.And(_ => staff_no_in.Contains(_.staff_no));
			if (staff_no_ni != null) predicate = predicate.And(_ => !staff_no_ni.Contains(_.staff_no));
			if (staff_no_isnull) predicate = predicate.And(_ => _.staff_no == null);
			if (staff_no_isnotnull) predicate = predicate.And(_ => _.staff_no != null);
			#endregion
			#region teacher_no
			if (teacher_no_eq != null) predicate = predicate.And(_ => _.teacher_no == teacher_no_eq);
			if (teacher_no_ne != null) predicate = predicate.And(_ => _.teacher_no != teacher_no_ne);
			if (teacher_no_lt != null) predicate = predicate.And(_ => teacher_no_lt.CompareTo(_.teacher_no) > 0);
			if (teacher_no_gt != null) predicate = predicate.And(_ => teacher_no_gt.CompareTo(_.teacher_no) < 0);
			if (teacher_no_le != null) predicate = predicate.And(_ => teacher_no_le.CompareTo(_.teacher_no) >= 0);
			if (teacher_no_ge != null) predicate = predicate.And(_ => teacher_no_ge.CompareTo(_.teacher_no) <= 0);
			if (teacher_no_in != null) predicate = predicate.And(_ => teacher_no_in.Contains(_.teacher_no));
			if (teacher_no_ni != null) predicate = predicate.And(_ => !teacher_no_ni.Contains(_.teacher_no));
			if (teacher_no_isnull) predicate = predicate.And(_ => _.teacher_no == null);
			if (teacher_no_isnotnull) predicate = predicate.And(_ => _.teacher_no != null);
			#endregion
			#region student_no
			if (student_no_eq != null) predicate = predicate.And(_ => _.student_no == student_no_eq);
			if (student_no_ne != null) predicate = predicate.And(_ => _.student_no != student_no_ne);
			if (student_no_lt != null) predicate = predicate.And(_ => student_no_lt.CompareTo(_.student_no) > 0);
			if (student_no_gt != null) predicate = predicate.And(_ => student_no_gt.CompareTo(_.student_no) < 0);
			if (student_no_le != null) predicate = predicate.And(_ => student_no_le.CompareTo(_.student_no) >= 0);
			if (student_no_ge != null) predicate = predicate.And(_ => student_no_ge.CompareTo(_.student_no) <= 0);
			if (student_no_in != null) predicate = predicate.And(_ => student_no_in.Contains(_.student_no));
			if (student_no_ni != null) predicate = predicate.And(_ => !student_no_ni.Contains(_.student_no));
			if (student_no_isnull) predicate = predicate.And(_ => _.student_no == null);
			if (student_no_isnotnull) predicate = predicate.And(_ => _.student_no != null);
			#endregion
			#region out_student_no
			if (out_student_no_eq != null) predicate = predicate.And(_ => _.out_student_no == out_student_no_eq);
			if (out_student_no_ne != null) predicate = predicate.And(_ => _.out_student_no != out_student_no_ne);
			if (out_student_no_lt != null) predicate = predicate.And(_ => out_student_no_lt.CompareTo(_.out_student_no) > 0);
			if (out_student_no_gt != null) predicate = predicate.And(_ => out_student_no_gt.CompareTo(_.out_student_no) < 0);
			if (out_student_no_le != null) predicate = predicate.And(_ => out_student_no_le.CompareTo(_.out_student_no) >= 0);
			if (out_student_no_ge != null) predicate = predicate.And(_ => out_student_no_ge.CompareTo(_.out_student_no) <= 0);
			if (out_student_no_in != null) predicate = predicate.And(_ => out_student_no_in.Contains(_.out_student_no));
			if (out_student_no_ni != null) predicate = predicate.And(_ => !out_student_no_ni.Contains(_.out_student_no));
			if (out_student_no_isnull) predicate = predicate.And(_ => _.out_student_no == null);
			if (out_student_no_isnotnull) predicate = predicate.And(_ => _.out_student_no != null);
			#endregion
			#region parent_no
			if (parent_no_eq != null) predicate = predicate.And(_ => _.parent_no == parent_no_eq);
			if (parent_no_ne != null) predicate = predicate.And(_ => _.parent_no != parent_no_ne);
			if (parent_no_lt != null) predicate = predicate.And(_ => parent_no_lt.CompareTo(_.parent_no) > 0);
			if (parent_no_gt != null) predicate = predicate.And(_ => parent_no_gt.CompareTo(_.parent_no) < 0);
			if (parent_no_le != null) predicate = predicate.And(_ => parent_no_le.CompareTo(_.parent_no) >= 0);
			if (parent_no_ge != null) predicate = predicate.And(_ => parent_no_ge.CompareTo(_.parent_no) <= 0);
			if (parent_no_in != null) predicate = predicate.And(_ => parent_no_in.Contains(_.parent_no));
			if (parent_no_ni != null) predicate = predicate.And(_ => !parent_no_ni.Contains(_.parent_no));
			if (parent_no_isnull) predicate = predicate.And(_ => _.parent_no == null);
			if (parent_no_isnotnull) predicate = predicate.And(_ => _.parent_no != null);
			#endregion
			#region user_no
			if (user_no_eq != null) predicate = predicate.And(_ => _.user_no == user_no_eq);
			if (user_no_ne != null) predicate = predicate.And(_ => _.user_no != user_no_ne);
			if (user_no_lt != null) predicate = predicate.And(_ => user_no_lt.CompareTo(_.user_no) > 0);
			if (user_no_gt != null) predicate = predicate.And(_ => user_no_gt.CompareTo(_.user_no) < 0);
			if (user_no_le != null) predicate = predicate.And(_ => user_no_le.CompareTo(_.user_no) >= 0);
			if (user_no_ge != null) predicate = predicate.And(_ => user_no_ge.CompareTo(_.user_no) <= 0);
			if (user_no_in != null) predicate = predicate.And(_ => user_no_in.Contains(_.user_no));
			if (user_no_ni != null) predicate = predicate.And(_ => !user_no_ni.Contains(_.user_no));
			if (user_no_isnull) predicate = predicate.And(_ => _.user_no == null);
			if (user_no_isnotnull) predicate = predicate.And(_ => _.user_no != null);
			#endregion
			#region is_valid
			if (_is_valid_eq != null) predicate = predicate.And(_ => _.is_valid == _is_valid_eq);
			if (_is_valid_ne != null) predicate = predicate.And(_ => _.is_valid != _is_valid_ne);
			if (_is_valid_lt != null) predicate = predicate.And(_ => _.is_valid < _is_valid_lt);
			if (_is_valid_gt != null) predicate = predicate.And(_ => _.is_valid > _is_valid_gt);
			if (_is_valid_le != null) predicate = predicate.And(_ => _.is_valid <= _is_valid_le);
			if (_is_valid_ge != null) predicate = predicate.And(_ => _.is_valid >= _is_valid_ge);
			if (_is_valid_in != null) predicate = predicate.And(_ => _is_valid_in.Contains(_.is_valid));
			if (_is_valid_ni != null) predicate = predicate.And(_ => !_is_valid_ni.Contains(_.is_valid));
			#endregion
			#region created_at
			if (created_at_eq != null) predicate = predicate.And(_ => _.created_at == created_at_eq);
			if (created_at_ne != null) predicate = predicate.And(_ => _.created_at != created_at_ne);
			if (created_at_lt != null) predicate = predicate.And(_ => _.created_at < created_at_lt);
			if (created_at_gt != null) predicate = predicate.And(_ => _.created_at > created_at_gt);
			if (created_at_le != null) predicate = predicate.And(_ => _.created_at <= created_at_le);
			if (created_at_ge != null) predicate = predicate.And(_ => _.created_at >= created_at_ge);
			if (created_at_in != null) predicate = predicate.And(_ => created_at_in.Contains(_.created_at));
			if (created_at_ni != null) predicate = predicate.And(_ => !created_at_ni.Contains(_.created_at));
			#endregion
			#region created_by
			if (created_by_eq != null) predicate = predicate.And(_ => _.created_by == created_by_eq);
			if (created_by_ne != null) predicate = predicate.And(_ => _.created_by != created_by_ne);
			if (created_by_lt != null) predicate = predicate.And(_ => _.created_by < created_by_lt);
			if (created_by_gt != null) predicate = predicate.And(_ => _.created_by > created_by_gt);
			if (created_by_le != null) predicate = predicate.And(_ => _.created_by <= created_by_le);
			if (created_by_ge != null) predicate = predicate.And(_ => _.created_by >= created_by_ge);
			if (created_by_in != null) predicate = predicate.And(_ => created_by_in.Contains(_.created_by.Value));
			if (created_by_ni != null) predicate = predicate.And(_ => !created_by_ni.Contains(_.created_by.Value));
			if (created_by_isnull) predicate = predicate.And(_ => _.created_by == null);
			if (created_by_isnotnull) predicate = predicate.And(_ => _.created_by != null);
			#endregion
			#region modified_at
			if (modified_at_eq != null) predicate = predicate.And(_ => _.modified_at == modified_at_eq);
			if (modified_at_ne != null) predicate = predicate.And(_ => _.modified_at != modified_at_ne);
			if (modified_at_lt != null) predicate = predicate.And(_ => _.modified_at < modified_at_lt);
			if (modified_at_gt != null) predicate = predicate.And(_ => _.modified_at > modified_at_gt);
			if (modified_at_le != null) predicate = predicate.And(_ => _.modified_at <= modified_at_le);
			if (modified_at_ge != null) predicate = predicate.And(_ => _.modified_at >= modified_at_ge);
			if (modified_at_in != null) predicate = predicate.And(_ => modified_at_in.Contains(_.modified_at));
			if (modified_at_ni != null) predicate = predicate.And(_ => !modified_at_ni.Contains(_.modified_at));
			#endregion
			#region modified_by
			if (modified_by_eq != null) predicate = predicate.And(_ => _.modified_by == modified_by_eq);
			if (modified_by_ne != null) predicate = predicate.And(_ => _.modified_by != modified_by_ne);
			if (modified_by_lt != null) predicate = predicate.And(_ => _.modified_by < modified_by_lt);
			if (modified_by_gt != null) predicate = predicate.And(_ => _.modified_by > modified_by_gt);
			if (modified_by_le != null) predicate = predicate.And(_ => _.modified_by <= modified_by_le);
			if (modified_by_ge != null) predicate = predicate.And(_ => _.modified_by >= modified_by_ge);
			if (modified_by_in != null) predicate = predicate.And(_ => modified_by_in.Contains(_.modified_by.Value));
			if (modified_by_ni != null) predicate = predicate.And(_ => !modified_by_ni.Contains(_.modified_by.Value));
			if (modified_by_isnull) predicate = predicate.And(_ => _.modified_by == null);
			if (modified_by_isnotnull) predicate = predicate.And(_ => _.modified_by != null);
			#endregion
			#region removed_at
			if (removed_at_eq != null) predicate = predicate.And(_ => _.removed_at == removed_at_eq);
			if (removed_at_ne != null) predicate = predicate.And(_ => _.removed_at != removed_at_ne);
			if (removed_at_lt != null) predicate = predicate.And(_ => _.removed_at < removed_at_lt);
			if (removed_at_gt != null) predicate = predicate.And(_ => _.removed_at > removed_at_gt);
			if (removed_at_le != null) predicate = predicate.And(_ => _.removed_at <= removed_at_le);
			if (removed_at_ge != null) predicate = predicate.And(_ => _.removed_at >= removed_at_ge);
			if (removed_at_in != null) predicate = predicate.And(_ => removed_at_in.Contains(_.removed_at.Value));
			if (removed_at_ni != null) predicate = predicate.And(_ => !removed_at_ni.Contains(_.removed_at.Value));
			if (removed_at_isnull) predicate = predicate.And(_ => _.removed_at == null);
			if (removed_at_isnotnull) predicate = predicate.And(_ => _.removed_at != null);
			#endregion
			#region row_version
			if (row_version_eq != null) predicate = predicate.And(_ => _.row_version == row_version_eq);
			if (row_version_ne != null) predicate = predicate.And(_ => _.row_version != row_version_ne);
			if (row_version_isnull) predicate = predicate.And(_ => _.row_version == null);
			if (row_version_isnotnull) predicate = predicate.And(_ => _.row_version != null);
			#endregion

			return predicate;
		}
		#endregion
	}
	#endregion
	#endregion
	#region パスワード認証
	/// <summary>
	/// パスワード認証
	/// </summary>
	[Table(Schema="Core", Name="Password"), DataContract]
	public partial class Password : TableBase<Password>, INotifyPropertyChanged
	{
		#region uid : int

		private int _uid;
		/// <summary>
		/// ユニークID
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull, Identity]
		public  int  uid
		{
			get { return _uid; }
			set
			{
				if (_uid != value)
				{
					BeforeuidChanged(value);
					_uid = value;
					AfteruidChanged();

					OnuidChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeuidChanged(int newValue);
		partial void AfteruidChanged();

		public const string NameOfuid = "uid";

		private static readonly PropertyChangedEventArgs _uidChangedEventArgs = new PropertyChangedEventArgs(NameOfuid);

		private void OnuidChanged()
		{
			OnPropertyChanged(_uidChangedEventArgs);
		}

		#endregion

		#endregion
		#region account_id : int

		private int _account_id;
		/// <summary>
		/// アカウントID
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull, PrimaryKey(Order = 1)]
		public  int  account_id
		{
			get { return _account_id; }
			set
			{
				if (_account_id != value)
				{
					Beforeaccount_idChanged(value);
					_account_id = value;
					Afteraccount_idChanged();

					Onaccount_idChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeaccount_idChanged(int newValue);
		partial void Afteraccount_idChanged();

		public const string NameOfaccount_id = "account_id";

		private static readonly PropertyChangedEventArgs _account_idChangedEventArgs = new PropertyChangedEventArgs(NameOfaccount_id);

		private void Onaccount_idChanged()
		{
			OnPropertyChanged(_account_idChangedEventArgs);
		}

		#endregion

		#endregion
		#region password_hash : string

		private string _password_hash;
		/// <summary>
		/// パスワードハッシュ
		/// </summary>
		[Column(DbType="varchar(128)", DataType=DataType.VarChar, Length=128), DataMember, NotNull]
		public  string  password_hash
		{
			get { return _password_hash; }
			set
			{
				if (_password_hash != value)
				{
					Beforepassword_hashChanged(value);
					_password_hash = value;
					Afterpassword_hashChanged();

					Onpassword_hashChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforepassword_hashChanged(string newValue);
		partial void Afterpassword_hashChanged();

		public const string NameOfpassword_hash = "password_hash";

		private static readonly PropertyChangedEventArgs _password_hashChangedEventArgs = new PropertyChangedEventArgs(NameOfpassword_hash);

		private void Onpassword_hashChanged()
		{
			OnPropertyChanged(_password_hashChangedEventArgs);
		}

		#endregion

		#endregion
		#region hash_type : string

		private string _hash_type;
		/// <summary>
		/// ハッシュ化方式
		/// </summary>
		[Column(DbType="varchar(16)", DataType=DataType.VarChar, Length=16), DataMember, NotNull]
		public  string  hash_type
		{
			get { return _hash_type; }
			set
			{
				if (_hash_type != value)
				{
					Beforehash_typeChanged(value);
					_hash_type = value;
					Afterhash_typeChanged();

					Onhash_typeChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforehash_typeChanged(string newValue);
		partial void Afterhash_typeChanged();

		public const string NameOfhash_type = "hash_type";

		private static readonly PropertyChangedEventArgs _hash_typeChangedEventArgs = new PropertyChangedEventArgs(NameOfhash_type);

		private void Onhash_typeChanged()
		{
			OnPropertyChanged(_hash_typeChangedEventArgs);
		}

		#endregion

		#endregion
		#region expiration_on : DateTime?

		private DateTime? _expiration_on;
		/// <summary>
		/// 有効期限
		/// </summary>
		[Column(DbType="date", DataType=DataType.Date), DataMember, Nullable]
		public  DateTime?  expiration_on
		{
			get { return _expiration_on; }
			set
			{
				if (_expiration_on != value)
				{
					Beforeexpiration_onChanged(value);
					_expiration_on = value;
					Afterexpiration_onChanged();

					Onexpiration_onChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeexpiration_onChanged(DateTime? newValue);
		partial void Afterexpiration_onChanged();

		public const string NameOfexpiration_on = "expiration_on";

		private static readonly PropertyChangedEventArgs _expiration_onChangedEventArgs = new PropertyChangedEventArgs(NameOfexpiration_on);

		private void Onexpiration_onChanged()
		{
			OnPropertyChanged(_expiration_onChangedEventArgs);
		}

		#endregion

		#endregion
		#region password_life_days : int?

		private int? _password_life_days;
		/// <summary>
		/// 更新間隔
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, Nullable]
		public  int?  password_life_days
		{
			get { return _password_life_days; }
			set
			{
				if (_password_life_days != value)
				{
					Beforepassword_life_daysChanged(value);
					_password_life_days = value;
					Afterpassword_life_daysChanged();

					Onpassword_life_daysChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforepassword_life_daysChanged(int? newValue);
		partial void Afterpassword_life_daysChanged();

		public const string NameOfpassword_life_days = "password_life_days";

		private static readonly PropertyChangedEventArgs _password_life_daysChangedEventArgs = new PropertyChangedEventArgs(NameOfpassword_life_days);

		private void Onpassword_life_daysChanged()
		{
			OnPropertyChanged(_password_life_daysChangedEventArgs);
		}

		#endregion

		#endregion
		#region can_fail_times : int

		private int _can_fail_times;
		/// <summary>
		/// 連続失敗許容回数
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull]
		public  int  can_fail_times
		{
			get { return _can_fail_times; }
			set
			{
				if (_can_fail_times != value)
				{
					Beforecan_fail_timesChanged(value);
					_can_fail_times = value;
					Aftercan_fail_timesChanged();

					Oncan_fail_timesChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecan_fail_timesChanged(int newValue);
		partial void Aftercan_fail_timesChanged();

		public const string NameOfcan_fail_times = "can_fail_times";

		private static readonly PropertyChangedEventArgs _can_fail_timesChangedEventArgs = new PropertyChangedEventArgs(NameOfcan_fail_times);

		private void Oncan_fail_timesChanged()
		{
			OnPropertyChanged(_can_fail_timesChangedEventArgs);
		}

		#endregion

		#endregion
		#region fail_times : int

		private int _fail_times;
		/// <summary>
		/// 連続失敗回数
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull]
		public  int  fail_times
		{
			get { return _fail_times; }
			set
			{
				if (_fail_times != value)
				{
					Beforefail_timesChanged(value);
					_fail_times = value;
					Afterfail_timesChanged();

					Onfail_timesChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforefail_timesChanged(int newValue);
		partial void Afterfail_timesChanged();

		public const string NameOffail_times = "fail_times";

		private static readonly PropertyChangedEventArgs _fail_timesChangedEventArgs = new PropertyChangedEventArgs(NameOffail_times);

		private void Onfail_timesChanged()
		{
			OnPropertyChanged(_fail_timesChangedEventArgs);
		}

		#endregion

		#endregion
		#region lock_flg : int

		private int _lock_flg;
		/// <summary>
		/// ロックフラグ
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull]
		public  int  lock_flg
		{
			get { return _lock_flg; }
			set
			{
				if (_lock_flg != value)
				{
					Beforelock_flgChanged(value);
					_lock_flg = value;
					Afterlock_flgChanged();

					Onlock_flgChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforelock_flgChanged(int newValue);
		partial void Afterlock_flgChanged();

		public const string NameOflock_flg = "lock_flg";

		private static readonly PropertyChangedEventArgs _lock_flgChangedEventArgs = new PropertyChangedEventArgs(NameOflock_flg);

		private void Onlock_flgChanged()
		{
			OnPropertyChanged(_lock_flgChangedEventArgs);
		}

		#endregion

		#endregion
		#region lock_reason : int?

		private int? _lock_reason;
		/// <summary>
		/// ロック理由
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, Nullable]
		public  int?  lock_reason
		{
			get { return _lock_reason; }
			set
			{
				if (_lock_reason != value)
				{
					Beforelock_reasonChanged(value);
					_lock_reason = value;
					Afterlock_reasonChanged();

					Onlock_reasonChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforelock_reasonChanged(int? newValue);
		partial void Afterlock_reasonChanged();

		public const string NameOflock_reason = "lock_reason";

		private static readonly PropertyChangedEventArgs _lock_reasonChangedEventArgs = new PropertyChangedEventArgs(NameOflock_reason);

		private void Onlock_reasonChanged()
		{
			OnPropertyChanged(_lock_reasonChangedEventArgs);
		}

		#endregion

		#endregion
		#region created_at : DateTime

		private DateTime _created_at;
		/// <summary>
		/// 作成日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, NotNull]
		public  DateTime  created_at
		{
			get { return _created_at; }
			set
			{
				if (_created_at != value)
				{
					Beforecreated_atChanged(value);
					_created_at = value;
					Aftercreated_atChanged();

					Oncreated_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecreated_atChanged(DateTime newValue);
		partial void Aftercreated_atChanged();

		public const string NameOfcreated_at = "created_at";

		private static readonly PropertyChangedEventArgs _created_atChangedEventArgs = new PropertyChangedEventArgs(NameOfcreated_at);

		private void Oncreated_atChanged()
		{
			OnPropertyChanged(_created_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region created_by : int?

		private int? _created_by;
		/// <summary>
		/// 作成者
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, Nullable]
		public  int?  created_by
		{
			get { return _created_by; }
			set
			{
				if (_created_by != value)
				{
					Beforecreated_byChanged(value);
					_created_by = value;
					Aftercreated_byChanged();

					Oncreated_byChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecreated_byChanged(int? newValue);
		partial void Aftercreated_byChanged();

		public const string NameOfcreated_by = "created_by";

		private static readonly PropertyChangedEventArgs _created_byChangedEventArgs = new PropertyChangedEventArgs(NameOfcreated_by);

		private void Oncreated_byChanged()
		{
			OnPropertyChanged(_created_byChangedEventArgs);
		}

		#endregion

		#endregion
		#region modified_at : DateTime

		private DateTime _modified_at;
		/// <summary>
		/// 更新日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, NotNull]
		public  DateTime  modified_at
		{
			get { return _modified_at; }
			set
			{
				if (_modified_at != value)
				{
					Beforemodified_atChanged(value);
					_modified_at = value;
					Aftermodified_atChanged();

					Onmodified_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforemodified_atChanged(DateTime newValue);
		partial void Aftermodified_atChanged();

		public const string NameOfmodified_at = "modified_at";

		private static readonly PropertyChangedEventArgs _modified_atChangedEventArgs = new PropertyChangedEventArgs(NameOfmodified_at);

		private void Onmodified_atChanged()
		{
			OnPropertyChanged(_modified_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region modified_by : int?

		private int? _modified_by;
		/// <summary>
		/// 更新者
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, Nullable]
		public  int?  modified_by
		{
			get { return _modified_by; }
			set
			{
				if (_modified_by != value)
				{
					Beforemodified_byChanged(value);
					_modified_by = value;
					Aftermodified_byChanged();

					Onmodified_byChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforemodified_byChanged(int? newValue);
		partial void Aftermodified_byChanged();

		public const string NameOfmodified_by = "modified_by";

		private static readonly PropertyChangedEventArgs _modified_byChangedEventArgs = new PropertyChangedEventArgs(NameOfmodified_by);

		private void Onmodified_byChanged()
		{
			OnPropertyChanged(_modified_byChangedEventArgs);
		}

		#endregion

		#endregion
		#region removed_at : DateTime?

		private DateTime? _removed_at;
		/// <summary>
		/// 削除日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, Nullable]
		public  DateTime?  removed_at
		{
			get { return _removed_at; }
			set
			{
				if (_removed_at != value)
				{
					Beforeremoved_atChanged(value);
					_removed_at = value;
					Afterremoved_atChanged();

					Onremoved_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeremoved_atChanged(DateTime? newValue);
		partial void Afterremoved_atChanged();

		public const string NameOfremoved_at = "removed_at";

		private static readonly PropertyChangedEventArgs _removed_atChangedEventArgs = new PropertyChangedEventArgs(NameOfremoved_at);

		private void Onremoved_atChanged()
		{
			OnPropertyChanged(_removed_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region row_version : byte[]

		private byte[] _row_version;
		/// <summary>
		/// 版
		/// </summary>
		[Column(DbType="timestamp", DataType=DataType.Timestamp, SkipOnInsert=true, SkipOnUpdate=true), DataMember, Nullable]
		public  byte[]  row_version
		{
			get { return _row_version; }
			set
			{
				if (_row_version != value)
				{
					Beforerow_versionChanged(value);
					_row_version = value;
					Afterrow_versionChanged();

					Onrow_versionChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforerow_versionChanged(byte[] newValue);
		partial void Afterrow_versionChanged();

		public const string NameOfrow_version = "row_version";

		private static readonly PropertyChangedEventArgs _row_versionChangedEventArgs = new PropertyChangedEventArgs(NameOfrow_version);

		private void Onrow_versionChanged()
		{
			OnPropertyChanged(_row_versionChangedEventArgs);
		}

		#endregion

		#endregion

		#region enum用アクセスラッパー
		/// <summary>
		/// hash_typeのenumラッパー
		/// </summary>
		[ColumnAlias("hash_type")]
		public HashMethod HashType
		{
			get
			{
				switch (hash_type)
				{
					case "SHA256":
						return HashMethod.SHA256;
					case "RAW":
						return HashMethod.平文;
					default:
						throw new Exception($"Unknown hash_type: {hash_type}");
				}
			}
			set
			{
				switch (value)
				{
					case HashMethod.SHA256:
						hash_type = "SHA256";
						break;
					case HashMethod.平文:
						hash_type = "RAW";
						break;
					default:
						throw new Exception($"Unknown HashMethod: {value}");
				}
			}
		}
		/// <summary>
		/// lock_reasonのenumラッパー
		/// </summary>
		[ColumnAlias("lock_reason")]
		public LockReason? LockReason
		{
			get => (LockReason?)lock_reason;
			set => lock_reason = value?.Val();
		}
		#endregion

		#region Constructor

		public Password()
		{
			#region フィールド初期化
			uid = default(int);
			account_id = 0;
			password_hash = null;
			hash_type = "SHA256";
			expiration_on = null;
			password_life_days = null;
			can_fail_times = 3;
			fail_times = 0;
			lock_flg = 0;
			lock_reason = 0;
			created_at = DateTime.UtcNow;
			created_by = null;
			modified_at = DateTime.UtcNow;
			modified_by = null;
			removed_at = null;
			row_version = default(byte[]);
			#endregion
		}

		#endregion

		#region Association

		#region Account : account_id (FK_Password_Account)

		private Account _Account;
		/// <summary>
		/// FK_Password_Account
		/// </summary>
		[Association(ThisKey="account_id", OtherKey="account_id", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_Password_Account", BackReferenceName="Password"), DataMember]
		public  Account  Account
		{
			get { return _Account; }
			set
			{
				if (_Account != value)
				{
					BeforeAccountChanged(value);
					_Account = value;
					AfterAccountChanged();

					OnAccountChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeAccountChanged(Account newValue);
		partial void AfterAccountChanged ();

		public const string NameOfAccount = "Account";

		private static readonly PropertyChangedEventArgs _AccountChangedEventArgs = new PropertyChangedEventArgs(NameOfAccount);

		private void OnAccountChanged()
		{
			OnPropertyChanged(_AccountChangedEventArgs);
		}

		#endregion

		#endregion

		#endregion

		#region INotifyPropertyChanged support

		[field : NonSerialized]
		public virtual event PropertyChangedEventHandler PropertyChanged;

		protected void OnPropertyChanged(string propertyName)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		protected void OnPropertyChanged(PropertyChangedEventArgs arg)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, arg);
			}
		}

		#endregion

	}
	#region パスワード認証条件
	/// <summary>
	/// パスワード認証条件
	/// </summary>
	[DataContract]
	public partial class PasswordCondition : PasswordConditionBase
	{
	}

	/// <summary>
	/// パスワード認証条件ベース
	/// </summary>
	[DataContract]
	public class PasswordConditionBase : ConditionBase<Password>
	{
		#region properties
		#region uid
		/// <summary>
		/// uid_eqと等しい
		/// </summary>
		[DataMember] public int? uid_eq { get; set; }
		/// <summary>
		/// uid_neと等しくない
		/// </summary>
		[DataMember] public int? uid_ne { get; set; }
		/// <summary>
		/// uid_ltより小さい
		/// </summary>
		[DataMember] public int? uid_lt { get; set; }
		/// <summary>
		/// uid_gtより大きい
		/// </summary>
		[DataMember] public int? uid_gt { get; set; }
		/// <summary>
		/// uid_le以下
		/// </summary>
		[DataMember] public int? uid_le { get; set; }
		/// <summary>
		/// uid_ge以上
		/// </summary>
		[DataMember] public int? uid_ge { get; set; }
		/// <summary>
		/// uid_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> uid_in { get; set; }
		/// <summary>
		/// uid_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> uid_ni { get; set; }
		/// <summary>
		/// uid_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? uid_between { get; set; }
		#endregion
		#region account_id
		/// <summary>
		/// account_id_eqと等しい
		/// </summary>
		[DataMember] public int? account_id_eq { get; set; }
		/// <summary>
		/// account_id_neと等しくない
		/// </summary>
		[DataMember] public int? account_id_ne { get; set; }
		/// <summary>
		/// account_id_ltより小さい
		/// </summary>
		[DataMember] public int? account_id_lt { get; set; }
		/// <summary>
		/// account_id_gtより大きい
		/// </summary>
		[DataMember] public int? account_id_gt { get; set; }
		/// <summary>
		/// account_id_le以下
		/// </summary>
		[DataMember] public int? account_id_le { get; set; }
		/// <summary>
		/// account_id_ge以上
		/// </summary>
		[DataMember] public int? account_id_ge { get; set; }
		/// <summary>
		/// account_id_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> account_id_in { get; set; }
		/// <summary>
		/// account_id_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> account_id_ni { get; set; }
		/// <summary>
		/// account_id_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? account_id_between { get; set; }
		#endregion
		#region password_hash
		/// <summary>
		/// password_hash_eqと等しい
		/// </summary>
		[DataMember] public string password_hash_eq { get; set; }
		/// <summary>
		/// password_hash_neと等しくない
		/// </summary>
		[DataMember] public string password_hash_ne { get; set; }
		/// <summary>
		/// password_hash_ltより小さい
		/// </summary>
		[DataMember] public string password_hash_lt { get; set; }
		/// <summary>
		/// password_hash_gtより大きい
		/// </summary>
		[DataMember] public string password_hash_gt { get; set; }
		/// <summary>
		/// password_hash_le以下
		/// </summary>
		[DataMember] public string password_hash_le { get; set; }
		/// <summary>
		/// password_hash_ge以上
		/// </summary>
		[DataMember] public string password_hash_ge { get; set; }
		/// <summary>
		/// password_hash_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> password_hash_in { get; set; }
		/// <summary>
		/// password_hash_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> password_hash_ni { get; set; }
		/// <summary>
		/// password_hash_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? password_hash_between { get; set; }
		/// <summary>
		/// password_hash_likeと部分一致する
		/// </summary>
		[DataMember] public string password_hash_like { get; set; }
		#endregion
		#region hash_type (HashType)
		private string _hash_type_eq;
		/// <summary>
		/// HashType_eqと等しい
		/// </summary>
		[DataMember] public HashMethod? HashType_eq
		{
			get => _hash_type_eq?.ToHashMethod();
			set => _hash_type_eq = value.HasValue ? value.Value.Val() : (string)null;
		}
		private string _hash_type_ne;
		/// <summary>
		/// HashType_neと等しくない
		/// </summary>
		[DataMember] public HashMethod? HashType_ne
		{
			get => _hash_type_ne?.ToHashMethod();
			set => _hash_type_ne = value.HasValue ? value.Value.Val() : (string)null;
		}
		private string _hash_type_lt;
		/// <summary>
		/// HashType_ltより小さい
		/// </summary>
		[DataMember] public HashMethod? HashType_lt
		{
			get => _hash_type_lt?.ToHashMethod();
			set => _hash_type_lt = value.HasValue ? value.Value.Val() : (string)null;
		}
		private string _hash_type_gt;
		/// <summary>
		/// HashType_gtより大きい
		/// </summary>
		[DataMember] public HashMethod? HashType_gt
		{
			get => _hash_type_gt?.ToHashMethod();
			set => _hash_type_gt = value.HasValue ? value.Value.Val() : (string)null;
		}
		private string _hash_type_le;
		/// <summary>
		/// HashType_le以下
		/// </summary>
		[DataMember] public HashMethod? HashType_le
		{
			get => _hash_type_le?.ToHashMethod();
			set => _hash_type_le = value.HasValue ? value.Value.Val() : (string)null;
		}
		private string _hash_type_ge;
		/// <summary>
		/// HashType_ge以上
		/// </summary>
		[DataMember] public HashMethod? HashType_ge
		{
			get => _hash_type_ge?.ToHashMethod();
			set => _hash_type_ge = value.HasValue ? value.Value.Val() : (string)null;
		}
		private IEnumerable<string> _hash_type_in;
		/// <summary>
		/// HashType_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<HashMethod> HashType_in
		{
			get => _hash_type_in?.Select(_ => _.ToHashMethod().Value) ?? Enumerable.Empty<HashMethod>();
			set => _hash_type_in = value.Select(_ => _.Val());
		}
		private IEnumerable<string> _hash_type_ni;
		/// <summary>
		/// HashType_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<HashMethod> HashType_ni
		{
			get => _hash_type_ni?.Select(_ => _.ToHashMethod().Value) ?? Enumerable.Empty<HashMethod>();
			set => _hash_type_ni = value.Select(_ => _.Val());
		}
		private (string low, string high)? _hash_type_between;
		/// <summary>
		/// HashType_betweenの範囲内にある
		/// </summary>
		[DataMember] public (HashMethod low, HashMethod high)? HashType_between
		{
			get => _hash_type_between.HasValue ? (_hash_type_between.Value.low.ToHashMethod().Value, _hash_type_between.Value.high.ToHashMethod().Value) : ((HashMethod, HashMethod)?)null;
			set => _hash_type_between = value.HasValue ? (value.Value.low.Val(), value.Value.high.Val()) : ((string, string)?)null;
		}
		#endregion
		#region expiration_on
		/// <summary>
		/// expiration_on_eqと等しい
		/// </summary>
		[DataMember] public DateTime? expiration_on_eq { get; set; }
		/// <summary>
		/// expiration_on_neと等しくない
		/// </summary>
		[DataMember] public DateTime? expiration_on_ne { get; set; }
		/// <summary>
		/// expiration_on_ltより小さい
		/// </summary>
		[DataMember] public DateTime? expiration_on_lt { get; set; }
		/// <summary>
		/// expiration_on_gtより大きい
		/// </summary>
		[DataMember] public DateTime? expiration_on_gt { get; set; }
		/// <summary>
		/// expiration_on_le以下
		/// </summary>
		[DataMember] public DateTime? expiration_on_le { get; set; }
		/// <summary>
		/// expiration_on_ge以上
		/// </summary>
		[DataMember] public DateTime? expiration_on_ge { get; set; }
		/// <summary>
		/// expiration_on_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> expiration_on_in { get; set; }
		/// <summary>
		/// expiration_on_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> expiration_on_ni { get; set; }
		/// <summary>
		/// expiration_on_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? expiration_on_between { get; set; }
		/// <summary>
		/// expiration_onがNULLか
		/// </summary>
		[DataMember] public bool expiration_on_isnull { get; set; } =  false ;
		/// <summary>
		/// expiration_onがNULLではないか
		/// </summary>
		[DataMember] public bool expiration_on_isnotnull { get; set; } = false;
		#endregion
		#region password_life_days
		/// <summary>
		/// password_life_days_eqと等しい
		/// </summary>
		[DataMember] public int? password_life_days_eq { get; set; }
		/// <summary>
		/// password_life_days_neと等しくない
		/// </summary>
		[DataMember] public int? password_life_days_ne { get; set; }
		/// <summary>
		/// password_life_days_ltより小さい
		/// </summary>
		[DataMember] public int? password_life_days_lt { get; set; }
		/// <summary>
		/// password_life_days_gtより大きい
		/// </summary>
		[DataMember] public int? password_life_days_gt { get; set; }
		/// <summary>
		/// password_life_days_le以下
		/// </summary>
		[DataMember] public int? password_life_days_le { get; set; }
		/// <summary>
		/// password_life_days_ge以上
		/// </summary>
		[DataMember] public int? password_life_days_ge { get; set; }
		/// <summary>
		/// password_life_days_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> password_life_days_in { get; set; }
		/// <summary>
		/// password_life_days_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> password_life_days_ni { get; set; }
		/// <summary>
		/// password_life_days_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? password_life_days_between { get; set; }
		/// <summary>
		/// password_life_daysがNULLか
		/// </summary>
		[DataMember] public bool password_life_days_isnull { get; set; } =  false ;
		/// <summary>
		/// password_life_daysがNULLではないか
		/// </summary>
		[DataMember] public bool password_life_days_isnotnull { get; set; } = false;
		#endregion
		#region can_fail_times
		/// <summary>
		/// can_fail_times_eqと等しい
		/// </summary>
		[DataMember] public int? can_fail_times_eq { get; set; }
		/// <summary>
		/// can_fail_times_neと等しくない
		/// </summary>
		[DataMember] public int? can_fail_times_ne { get; set; }
		/// <summary>
		/// can_fail_times_ltより小さい
		/// </summary>
		[DataMember] public int? can_fail_times_lt { get; set; }
		/// <summary>
		/// can_fail_times_gtより大きい
		/// </summary>
		[DataMember] public int? can_fail_times_gt { get; set; }
		/// <summary>
		/// can_fail_times_le以下
		/// </summary>
		[DataMember] public int? can_fail_times_le { get; set; }
		/// <summary>
		/// can_fail_times_ge以上
		/// </summary>
		[DataMember] public int? can_fail_times_ge { get; set; }
		/// <summary>
		/// can_fail_times_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> can_fail_times_in { get; set; }
		/// <summary>
		/// can_fail_times_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> can_fail_times_ni { get; set; }
		/// <summary>
		/// can_fail_times_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? can_fail_times_between { get; set; }
		#endregion
		#region fail_times
		/// <summary>
		/// fail_times_eqと等しい
		/// </summary>
		[DataMember] public int? fail_times_eq { get; set; }
		/// <summary>
		/// fail_times_neと等しくない
		/// </summary>
		[DataMember] public int? fail_times_ne { get; set; }
		/// <summary>
		/// fail_times_ltより小さい
		/// </summary>
		[DataMember] public int? fail_times_lt { get; set; }
		/// <summary>
		/// fail_times_gtより大きい
		/// </summary>
		[DataMember] public int? fail_times_gt { get; set; }
		/// <summary>
		/// fail_times_le以下
		/// </summary>
		[DataMember] public int? fail_times_le { get; set; }
		/// <summary>
		/// fail_times_ge以上
		/// </summary>
		[DataMember] public int? fail_times_ge { get; set; }
		/// <summary>
		/// fail_times_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> fail_times_in { get; set; }
		/// <summary>
		/// fail_times_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> fail_times_ni { get; set; }
		/// <summary>
		/// fail_times_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? fail_times_between { get; set; }
		#endregion
		#region lock_flg
		/// <summary>
		/// lock_flg_eqと等しい
		/// </summary>
		[DataMember] public int? lock_flg_eq { get; set; }
		/// <summary>
		/// lock_flg_neと等しくない
		/// </summary>
		[DataMember] public int? lock_flg_ne { get; set; }
		/// <summary>
		/// lock_flg_ltより小さい
		/// </summary>
		[DataMember] public int? lock_flg_lt { get; set; }
		/// <summary>
		/// lock_flg_gtより大きい
		/// </summary>
		[DataMember] public int? lock_flg_gt { get; set; }
		/// <summary>
		/// lock_flg_le以下
		/// </summary>
		[DataMember] public int? lock_flg_le { get; set; }
		/// <summary>
		/// lock_flg_ge以上
		/// </summary>
		[DataMember] public int? lock_flg_ge { get; set; }
		/// <summary>
		/// lock_flg_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> lock_flg_in { get; set; }
		/// <summary>
		/// lock_flg_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> lock_flg_ni { get; set; }
		/// <summary>
		/// lock_flg_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? lock_flg_between { get; set; }
		#endregion
		#region lock_reason (LockReason)
		private int? _lock_reason_eq;
		/// <summary>
		/// LockReason_eqと等しい
		/// </summary>
		[DataMember] public LockReason? LockReason_eq
		{
			get => _lock_reason_eq?.ToLockReason();
			set => _lock_reason_eq = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _lock_reason_ne;
		/// <summary>
		/// LockReason_neと等しくない
		/// </summary>
		[DataMember] public LockReason? LockReason_ne
		{
			get => _lock_reason_ne?.ToLockReason();
			set => _lock_reason_ne = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _lock_reason_lt;
		/// <summary>
		/// LockReason_ltより小さい
		/// </summary>
		[DataMember] public LockReason? LockReason_lt
		{
			get => _lock_reason_lt?.ToLockReason();
			set => _lock_reason_lt = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _lock_reason_gt;
		/// <summary>
		/// LockReason_gtより大きい
		/// </summary>
		[DataMember] public LockReason? LockReason_gt
		{
			get => _lock_reason_gt?.ToLockReason();
			set => _lock_reason_gt = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _lock_reason_le;
		/// <summary>
		/// LockReason_le以下
		/// </summary>
		[DataMember] public LockReason? LockReason_le
		{
			get => _lock_reason_le?.ToLockReason();
			set => _lock_reason_le = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _lock_reason_ge;
		/// <summary>
		/// LockReason_ge以上
		/// </summary>
		[DataMember] public LockReason? LockReason_ge
		{
			get => _lock_reason_ge?.ToLockReason();
			set => _lock_reason_ge = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private IEnumerable<int> _lock_reason_in;
		/// <summary>
		/// LockReason_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<LockReason> LockReason_in
		{
			get => _lock_reason_in?.Select(_ => _.ToLockReason().Value) ?? Enumerable.Empty<LockReason>();
			set => _lock_reason_in = value.Select(_ => _.Val());
		}
		private IEnumerable<int> _lock_reason_ni;
		/// <summary>
		/// LockReason_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<LockReason> LockReason_ni
		{
			get => _lock_reason_ni?.Select(_ => _.ToLockReason().Value) ?? Enumerable.Empty<LockReason>();
			set => _lock_reason_ni = value.Select(_ => _.Val());
		}
		private (int low, int high)? _lock_reason_between;
		/// <summary>
		/// LockReason_betweenの範囲内にある
		/// </summary>
		[DataMember] public (LockReason low, LockReason high)? LockReason_between
		{
			get => _lock_reason_between.HasValue ? (_lock_reason_between.Value.low.ToLockReason().Value, _lock_reason_between.Value.high.ToLockReason().Value) : ((LockReason, LockReason)?)null;
			set => _lock_reason_between = value.HasValue ? (value.Value.low.Val(), value.Value.high.Val()) : ((int, int)?)null;
		}
		private bool _lock_reason_isnull { get; set; } =  false ;
		/// <summary>
		/// LockReasonがNULLか
		/// </summary>
		[DataMember] public bool LockReason_isnull
		{
			get => _lock_reason_isnull;
			set => _lock_reason_isnull = value;
		}
		private bool _lock_reason_isnotnull { get; set; } = false;
		/// <summary>
		/// LockReasonがNULLではないか
		/// </summary>
		[DataMember] public bool LockReason_isnotnull
		{
			get => _lock_reason_isnotnull;
			set => _lock_reason_isnotnull = value;
		}
		#endregion
		#region created_at
		/// <summary>
		/// created_at_eqと等しい
		/// </summary>
		[DataMember] public DateTime? created_at_eq { get; set; }
		/// <summary>
		/// created_at_neと等しくない
		/// </summary>
		[DataMember] public DateTime? created_at_ne { get; set; }
		/// <summary>
		/// created_at_ltより小さい
		/// </summary>
		[DataMember] public DateTime? created_at_lt { get; set; }
		/// <summary>
		/// created_at_gtより大きい
		/// </summary>
		[DataMember] public DateTime? created_at_gt { get; set; }
		/// <summary>
		/// created_at_le以下
		/// </summary>
		[DataMember] public DateTime? created_at_le { get; set; }
		/// <summary>
		/// created_at_ge以上
		/// </summary>
		[DataMember] public DateTime? created_at_ge { get; set; }
		/// <summary>
		/// created_at_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> created_at_in { get; set; }
		/// <summary>
		/// created_at_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> created_at_ni { get; set; }
		/// <summary>
		/// created_at_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? created_at_between { get; set; }
		#endregion
		#region created_by
		/// <summary>
		/// created_by_eqと等しい
		/// </summary>
		[DataMember] public int? created_by_eq { get; set; }
		/// <summary>
		/// created_by_neと等しくない
		/// </summary>
		[DataMember] public int? created_by_ne { get; set; }
		/// <summary>
		/// created_by_ltより小さい
		/// </summary>
		[DataMember] public int? created_by_lt { get; set; }
		/// <summary>
		/// created_by_gtより大きい
		/// </summary>
		[DataMember] public int? created_by_gt { get; set; }
		/// <summary>
		/// created_by_le以下
		/// </summary>
		[DataMember] public int? created_by_le { get; set; }
		/// <summary>
		/// created_by_ge以上
		/// </summary>
		[DataMember] public int? created_by_ge { get; set; }
		/// <summary>
		/// created_by_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> created_by_in { get; set; }
		/// <summary>
		/// created_by_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> created_by_ni { get; set; }
		/// <summary>
		/// created_by_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? created_by_between { get; set; }
		/// <summary>
		/// created_byがNULLか
		/// </summary>
		[DataMember] public bool created_by_isnull { get; set; } =  false ;
		/// <summary>
		/// created_byがNULLではないか
		/// </summary>
		[DataMember] public bool created_by_isnotnull { get; set; } = false;
		#endregion
		#region modified_at
		/// <summary>
		/// modified_at_eqと等しい
		/// </summary>
		[DataMember] public DateTime? modified_at_eq { get; set; }
		/// <summary>
		/// modified_at_neと等しくない
		/// </summary>
		[DataMember] public DateTime? modified_at_ne { get; set; }
		/// <summary>
		/// modified_at_ltより小さい
		/// </summary>
		[DataMember] public DateTime? modified_at_lt { get; set; }
		/// <summary>
		/// modified_at_gtより大きい
		/// </summary>
		[DataMember] public DateTime? modified_at_gt { get; set; }
		/// <summary>
		/// modified_at_le以下
		/// </summary>
		[DataMember] public DateTime? modified_at_le { get; set; }
		/// <summary>
		/// modified_at_ge以上
		/// </summary>
		[DataMember] public DateTime? modified_at_ge { get; set; }
		/// <summary>
		/// modified_at_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> modified_at_in { get; set; }
		/// <summary>
		/// modified_at_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> modified_at_ni { get; set; }
		/// <summary>
		/// modified_at_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? modified_at_between { get; set; }
		#endregion
		#region modified_by
		/// <summary>
		/// modified_by_eqと等しい
		/// </summary>
		[DataMember] public int? modified_by_eq { get; set; }
		/// <summary>
		/// modified_by_neと等しくない
		/// </summary>
		[DataMember] public int? modified_by_ne { get; set; }
		/// <summary>
		/// modified_by_ltより小さい
		/// </summary>
		[DataMember] public int? modified_by_lt { get; set; }
		/// <summary>
		/// modified_by_gtより大きい
		/// </summary>
		[DataMember] public int? modified_by_gt { get; set; }
		/// <summary>
		/// modified_by_le以下
		/// </summary>
		[DataMember] public int? modified_by_le { get; set; }
		/// <summary>
		/// modified_by_ge以上
		/// </summary>
		[DataMember] public int? modified_by_ge { get; set; }
		/// <summary>
		/// modified_by_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> modified_by_in { get; set; }
		/// <summary>
		/// modified_by_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> modified_by_ni { get; set; }
		/// <summary>
		/// modified_by_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? modified_by_between { get; set; }
		/// <summary>
		/// modified_byがNULLか
		/// </summary>
		[DataMember] public bool modified_by_isnull { get; set; } =  false ;
		/// <summary>
		/// modified_byがNULLではないか
		/// </summary>
		[DataMember] public bool modified_by_isnotnull { get; set; } = false;
		#endregion
		#region removed_at
		/// <summary>
		/// removed_at_eqと等しい
		/// </summary>
		[DataMember] public DateTime? removed_at_eq { get; set; }
		/// <summary>
		/// removed_at_neと等しくない
		/// </summary>
		[DataMember] public DateTime? removed_at_ne { get; set; }
		/// <summary>
		/// removed_at_ltより小さい
		/// </summary>
		[DataMember] public DateTime? removed_at_lt { get; set; }
		/// <summary>
		/// removed_at_gtより大きい
		/// </summary>
		[DataMember] public DateTime? removed_at_gt { get; set; }
		/// <summary>
		/// removed_at_le以下
		/// </summary>
		[DataMember] public DateTime? removed_at_le { get; set; }
		/// <summary>
		/// removed_at_ge以上
		/// </summary>
		[DataMember] public DateTime? removed_at_ge { get; set; }
		/// <summary>
		/// removed_at_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> removed_at_in { get; set; }
		/// <summary>
		/// removed_at_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> removed_at_ni { get; set; }
		/// <summary>
		/// removed_at_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? removed_at_between { get; set; }
		/// <summary>
		/// removed_atがNULLか
		/// </summary>
		[DataMember] public bool removed_at_isnull { get; set; } =  true ;
		/// <summary>
		/// removed_atがNULLではないか
		/// </summary>
		[DataMember] public bool removed_at_isnotnull { get; set; } = false;
		#endregion
		#region row_version
		/// <summary>
		/// row_version_eqと等しい
		/// </summary>
		[DataMember] public byte[] row_version_eq { get; set; }
		/// <summary>
		/// row_version_neと等しくない
		/// </summary>
		[DataMember] public byte[] row_version_ne { get; set; }
		/// <summary>
		/// row_versionがNULLか
		/// </summary>
		[DataMember] public bool row_version_isnull { get; set; } =  false ;
		/// <summary>
		/// row_versionがNULLではないか
		/// </summary>
		[DataMember] public bool row_version_isnotnull { get; set; } = false;
		#endregion
		#endregion

		#region override
		override public Expression<Func<Password, bool>> CreatePredicate()
		{
			var predicate = base.CreatePredicate();

			#region uid
			if (uid_eq != null) predicate = predicate.And(_ => _.uid == uid_eq);
			if (uid_ne != null) predicate = predicate.And(_ => _.uid != uid_ne);
			if (uid_lt != null) predicate = predicate.And(_ => _.uid < uid_lt);
			if (uid_gt != null) predicate = predicate.And(_ => _.uid > uid_gt);
			if (uid_le != null) predicate = predicate.And(_ => _.uid <= uid_le);
			if (uid_ge != null) predicate = predicate.And(_ => _.uid >= uid_ge);
			if (uid_in != null) predicate = predicate.And(_ => uid_in.Contains(_.uid));
			if (uid_ni != null) predicate = predicate.And(_ => !uid_ni.Contains(_.uid));
			#endregion
			#region account_id
			if (account_id_eq != null) predicate = predicate.And(_ => _.account_id == account_id_eq);
			if (account_id_ne != null) predicate = predicate.And(_ => _.account_id != account_id_ne);
			if (account_id_lt != null) predicate = predicate.And(_ => _.account_id < account_id_lt);
			if (account_id_gt != null) predicate = predicate.And(_ => _.account_id > account_id_gt);
			if (account_id_le != null) predicate = predicate.And(_ => _.account_id <= account_id_le);
			if (account_id_ge != null) predicate = predicate.And(_ => _.account_id >= account_id_ge);
			if (account_id_in != null) predicate = predicate.And(_ => account_id_in.Contains(_.account_id));
			if (account_id_ni != null) predicate = predicate.And(_ => !account_id_ni.Contains(_.account_id));
			#endregion
			#region password_hash
			if (password_hash_eq != null) predicate = predicate.And(_ => _.password_hash == password_hash_eq);
			if (password_hash_ne != null) predicate = predicate.And(_ => _.password_hash != password_hash_ne);
			if (password_hash_lt != null) predicate = predicate.And(_ => password_hash_lt.CompareTo(_.password_hash) > 0);
			if (password_hash_gt != null) predicate = predicate.And(_ => password_hash_gt.CompareTo(_.password_hash) < 0);
			if (password_hash_le != null) predicate = predicate.And(_ => password_hash_le.CompareTo(_.password_hash) >= 0);
			if (password_hash_ge != null) predicate = predicate.And(_ => password_hash_ge.CompareTo(_.password_hash) <= 0);
			if (password_hash_in != null) predicate = predicate.And(_ => password_hash_in.Contains(_.password_hash));
			if (password_hash_ni != null) predicate = predicate.And(_ => !password_hash_ni.Contains(_.password_hash));
			#endregion
			#region hash_type
			if (_hash_type_eq != null) predicate = predicate.And(_ => _.hash_type == _hash_type_eq);
			if (_hash_type_ne != null) predicate = predicate.And(_ => _.hash_type != _hash_type_ne);
			if (_hash_type_lt != null) predicate = predicate.And(_ => _hash_type_lt.CompareTo(_.hash_type) > 0);
			if (_hash_type_gt != null) predicate = predicate.And(_ => _hash_type_gt.CompareTo(_.hash_type) < 0);
			if (_hash_type_le != null) predicate = predicate.And(_ => _hash_type_le.CompareTo(_.hash_type) >= 0);
			if (_hash_type_ge != null) predicate = predicate.And(_ => _hash_type_ge.CompareTo(_.hash_type) <= 0);
			if (_hash_type_in != null) predicate = predicate.And(_ => _hash_type_in.Contains(_.hash_type));
			if (_hash_type_ni != null) predicate = predicate.And(_ => !_hash_type_ni.Contains(_.hash_type));
			#endregion
			#region expiration_on
			if (expiration_on_eq != null) predicate = predicate.And(_ => _.expiration_on == expiration_on_eq);
			if (expiration_on_ne != null) predicate = predicate.And(_ => _.expiration_on != expiration_on_ne);
			if (expiration_on_lt != null) predicate = predicate.And(_ => _.expiration_on < expiration_on_lt);
			if (expiration_on_gt != null) predicate = predicate.And(_ => _.expiration_on > expiration_on_gt);
			if (expiration_on_le != null) predicate = predicate.And(_ => _.expiration_on <= expiration_on_le);
			if (expiration_on_ge != null) predicate = predicate.And(_ => _.expiration_on >= expiration_on_ge);
			if (expiration_on_in != null) predicate = predicate.And(_ => expiration_on_in.Contains(_.expiration_on.Value));
			if (expiration_on_ni != null) predicate = predicate.And(_ => !expiration_on_ni.Contains(_.expiration_on.Value));
			if (expiration_on_isnull) predicate = predicate.And(_ => _.expiration_on == null);
			if (expiration_on_isnotnull) predicate = predicate.And(_ => _.expiration_on != null);
			#endregion
			#region password_life_days
			if (password_life_days_eq != null) predicate = predicate.And(_ => _.password_life_days == password_life_days_eq);
			if (password_life_days_ne != null) predicate = predicate.And(_ => _.password_life_days != password_life_days_ne);
			if (password_life_days_lt != null) predicate = predicate.And(_ => _.password_life_days < password_life_days_lt);
			if (password_life_days_gt != null) predicate = predicate.And(_ => _.password_life_days > password_life_days_gt);
			if (password_life_days_le != null) predicate = predicate.And(_ => _.password_life_days <= password_life_days_le);
			if (password_life_days_ge != null) predicate = predicate.And(_ => _.password_life_days >= password_life_days_ge);
			if (password_life_days_in != null) predicate = predicate.And(_ => password_life_days_in.Contains(_.password_life_days.Value));
			if (password_life_days_ni != null) predicate = predicate.And(_ => !password_life_days_ni.Contains(_.password_life_days.Value));
			if (password_life_days_isnull) predicate = predicate.And(_ => _.password_life_days == null);
			if (password_life_days_isnotnull) predicate = predicate.And(_ => _.password_life_days != null);
			#endregion
			#region can_fail_times
			if (can_fail_times_eq != null) predicate = predicate.And(_ => _.can_fail_times == can_fail_times_eq);
			if (can_fail_times_ne != null) predicate = predicate.And(_ => _.can_fail_times != can_fail_times_ne);
			if (can_fail_times_lt != null) predicate = predicate.And(_ => _.can_fail_times < can_fail_times_lt);
			if (can_fail_times_gt != null) predicate = predicate.And(_ => _.can_fail_times > can_fail_times_gt);
			if (can_fail_times_le != null) predicate = predicate.And(_ => _.can_fail_times <= can_fail_times_le);
			if (can_fail_times_ge != null) predicate = predicate.And(_ => _.can_fail_times >= can_fail_times_ge);
			if (can_fail_times_in != null) predicate = predicate.And(_ => can_fail_times_in.Contains(_.can_fail_times));
			if (can_fail_times_ni != null) predicate = predicate.And(_ => !can_fail_times_ni.Contains(_.can_fail_times));
			#endregion
			#region fail_times
			if (fail_times_eq != null) predicate = predicate.And(_ => _.fail_times == fail_times_eq);
			if (fail_times_ne != null) predicate = predicate.And(_ => _.fail_times != fail_times_ne);
			if (fail_times_lt != null) predicate = predicate.And(_ => _.fail_times < fail_times_lt);
			if (fail_times_gt != null) predicate = predicate.And(_ => _.fail_times > fail_times_gt);
			if (fail_times_le != null) predicate = predicate.And(_ => _.fail_times <= fail_times_le);
			if (fail_times_ge != null) predicate = predicate.And(_ => _.fail_times >= fail_times_ge);
			if (fail_times_in != null) predicate = predicate.And(_ => fail_times_in.Contains(_.fail_times));
			if (fail_times_ni != null) predicate = predicate.And(_ => !fail_times_ni.Contains(_.fail_times));
			#endregion
			#region lock_flg
			if (lock_flg_eq != null) predicate = predicate.And(_ => _.lock_flg == lock_flg_eq);
			if (lock_flg_ne != null) predicate = predicate.And(_ => _.lock_flg != lock_flg_ne);
			if (lock_flg_lt != null) predicate = predicate.And(_ => _.lock_flg < lock_flg_lt);
			if (lock_flg_gt != null) predicate = predicate.And(_ => _.lock_flg > lock_flg_gt);
			if (lock_flg_le != null) predicate = predicate.And(_ => _.lock_flg <= lock_flg_le);
			if (lock_flg_ge != null) predicate = predicate.And(_ => _.lock_flg >= lock_flg_ge);
			if (lock_flg_in != null) predicate = predicate.And(_ => lock_flg_in.Contains(_.lock_flg));
			if (lock_flg_ni != null) predicate = predicate.And(_ => !lock_flg_ni.Contains(_.lock_flg));
			#endregion
			#region lock_reason
			if (_lock_reason_eq != null) predicate = predicate.And(_ => _.lock_reason == _lock_reason_eq);
			if (_lock_reason_ne != null) predicate = predicate.And(_ => _.lock_reason != _lock_reason_ne);
			if (_lock_reason_lt != null) predicate = predicate.And(_ => _.lock_reason < _lock_reason_lt);
			if (_lock_reason_gt != null) predicate = predicate.And(_ => _.lock_reason > _lock_reason_gt);
			if (_lock_reason_le != null) predicate = predicate.And(_ => _.lock_reason <= _lock_reason_le);
			if (_lock_reason_ge != null) predicate = predicate.And(_ => _.lock_reason >= _lock_reason_ge);
			if (_lock_reason_in != null) predicate = predicate.And(_ => _lock_reason_in.Contains(_.lock_reason.Value));
			if (_lock_reason_ni != null) predicate = predicate.And(_ => !_lock_reason_ni.Contains(_.lock_reason.Value));
			if (_lock_reason_isnull) predicate = predicate.And(_ => _.lock_reason == null);
			if (_lock_reason_isnotnull) predicate = predicate.And(_ => _.lock_reason != null);
			#endregion
			#region created_at
			if (created_at_eq != null) predicate = predicate.And(_ => _.created_at == created_at_eq);
			if (created_at_ne != null) predicate = predicate.And(_ => _.created_at != created_at_ne);
			if (created_at_lt != null) predicate = predicate.And(_ => _.created_at < created_at_lt);
			if (created_at_gt != null) predicate = predicate.And(_ => _.created_at > created_at_gt);
			if (created_at_le != null) predicate = predicate.And(_ => _.created_at <= created_at_le);
			if (created_at_ge != null) predicate = predicate.And(_ => _.created_at >= created_at_ge);
			if (created_at_in != null) predicate = predicate.And(_ => created_at_in.Contains(_.created_at));
			if (created_at_ni != null) predicate = predicate.And(_ => !created_at_ni.Contains(_.created_at));
			#endregion
			#region created_by
			if (created_by_eq != null) predicate = predicate.And(_ => _.created_by == created_by_eq);
			if (created_by_ne != null) predicate = predicate.And(_ => _.created_by != created_by_ne);
			if (created_by_lt != null) predicate = predicate.And(_ => _.created_by < created_by_lt);
			if (created_by_gt != null) predicate = predicate.And(_ => _.created_by > created_by_gt);
			if (created_by_le != null) predicate = predicate.And(_ => _.created_by <= created_by_le);
			if (created_by_ge != null) predicate = predicate.And(_ => _.created_by >= created_by_ge);
			if (created_by_in != null) predicate = predicate.And(_ => created_by_in.Contains(_.created_by.Value));
			if (created_by_ni != null) predicate = predicate.And(_ => !created_by_ni.Contains(_.created_by.Value));
			if (created_by_isnull) predicate = predicate.And(_ => _.created_by == null);
			if (created_by_isnotnull) predicate = predicate.And(_ => _.created_by != null);
			#endregion
			#region modified_at
			if (modified_at_eq != null) predicate = predicate.And(_ => _.modified_at == modified_at_eq);
			if (modified_at_ne != null) predicate = predicate.And(_ => _.modified_at != modified_at_ne);
			if (modified_at_lt != null) predicate = predicate.And(_ => _.modified_at < modified_at_lt);
			if (modified_at_gt != null) predicate = predicate.And(_ => _.modified_at > modified_at_gt);
			if (modified_at_le != null) predicate = predicate.And(_ => _.modified_at <= modified_at_le);
			if (modified_at_ge != null) predicate = predicate.And(_ => _.modified_at >= modified_at_ge);
			if (modified_at_in != null) predicate = predicate.And(_ => modified_at_in.Contains(_.modified_at));
			if (modified_at_ni != null) predicate = predicate.And(_ => !modified_at_ni.Contains(_.modified_at));
			#endregion
			#region modified_by
			if (modified_by_eq != null) predicate = predicate.And(_ => _.modified_by == modified_by_eq);
			if (modified_by_ne != null) predicate = predicate.And(_ => _.modified_by != modified_by_ne);
			if (modified_by_lt != null) predicate = predicate.And(_ => _.modified_by < modified_by_lt);
			if (modified_by_gt != null) predicate = predicate.And(_ => _.modified_by > modified_by_gt);
			if (modified_by_le != null) predicate = predicate.And(_ => _.modified_by <= modified_by_le);
			if (modified_by_ge != null) predicate = predicate.And(_ => _.modified_by >= modified_by_ge);
			if (modified_by_in != null) predicate = predicate.And(_ => modified_by_in.Contains(_.modified_by.Value));
			if (modified_by_ni != null) predicate = predicate.And(_ => !modified_by_ni.Contains(_.modified_by.Value));
			if (modified_by_isnull) predicate = predicate.And(_ => _.modified_by == null);
			if (modified_by_isnotnull) predicate = predicate.And(_ => _.modified_by != null);
			#endregion
			#region removed_at
			if (removed_at_eq != null) predicate = predicate.And(_ => _.removed_at == removed_at_eq);
			if (removed_at_ne != null) predicate = predicate.And(_ => _.removed_at != removed_at_ne);
			if (removed_at_lt != null) predicate = predicate.And(_ => _.removed_at < removed_at_lt);
			if (removed_at_gt != null) predicate = predicate.And(_ => _.removed_at > removed_at_gt);
			if (removed_at_le != null) predicate = predicate.And(_ => _.removed_at <= removed_at_le);
			if (removed_at_ge != null) predicate = predicate.And(_ => _.removed_at >= removed_at_ge);
			if (removed_at_in != null) predicate = predicate.And(_ => removed_at_in.Contains(_.removed_at.Value));
			if (removed_at_ni != null) predicate = predicate.And(_ => !removed_at_ni.Contains(_.removed_at.Value));
			if (removed_at_isnull) predicate = predicate.And(_ => _.removed_at == null);
			if (removed_at_isnotnull) predicate = predicate.And(_ => _.removed_at != null);
			#endregion
			#region row_version
			if (row_version_eq != null) predicate = predicate.And(_ => _.row_version == row_version_eq);
			if (row_version_ne != null) predicate = predicate.And(_ => _.row_version != row_version_ne);
			if (row_version_isnull) predicate = predicate.And(_ => _.row_version == null);
			if (row_version_isnotnull) predicate = predicate.And(_ => _.row_version != null);
			#endregion

			return predicate;
		}
		#endregion
	}
	#endregion
	#endregion
	#region アカウントロール
	/// <summary>
	/// アカウントロール
	/// </summary>
	[Table(Schema="Core", Name="AccountRole"), DataContract]
	public partial class AccountRole : TableBase<AccountRole>, INotifyPropertyChanged
	{
		#region uid : int

		private int _uid;
		/// <summary>
		/// ユニークID
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull, Identity]
		public  int  uid
		{
			get { return _uid; }
			set
			{
				if (_uid != value)
				{
					BeforeuidChanged(value);
					_uid = value;
					AfteruidChanged();

					OnuidChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeuidChanged(int newValue);
		partial void AfteruidChanged();

		public const string NameOfuid = "uid";

		private static readonly PropertyChangedEventArgs _uidChangedEventArgs = new PropertyChangedEventArgs(NameOfuid);

		private void OnuidChanged()
		{
			OnPropertyChanged(_uidChangedEventArgs);
		}

		#endregion

		#endregion
		#region account_id : int

		private int _account_id;
		/// <summary>
		/// アカウントID
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull, PrimaryKey(Order = 1), System.ComponentModel.DataAnnotations.Required]
		public  int  account_id
		{
			get { return _account_id; }
			set
			{
				if (_account_id != value)
				{
					Beforeaccount_idChanged(value);
					_account_id = value;
					Afteraccount_idChanged();

					Onaccount_idChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeaccount_idChanged(int newValue);
		partial void Afteraccount_idChanged();

		public const string NameOfaccount_id = "account_id";

		private static readonly PropertyChangedEventArgs _account_idChangedEventArgs = new PropertyChangedEventArgs(NameOfaccount_id);

		private void Onaccount_idChanged()
		{
			OnPropertyChanged(_account_idChangedEventArgs);
		}

		#endregion

		#endregion
		#region role_id : string

		private string _role_id;
		/// <summary>
		/// ロールID
		/// </summary>
		[Column(DbType="varchar(16)", DataType=DataType.VarChar, Length=16), DataMember, NotNull, PrimaryKey(Order = 2), System.ComponentModel.DataAnnotations.Required]
		public  string  role_id
		{
			get { return _role_id; }
			set
			{
				if (_role_id != value)
				{
					Beforerole_idChanged(value);
					_role_id = value;
					Afterrole_idChanged();

					Onrole_idChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforerole_idChanged(string newValue);
		partial void Afterrole_idChanged();

		public const string NameOfrole_id = "role_id";

		private static readonly PropertyChangedEventArgs _role_idChangedEventArgs = new PropertyChangedEventArgs(NameOfrole_id);

		private void Onrole_idChanged()
		{
			OnPropertyChanged(_role_idChangedEventArgs);
		}

		#endregion

		#endregion
		#region note : string

		private string _note;
		/// <summary>
		/// 備考
		/// </summary>
		[Column(DbType="nvarchar(100)", DataType=DataType.NVarChar, Length=100), DataMember, NotNull]
		public  string  note
		{
			get { return _note; }
			set
			{
				if (_note != value)
				{
					BeforenoteChanged(value);
					_note = value;
					AfternoteChanged();

					OnnoteChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforenoteChanged(string newValue);
		partial void AfternoteChanged();

		public const string NameOfnote = "note";

		private static readonly PropertyChangedEventArgs _noteChangedEventArgs = new PropertyChangedEventArgs(NameOfnote);

		private void OnnoteChanged()
		{
			OnPropertyChanged(_noteChangedEventArgs);
		}

		#endregion

		#endregion
		#region created_at : DateTime

		private DateTime _created_at;
		/// <summary>
		/// 作成日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, NotNull]
		public  DateTime  created_at
		{
			get { return _created_at; }
			set
			{
				if (_created_at != value)
				{
					Beforecreated_atChanged(value);
					_created_at = value;
					Aftercreated_atChanged();

					Oncreated_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecreated_atChanged(DateTime newValue);
		partial void Aftercreated_atChanged();

		public const string NameOfcreated_at = "created_at";

		private static readonly PropertyChangedEventArgs _created_atChangedEventArgs = new PropertyChangedEventArgs(NameOfcreated_at);

		private void Oncreated_atChanged()
		{
			OnPropertyChanged(_created_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region created_by : int?

		private int? _created_by;
		/// <summary>
		/// 作成者
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, Nullable]
		public  int?  created_by
		{
			get { return _created_by; }
			set
			{
				if (_created_by != value)
				{
					Beforecreated_byChanged(value);
					_created_by = value;
					Aftercreated_byChanged();

					Oncreated_byChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecreated_byChanged(int? newValue);
		partial void Aftercreated_byChanged();

		public const string NameOfcreated_by = "created_by";

		private static readonly PropertyChangedEventArgs _created_byChangedEventArgs = new PropertyChangedEventArgs(NameOfcreated_by);

		private void Oncreated_byChanged()
		{
			OnPropertyChanged(_created_byChangedEventArgs);
		}

		#endregion

		#endregion
		#region modified_at : DateTime

		private DateTime _modified_at;
		/// <summary>
		/// 更新日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, NotNull]
		public  DateTime  modified_at
		{
			get { return _modified_at; }
			set
			{
				if (_modified_at != value)
				{
					Beforemodified_atChanged(value);
					_modified_at = value;
					Aftermodified_atChanged();

					Onmodified_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforemodified_atChanged(DateTime newValue);
		partial void Aftermodified_atChanged();

		public const string NameOfmodified_at = "modified_at";

		private static readonly PropertyChangedEventArgs _modified_atChangedEventArgs = new PropertyChangedEventArgs(NameOfmodified_at);

		private void Onmodified_atChanged()
		{
			OnPropertyChanged(_modified_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region modified_by : int?

		private int? _modified_by;
		/// <summary>
		/// 更新者
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, Nullable]
		public  int?  modified_by
		{
			get { return _modified_by; }
			set
			{
				if (_modified_by != value)
				{
					Beforemodified_byChanged(value);
					_modified_by = value;
					Aftermodified_byChanged();

					Onmodified_byChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforemodified_byChanged(int? newValue);
		partial void Aftermodified_byChanged();

		public const string NameOfmodified_by = "modified_by";

		private static readonly PropertyChangedEventArgs _modified_byChangedEventArgs = new PropertyChangedEventArgs(NameOfmodified_by);

		private void Onmodified_byChanged()
		{
			OnPropertyChanged(_modified_byChangedEventArgs);
		}

		#endregion

		#endregion
		#region row_version : byte[]

		private byte[] _row_version;
		/// <summary>
		/// 版
		/// </summary>
		[Column(DbType="timestamp", DataType=DataType.Timestamp, SkipOnInsert=true, SkipOnUpdate=true), DataMember, Nullable]
		public  byte[]  row_version
		{
			get { return _row_version; }
			set
			{
				if (_row_version != value)
				{
					Beforerow_versionChanged(value);
					_row_version = value;
					Afterrow_versionChanged();

					Onrow_versionChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforerow_versionChanged(byte[] newValue);
		partial void Afterrow_versionChanged();

		public const string NameOfrow_version = "row_version";

		private static readonly PropertyChangedEventArgs _row_versionChangedEventArgs = new PropertyChangedEventArgs(NameOfrow_version);

		private void Onrow_versionChanged()
		{
			OnPropertyChanged(_row_versionChangedEventArgs);
		}

		#endregion

		#endregion

		#region enum用アクセスラッパー
		#endregion

		#region Constructor

		public AccountRole()
		{
			#region フィールド初期化
			uid = default(int);
			account_id = 0;
			role_id = "";
			note = "";
			created_at = DateTime.UtcNow;
			created_by = null;
			modified_at = DateTime.UtcNow;
			modified_by = null;
			row_version = default(byte[]);
			#endregion
		}

		#endregion

		#region Association

		#region Role : role_id (FK_AccountRole_Role)

		private Role _Role;
		/// <summary>
		/// FK_AccountRole_Role
		/// </summary>
		[Association(ThisKey="role_id", OtherKey="role_id", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_AccountRole_Role", BackReferenceName="AccountRole"), DataMember]
		public  Role  Role
		{
			get { return _Role; }
			set
			{
				if (_Role != value)
				{
					BeforeRoleChanged(value);
					_Role = value;
					AfterRoleChanged();

					OnRoleChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeRoleChanged(Role newValue);
		partial void AfterRoleChanged ();

		public const string NameOfRole = "Role";

		private static readonly PropertyChangedEventArgs _RoleChangedEventArgs = new PropertyChangedEventArgs(NameOfRole);

		private void OnRoleChanged()
		{
			OnPropertyChanged(_RoleChangedEventArgs);
		}

		#endregion

		#endregion

		#endregion

		#region INotifyPropertyChanged support

		[field : NonSerialized]
		public virtual event PropertyChangedEventHandler PropertyChanged;

		protected void OnPropertyChanged(string propertyName)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		protected void OnPropertyChanged(PropertyChangedEventArgs arg)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, arg);
			}
		}

		#endregion

	}
	#region アカウントロール条件
	/// <summary>
	/// アカウントロール条件
	/// </summary>
	[DataContract]
	public partial class AccountRoleCondition : AccountRoleConditionBase
	{
	}

	/// <summary>
	/// アカウントロール条件ベース
	/// </summary>
	[DataContract]
	public class AccountRoleConditionBase : ConditionBase<AccountRole>
	{
		#region properties
		#region uid
		/// <summary>
		/// uid_eqと等しい
		/// </summary>
		[DataMember] public int? uid_eq { get; set; }
		/// <summary>
		/// uid_neと等しくない
		/// </summary>
		[DataMember] public int? uid_ne { get; set; }
		/// <summary>
		/// uid_ltより小さい
		/// </summary>
		[DataMember] public int? uid_lt { get; set; }
		/// <summary>
		/// uid_gtより大きい
		/// </summary>
		[DataMember] public int? uid_gt { get; set; }
		/// <summary>
		/// uid_le以下
		/// </summary>
		[DataMember] public int? uid_le { get; set; }
		/// <summary>
		/// uid_ge以上
		/// </summary>
		[DataMember] public int? uid_ge { get; set; }
		/// <summary>
		/// uid_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> uid_in { get; set; }
		/// <summary>
		/// uid_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> uid_ni { get; set; }
		/// <summary>
		/// uid_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? uid_between { get; set; }
		#endregion
		#region account_id
		/// <summary>
		/// account_id_eqと等しい
		/// </summary>
		[DataMember] public int? account_id_eq { get; set; }
		/// <summary>
		/// account_id_neと等しくない
		/// </summary>
		[DataMember] public int? account_id_ne { get; set; }
		/// <summary>
		/// account_id_ltより小さい
		/// </summary>
		[DataMember] public int? account_id_lt { get; set; }
		/// <summary>
		/// account_id_gtより大きい
		/// </summary>
		[DataMember] public int? account_id_gt { get; set; }
		/// <summary>
		/// account_id_le以下
		/// </summary>
		[DataMember] public int? account_id_le { get; set; }
		/// <summary>
		/// account_id_ge以上
		/// </summary>
		[DataMember] public int? account_id_ge { get; set; }
		/// <summary>
		/// account_id_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> account_id_in { get; set; }
		/// <summary>
		/// account_id_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> account_id_ni { get; set; }
		/// <summary>
		/// account_id_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? account_id_between { get; set; }
		#endregion
		#region role_id
		/// <summary>
		/// role_id_eqと等しい
		/// </summary>
		[DataMember] public string role_id_eq { get; set; }
		/// <summary>
		/// role_id_neと等しくない
		/// </summary>
		[DataMember] public string role_id_ne { get; set; }
		/// <summary>
		/// role_id_ltより小さい
		/// </summary>
		[DataMember] public string role_id_lt { get; set; }
		/// <summary>
		/// role_id_gtより大きい
		/// </summary>
		[DataMember] public string role_id_gt { get; set; }
		/// <summary>
		/// role_id_le以下
		/// </summary>
		[DataMember] public string role_id_le { get; set; }
		/// <summary>
		/// role_id_ge以上
		/// </summary>
		[DataMember] public string role_id_ge { get; set; }
		/// <summary>
		/// role_id_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> role_id_in { get; set; }
		/// <summary>
		/// role_id_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> role_id_ni { get; set; }
		/// <summary>
		/// role_id_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? role_id_between { get; set; }
		/// <summary>
		/// role_id_likeと部分一致する
		/// </summary>
		[DataMember] public string role_id_like { get; set; }
		#endregion
		#region note
		/// <summary>
		/// note_eqと等しい
		/// </summary>
		[DataMember] public string note_eq { get; set; }
		/// <summary>
		/// note_neと等しくない
		/// </summary>
		[DataMember] public string note_ne { get; set; }
		/// <summary>
		/// note_ltより小さい
		/// </summary>
		[DataMember] public string note_lt { get; set; }
		/// <summary>
		/// note_gtより大きい
		/// </summary>
		[DataMember] public string note_gt { get; set; }
		/// <summary>
		/// note_le以下
		/// </summary>
		[DataMember] public string note_le { get; set; }
		/// <summary>
		/// note_ge以上
		/// </summary>
		[DataMember] public string note_ge { get; set; }
		/// <summary>
		/// note_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> note_in { get; set; }
		/// <summary>
		/// note_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> note_ni { get; set; }
		/// <summary>
		/// note_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? note_between { get; set; }
		/// <summary>
		/// note_likeと部分一致する
		/// </summary>
		[DataMember] public string note_like { get; set; }
		#endregion
		#region created_at
		/// <summary>
		/// created_at_eqと等しい
		/// </summary>
		[DataMember] public DateTime? created_at_eq { get; set; }
		/// <summary>
		/// created_at_neと等しくない
		/// </summary>
		[DataMember] public DateTime? created_at_ne { get; set; }
		/// <summary>
		/// created_at_ltより小さい
		/// </summary>
		[DataMember] public DateTime? created_at_lt { get; set; }
		/// <summary>
		/// created_at_gtより大きい
		/// </summary>
		[DataMember] public DateTime? created_at_gt { get; set; }
		/// <summary>
		/// created_at_le以下
		/// </summary>
		[DataMember] public DateTime? created_at_le { get; set; }
		/// <summary>
		/// created_at_ge以上
		/// </summary>
		[DataMember] public DateTime? created_at_ge { get; set; }
		/// <summary>
		/// created_at_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> created_at_in { get; set; }
		/// <summary>
		/// created_at_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> created_at_ni { get; set; }
		/// <summary>
		/// created_at_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? created_at_between { get; set; }
		#endregion
		#region created_by
		/// <summary>
		/// created_by_eqと等しい
		/// </summary>
		[DataMember] public int? created_by_eq { get; set; }
		/// <summary>
		/// created_by_neと等しくない
		/// </summary>
		[DataMember] public int? created_by_ne { get; set; }
		/// <summary>
		/// created_by_ltより小さい
		/// </summary>
		[DataMember] public int? created_by_lt { get; set; }
		/// <summary>
		/// created_by_gtより大きい
		/// </summary>
		[DataMember] public int? created_by_gt { get; set; }
		/// <summary>
		/// created_by_le以下
		/// </summary>
		[DataMember] public int? created_by_le { get; set; }
		/// <summary>
		/// created_by_ge以上
		/// </summary>
		[DataMember] public int? created_by_ge { get; set; }
		/// <summary>
		/// created_by_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> created_by_in { get; set; }
		/// <summary>
		/// created_by_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> created_by_ni { get; set; }
		/// <summary>
		/// created_by_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? created_by_between { get; set; }
		/// <summary>
		/// created_byがNULLか
		/// </summary>
		[DataMember] public bool created_by_isnull { get; set; } =  false ;
		/// <summary>
		/// created_byがNULLではないか
		/// </summary>
		[DataMember] public bool created_by_isnotnull { get; set; } = false;
		#endregion
		#region modified_at
		/// <summary>
		/// modified_at_eqと等しい
		/// </summary>
		[DataMember] public DateTime? modified_at_eq { get; set; }
		/// <summary>
		/// modified_at_neと等しくない
		/// </summary>
		[DataMember] public DateTime? modified_at_ne { get; set; }
		/// <summary>
		/// modified_at_ltより小さい
		/// </summary>
		[DataMember] public DateTime? modified_at_lt { get; set; }
		/// <summary>
		/// modified_at_gtより大きい
		/// </summary>
		[DataMember] public DateTime? modified_at_gt { get; set; }
		/// <summary>
		/// modified_at_le以下
		/// </summary>
		[DataMember] public DateTime? modified_at_le { get; set; }
		/// <summary>
		/// modified_at_ge以上
		/// </summary>
		[DataMember] public DateTime? modified_at_ge { get; set; }
		/// <summary>
		/// modified_at_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> modified_at_in { get; set; }
		/// <summary>
		/// modified_at_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> modified_at_ni { get; set; }
		/// <summary>
		/// modified_at_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? modified_at_between { get; set; }
		#endregion
		#region modified_by
		/// <summary>
		/// modified_by_eqと等しい
		/// </summary>
		[DataMember] public int? modified_by_eq { get; set; }
		/// <summary>
		/// modified_by_neと等しくない
		/// </summary>
		[DataMember] public int? modified_by_ne { get; set; }
		/// <summary>
		/// modified_by_ltより小さい
		/// </summary>
		[DataMember] public int? modified_by_lt { get; set; }
		/// <summary>
		/// modified_by_gtより大きい
		/// </summary>
		[DataMember] public int? modified_by_gt { get; set; }
		/// <summary>
		/// modified_by_le以下
		/// </summary>
		[DataMember] public int? modified_by_le { get; set; }
		/// <summary>
		/// modified_by_ge以上
		/// </summary>
		[DataMember] public int? modified_by_ge { get; set; }
		/// <summary>
		/// modified_by_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> modified_by_in { get; set; }
		/// <summary>
		/// modified_by_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> modified_by_ni { get; set; }
		/// <summary>
		/// modified_by_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? modified_by_between { get; set; }
		/// <summary>
		/// modified_byがNULLか
		/// </summary>
		[DataMember] public bool modified_by_isnull { get; set; } =  false ;
		/// <summary>
		/// modified_byがNULLではないか
		/// </summary>
		[DataMember] public bool modified_by_isnotnull { get; set; } = false;
		#endregion
		#region row_version
		/// <summary>
		/// row_version_eqと等しい
		/// </summary>
		[DataMember] public byte[] row_version_eq { get; set; }
		/// <summary>
		/// row_version_neと等しくない
		/// </summary>
		[DataMember] public byte[] row_version_ne { get; set; }
		/// <summary>
		/// row_versionがNULLか
		/// </summary>
		[DataMember] public bool row_version_isnull { get; set; } =  false ;
		/// <summary>
		/// row_versionがNULLではないか
		/// </summary>
		[DataMember] public bool row_version_isnotnull { get; set; } = false;
		#endregion
		#endregion

		#region override
		override public Expression<Func<AccountRole, bool>> CreatePredicate()
		{
			var predicate = base.CreatePredicate();

			#region uid
			if (uid_eq != null) predicate = predicate.And(_ => _.uid == uid_eq);
			if (uid_ne != null) predicate = predicate.And(_ => _.uid != uid_ne);
			if (uid_lt != null) predicate = predicate.And(_ => _.uid < uid_lt);
			if (uid_gt != null) predicate = predicate.And(_ => _.uid > uid_gt);
			if (uid_le != null) predicate = predicate.And(_ => _.uid <= uid_le);
			if (uid_ge != null) predicate = predicate.And(_ => _.uid >= uid_ge);
			if (uid_in != null) predicate = predicate.And(_ => uid_in.Contains(_.uid));
			if (uid_ni != null) predicate = predicate.And(_ => !uid_ni.Contains(_.uid));
			#endregion
			#region account_id
			if (account_id_eq != null) predicate = predicate.And(_ => _.account_id == account_id_eq);
			if (account_id_ne != null) predicate = predicate.And(_ => _.account_id != account_id_ne);
			if (account_id_lt != null) predicate = predicate.And(_ => _.account_id < account_id_lt);
			if (account_id_gt != null) predicate = predicate.And(_ => _.account_id > account_id_gt);
			if (account_id_le != null) predicate = predicate.And(_ => _.account_id <= account_id_le);
			if (account_id_ge != null) predicate = predicate.And(_ => _.account_id >= account_id_ge);
			if (account_id_in != null) predicate = predicate.And(_ => account_id_in.Contains(_.account_id));
			if (account_id_ni != null) predicate = predicate.And(_ => !account_id_ni.Contains(_.account_id));
			#endregion
			#region role_id
			if (role_id_eq != null) predicate = predicate.And(_ => _.role_id == role_id_eq);
			if (role_id_ne != null) predicate = predicate.And(_ => _.role_id != role_id_ne);
			if (role_id_lt != null) predicate = predicate.And(_ => role_id_lt.CompareTo(_.role_id) > 0);
			if (role_id_gt != null) predicate = predicate.And(_ => role_id_gt.CompareTo(_.role_id) < 0);
			if (role_id_le != null) predicate = predicate.And(_ => role_id_le.CompareTo(_.role_id) >= 0);
			if (role_id_ge != null) predicate = predicate.And(_ => role_id_ge.CompareTo(_.role_id) <= 0);
			if (role_id_in != null) predicate = predicate.And(_ => role_id_in.Contains(_.role_id));
			if (role_id_ni != null) predicate = predicate.And(_ => !role_id_ni.Contains(_.role_id));
			#endregion
			#region note
			if (note_eq != null) predicate = predicate.And(_ => _.note == note_eq);
			if (note_ne != null) predicate = predicate.And(_ => _.note != note_ne);
			if (note_lt != null) predicate = predicate.And(_ => note_lt.CompareTo(_.note) > 0);
			if (note_gt != null) predicate = predicate.And(_ => note_gt.CompareTo(_.note) < 0);
			if (note_le != null) predicate = predicate.And(_ => note_le.CompareTo(_.note) >= 0);
			if (note_ge != null) predicate = predicate.And(_ => note_ge.CompareTo(_.note) <= 0);
			if (note_in != null) predicate = predicate.And(_ => note_in.Contains(_.note));
			if (note_ni != null) predicate = predicate.And(_ => !note_ni.Contains(_.note));
			#endregion
			#region created_at
			if (created_at_eq != null) predicate = predicate.And(_ => _.created_at == created_at_eq);
			if (created_at_ne != null) predicate = predicate.And(_ => _.created_at != created_at_ne);
			if (created_at_lt != null) predicate = predicate.And(_ => _.created_at < created_at_lt);
			if (created_at_gt != null) predicate = predicate.And(_ => _.created_at > created_at_gt);
			if (created_at_le != null) predicate = predicate.And(_ => _.created_at <= created_at_le);
			if (created_at_ge != null) predicate = predicate.And(_ => _.created_at >= created_at_ge);
			if (created_at_in != null) predicate = predicate.And(_ => created_at_in.Contains(_.created_at));
			if (created_at_ni != null) predicate = predicate.And(_ => !created_at_ni.Contains(_.created_at));
			#endregion
			#region created_by
			if (created_by_eq != null) predicate = predicate.And(_ => _.created_by == created_by_eq);
			if (created_by_ne != null) predicate = predicate.And(_ => _.created_by != created_by_ne);
			if (created_by_lt != null) predicate = predicate.And(_ => _.created_by < created_by_lt);
			if (created_by_gt != null) predicate = predicate.And(_ => _.created_by > created_by_gt);
			if (created_by_le != null) predicate = predicate.And(_ => _.created_by <= created_by_le);
			if (created_by_ge != null) predicate = predicate.And(_ => _.created_by >= created_by_ge);
			if (created_by_in != null) predicate = predicate.And(_ => created_by_in.Contains(_.created_by.Value));
			if (created_by_ni != null) predicate = predicate.And(_ => !created_by_ni.Contains(_.created_by.Value));
			if (created_by_isnull) predicate = predicate.And(_ => _.created_by == null);
			if (created_by_isnotnull) predicate = predicate.And(_ => _.created_by != null);
			#endregion
			#region modified_at
			if (modified_at_eq != null) predicate = predicate.And(_ => _.modified_at == modified_at_eq);
			if (modified_at_ne != null) predicate = predicate.And(_ => _.modified_at != modified_at_ne);
			if (modified_at_lt != null) predicate = predicate.And(_ => _.modified_at < modified_at_lt);
			if (modified_at_gt != null) predicate = predicate.And(_ => _.modified_at > modified_at_gt);
			if (modified_at_le != null) predicate = predicate.And(_ => _.modified_at <= modified_at_le);
			if (modified_at_ge != null) predicate = predicate.And(_ => _.modified_at >= modified_at_ge);
			if (modified_at_in != null) predicate = predicate.And(_ => modified_at_in.Contains(_.modified_at));
			if (modified_at_ni != null) predicate = predicate.And(_ => !modified_at_ni.Contains(_.modified_at));
			#endregion
			#region modified_by
			if (modified_by_eq != null) predicate = predicate.And(_ => _.modified_by == modified_by_eq);
			if (modified_by_ne != null) predicate = predicate.And(_ => _.modified_by != modified_by_ne);
			if (modified_by_lt != null) predicate = predicate.And(_ => _.modified_by < modified_by_lt);
			if (modified_by_gt != null) predicate = predicate.And(_ => _.modified_by > modified_by_gt);
			if (modified_by_le != null) predicate = predicate.And(_ => _.modified_by <= modified_by_le);
			if (modified_by_ge != null) predicate = predicate.And(_ => _.modified_by >= modified_by_ge);
			if (modified_by_in != null) predicate = predicate.And(_ => modified_by_in.Contains(_.modified_by.Value));
			if (modified_by_ni != null) predicate = predicate.And(_ => !modified_by_ni.Contains(_.modified_by.Value));
			if (modified_by_isnull) predicate = predicate.And(_ => _.modified_by == null);
			if (modified_by_isnotnull) predicate = predicate.And(_ => _.modified_by != null);
			#endregion
			#region row_version
			if (row_version_eq != null) predicate = predicate.And(_ => _.row_version == row_version_eq);
			if (row_version_ne != null) predicate = predicate.And(_ => _.row_version != row_version_ne);
			if (row_version_isnull) predicate = predicate.And(_ => _.row_version == null);
			if (row_version_isnotnull) predicate = predicate.And(_ => _.row_version != null);
			#endregion

			return predicate;
		}
		#endregion
	}
	#endregion
	#endregion
	#region エラーログ
	/// <summary>
	/// エラーログ
	/// </summary>
	[Table(Schema="Core", Name="ErrorLog"), DataContract]
	public partial class ErrorLog : TableBase<ErrorLog>, INotifyPropertyChanged
	{
		#region uid : int

		private int _uid;
		/// <summary>
		/// ユニークID
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull, PrimaryKey(Order = 1), Identity]
		public  int  uid
		{
			get { return _uid; }
			set
			{
				if (_uid != value)
				{
					BeforeuidChanged(value);
					_uid = value;
					AfteruidChanged();

					OnuidChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeuidChanged(int newValue);
		partial void AfteruidChanged();

		public const string NameOfuid = "uid";

		private static readonly PropertyChangedEventArgs _uidChangedEventArgs = new PropertyChangedEventArgs(NameOfuid);

		private void OnuidChanged()
		{
			OnPropertyChanged(_uidChangedEventArgs);
		}

		#endregion

		#endregion
		#region category : string

		private string _category;
		/// <summary>
		/// カテゴリ
		/// </summary>
		[Column(DbType="nvarchar(16)", DataType=DataType.NVarChar, Length=16), DataMember, NotNull]
		public  string  category
		{
			get { return _category; }
			set
			{
				if (_category != value)
				{
					BeforecategoryChanged(value);
					_category = value;
					AftercategoryChanged();

					OncategoryChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforecategoryChanged(string newValue);
		partial void AftercategoryChanged();

		public const string NameOfcategory = "category";

		private static readonly PropertyChangedEventArgs _categoryChangedEventArgs = new PropertyChangedEventArgs(NameOfcategory);

		private void OncategoryChanged()
		{
			OnPropertyChanged(_categoryChangedEventArgs);
		}

		#endregion

		#endregion
		#region type : string

		private string _type;
		/// <summary>
		/// 種別
		/// </summary>
		[Column(DbType="nvarchar(16)", DataType=DataType.NVarChar, Length=16), DataMember, NotNull]
		public  string  type
		{
			get { return _type; }
			set
			{
				if (_type != value)
				{
					BeforetypeChanged(value);
					_type = value;
					AftertypeChanged();

					OntypeChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforetypeChanged(string newValue);
		partial void AftertypeChanged();

		public const string NameOftype = "type";

		private static readonly PropertyChangedEventArgs _typeChangedEventArgs = new PropertyChangedEventArgs(NameOftype);

		private void OntypeChanged()
		{
			OnPropertyChanged(_typeChangedEventArgs);
		}

		#endregion

		#endregion
		#region level : int

		private int _level;
		/// <summary>
		/// レベル
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull]
		public  int  level
		{
			get { return _level; }
			set
			{
				if (_level != value)
				{
					BeforelevelChanged(value);
					_level = value;
					AfterlevelChanged();

					OnlevelChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforelevelChanged(int newValue);
		partial void AfterlevelChanged();

		public const string NameOflevel = "level";

		private static readonly PropertyChangedEventArgs _levelChangedEventArgs = new PropertyChangedEventArgs(NameOflevel);

		private void OnlevelChanged()
		{
			OnPropertyChanged(_levelChangedEventArgs);
		}

		#endregion

		#endregion
		#region url : string

		private string _url;
		/// <summary>
		/// URL
		/// </summary>
		[Column(DbType="nvarchar(1024)", DataType=DataType.NVarChar, Length=1024), DataMember, NotNull]
		public  string  url
		{
			get { return _url; }
			set
			{
				if (_url != value)
				{
					BeforeurlChanged(value);
					_url = value;
					AfterurlChanged();

					OnurlChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeurlChanged(string newValue);
		partial void AfterurlChanged();

		public const string NameOfurl = "url";

		private static readonly PropertyChangedEventArgs _urlChangedEventArgs = new PropertyChangedEventArgs(NameOfurl);

		private void OnurlChanged()
		{
			OnPropertyChanged(_urlChangedEventArgs);
		}

		#endregion

		#endregion
		#region methods : string

		private string _methods;
		/// <summary>
		/// 処理
		/// </summary>
		[Column(DbType="varchar(200)", DataType=DataType.VarChar, Length=200), DataMember, NotNull]
		public  string  methods
		{
			get { return _methods; }
			set
			{
				if (_methods != value)
				{
					BeforemethodsChanged(value);
					_methods = value;
					AftermethodsChanged();

					OnmethodsChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforemethodsChanged(string newValue);
		partial void AftermethodsChanged();

		public const string NameOfmethods = "methods";

		private static readonly PropertyChangedEventArgs _methodsChangedEventArgs = new PropertyChangedEventArgs(NameOfmethods);

		private void OnmethodsChanged()
		{
			OnPropertyChanged(_methodsChangedEventArgs);
		}

		#endregion

		#endregion
		#region created_at : DateTime

		private DateTime _created_at;
		/// <summary>
		/// 作成日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, NotNull]
		public  DateTime  created_at
		{
			get { return _created_at; }
			set
			{
				if (_created_at != value)
				{
					Beforecreated_atChanged(value);
					_created_at = value;
					Aftercreated_atChanged();

					Oncreated_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecreated_atChanged(DateTime newValue);
		partial void Aftercreated_atChanged();

		public const string NameOfcreated_at = "created_at";

		private static readonly PropertyChangedEventArgs _created_atChangedEventArgs = new PropertyChangedEventArgs(NameOfcreated_at);

		private void Oncreated_atChanged()
		{
			OnPropertyChanged(_created_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region created_by : int?

		private int? _created_by;
		/// <summary>
		/// 作成者
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, Nullable]
		public  int?  created_by
		{
			get { return _created_by; }
			set
			{
				if (_created_by != value)
				{
					Beforecreated_byChanged(value);
					_created_by = value;
					Aftercreated_byChanged();

					Oncreated_byChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecreated_byChanged(int? newValue);
		partial void Aftercreated_byChanged();

		public const string NameOfcreated_by = "created_by";

		private static readonly PropertyChangedEventArgs _created_byChangedEventArgs = new PropertyChangedEventArgs(NameOfcreated_by);

		private void Oncreated_byChanged()
		{
			OnPropertyChanged(_created_byChangedEventArgs);
		}

		#endregion

		#endregion
		#region modified_at : DateTime

		private DateTime _modified_at;
		/// <summary>
		/// 更新日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, NotNull]
		public  DateTime  modified_at
		{
			get { return _modified_at; }
			set
			{
				if (_modified_at != value)
				{
					Beforemodified_atChanged(value);
					_modified_at = value;
					Aftermodified_atChanged();

					Onmodified_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforemodified_atChanged(DateTime newValue);
		partial void Aftermodified_atChanged();

		public const string NameOfmodified_at = "modified_at";

		private static readonly PropertyChangedEventArgs _modified_atChangedEventArgs = new PropertyChangedEventArgs(NameOfmodified_at);

		private void Onmodified_atChanged()
		{
			OnPropertyChanged(_modified_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region modified_by : int?

		private int? _modified_by;
		/// <summary>
		/// 更新者
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, Nullable]
		public  int?  modified_by
		{
			get { return _modified_by; }
			set
			{
				if (_modified_by != value)
				{
					Beforemodified_byChanged(value);
					_modified_by = value;
					Aftermodified_byChanged();

					Onmodified_byChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforemodified_byChanged(int? newValue);
		partial void Aftermodified_byChanged();

		public const string NameOfmodified_by = "modified_by";

		private static readonly PropertyChangedEventArgs _modified_byChangedEventArgs = new PropertyChangedEventArgs(NameOfmodified_by);

		private void Onmodified_byChanged()
		{
			OnPropertyChanged(_modified_byChangedEventArgs);
		}

		#endregion

		#endregion
		#region removed_at : DateTime?

		private DateTime? _removed_at;
		/// <summary>
		/// 削除日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, Nullable]
		public  DateTime?  removed_at
		{
			get { return _removed_at; }
			set
			{
				if (_removed_at != value)
				{
					Beforeremoved_atChanged(value);
					_removed_at = value;
					Afterremoved_atChanged();

					Onremoved_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeremoved_atChanged(DateTime? newValue);
		partial void Afterremoved_atChanged();

		public const string NameOfremoved_at = "removed_at";

		private static readonly PropertyChangedEventArgs _removed_atChangedEventArgs = new PropertyChangedEventArgs(NameOfremoved_at);

		private void Onremoved_atChanged()
		{
			OnPropertyChanged(_removed_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region row_version : byte[]

		private byte[] _row_version;
		/// <summary>
		/// 版
		/// </summary>
		[Column(DbType="timestamp", DataType=DataType.Timestamp, SkipOnInsert=true, SkipOnUpdate=true), DataMember, Nullable]
		public  byte[]  row_version
		{
			get { return _row_version; }
			set
			{
				if (_row_version != value)
				{
					Beforerow_versionChanged(value);
					_row_version = value;
					Afterrow_versionChanged();

					Onrow_versionChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforerow_versionChanged(byte[] newValue);
		partial void Afterrow_versionChanged();

		public const string NameOfrow_version = "row_version";

		private static readonly PropertyChangedEventArgs _row_versionChangedEventArgs = new PropertyChangedEventArgs(NameOfrow_version);

		private void Onrow_versionChanged()
		{
			OnPropertyChanged(_row_versionChangedEventArgs);
		}

		#endregion

		#endregion

		#region enum用アクセスラッパー
		#endregion

		#region Constructor

		public ErrorLog()
		{
			#region フィールド初期化
			uid = default(int);
			category = "";
			type = "";
			level = 0;
			url = "";
			methods = "";
			created_at = DateTime.UtcNow;
			created_by = null;
			modified_at = DateTime.UtcNow;
			modified_by = null;
			removed_at = null;
			row_version = default(byte[]);
			#endregion
		}

		#endregion

		#region Association


		#endregion

		#region INotifyPropertyChanged support

		[field : NonSerialized]
		public virtual event PropertyChangedEventHandler PropertyChanged;

		protected void OnPropertyChanged(string propertyName)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		protected void OnPropertyChanged(PropertyChangedEventArgs arg)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, arg);
			}
		}

		#endregion

	}
	#region エラーログ条件
	/// <summary>
	/// エラーログ条件
	/// </summary>
	[DataContract]
	public partial class ErrorLogCondition : ErrorLogConditionBase
	{
	}

	/// <summary>
	/// エラーログ条件ベース
	/// </summary>
	[DataContract]
	public class ErrorLogConditionBase : ConditionBase<ErrorLog>
	{
		#region properties
		#region uid
		/// <summary>
		/// uid_eqと等しい
		/// </summary>
		[DataMember] public int? uid_eq { get; set; }
		/// <summary>
		/// uid_neと等しくない
		/// </summary>
		[DataMember] public int? uid_ne { get; set; }
		/// <summary>
		/// uid_ltより小さい
		/// </summary>
		[DataMember] public int? uid_lt { get; set; }
		/// <summary>
		/// uid_gtより大きい
		/// </summary>
		[DataMember] public int? uid_gt { get; set; }
		/// <summary>
		/// uid_le以下
		/// </summary>
		[DataMember] public int? uid_le { get; set; }
		/// <summary>
		/// uid_ge以上
		/// </summary>
		[DataMember] public int? uid_ge { get; set; }
		/// <summary>
		/// uid_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> uid_in { get; set; }
		/// <summary>
		/// uid_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> uid_ni { get; set; }
		/// <summary>
		/// uid_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? uid_between { get; set; }
		#endregion
		#region category
		/// <summary>
		/// category_eqと等しい
		/// </summary>
		[DataMember] public string category_eq { get; set; }
		/// <summary>
		/// category_neと等しくない
		/// </summary>
		[DataMember] public string category_ne { get; set; }
		/// <summary>
		/// category_ltより小さい
		/// </summary>
		[DataMember] public string category_lt { get; set; }
		/// <summary>
		/// category_gtより大きい
		/// </summary>
		[DataMember] public string category_gt { get; set; }
		/// <summary>
		/// category_le以下
		/// </summary>
		[DataMember] public string category_le { get; set; }
		/// <summary>
		/// category_ge以上
		/// </summary>
		[DataMember] public string category_ge { get; set; }
		/// <summary>
		/// category_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> category_in { get; set; }
		/// <summary>
		/// category_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> category_ni { get; set; }
		/// <summary>
		/// category_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? category_between { get; set; }
		/// <summary>
		/// category_likeと部分一致する
		/// </summary>
		[DataMember] public string category_like { get; set; }
		#endregion
		#region type
		/// <summary>
		/// type_eqと等しい
		/// </summary>
		[DataMember] public string type_eq { get; set; }
		/// <summary>
		/// type_neと等しくない
		/// </summary>
		[DataMember] public string type_ne { get; set; }
		/// <summary>
		/// type_ltより小さい
		/// </summary>
		[DataMember] public string type_lt { get; set; }
		/// <summary>
		/// type_gtより大きい
		/// </summary>
		[DataMember] public string type_gt { get; set; }
		/// <summary>
		/// type_le以下
		/// </summary>
		[DataMember] public string type_le { get; set; }
		/// <summary>
		/// type_ge以上
		/// </summary>
		[DataMember] public string type_ge { get; set; }
		/// <summary>
		/// type_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> type_in { get; set; }
		/// <summary>
		/// type_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> type_ni { get; set; }
		/// <summary>
		/// type_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? type_between { get; set; }
		/// <summary>
		/// type_likeと部分一致する
		/// </summary>
		[DataMember] public string type_like { get; set; }
		#endregion
		#region level
		/// <summary>
		/// level_eqと等しい
		/// </summary>
		[DataMember] public int? level_eq { get; set; }
		/// <summary>
		/// level_neと等しくない
		/// </summary>
		[DataMember] public int? level_ne { get; set; }
		/// <summary>
		/// level_ltより小さい
		/// </summary>
		[DataMember] public int? level_lt { get; set; }
		/// <summary>
		/// level_gtより大きい
		/// </summary>
		[DataMember] public int? level_gt { get; set; }
		/// <summary>
		/// level_le以下
		/// </summary>
		[DataMember] public int? level_le { get; set; }
		/// <summary>
		/// level_ge以上
		/// </summary>
		[DataMember] public int? level_ge { get; set; }
		/// <summary>
		/// level_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> level_in { get; set; }
		/// <summary>
		/// level_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> level_ni { get; set; }
		/// <summary>
		/// level_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? level_between { get; set; }
		#endregion
		#region url
		/// <summary>
		/// url_eqと等しい
		/// </summary>
		[DataMember] public string url_eq { get; set; }
		/// <summary>
		/// url_neと等しくない
		/// </summary>
		[DataMember] public string url_ne { get; set; }
		/// <summary>
		/// url_ltより小さい
		/// </summary>
		[DataMember] public string url_lt { get; set; }
		/// <summary>
		/// url_gtより大きい
		/// </summary>
		[DataMember] public string url_gt { get; set; }
		/// <summary>
		/// url_le以下
		/// </summary>
		[DataMember] public string url_le { get; set; }
		/// <summary>
		/// url_ge以上
		/// </summary>
		[DataMember] public string url_ge { get; set; }
		/// <summary>
		/// url_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> url_in { get; set; }
		/// <summary>
		/// url_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> url_ni { get; set; }
		/// <summary>
		/// url_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? url_between { get; set; }
		/// <summary>
		/// url_likeと部分一致する
		/// </summary>
		[DataMember] public string url_like { get; set; }
		#endregion
		#region methods
		/// <summary>
		/// methods_eqと等しい
		/// </summary>
		[DataMember] public string methods_eq { get; set; }
		/// <summary>
		/// methods_neと等しくない
		/// </summary>
		[DataMember] public string methods_ne { get; set; }
		/// <summary>
		/// methods_ltより小さい
		/// </summary>
		[DataMember] public string methods_lt { get; set; }
		/// <summary>
		/// methods_gtより大きい
		/// </summary>
		[DataMember] public string methods_gt { get; set; }
		/// <summary>
		/// methods_le以下
		/// </summary>
		[DataMember] public string methods_le { get; set; }
		/// <summary>
		/// methods_ge以上
		/// </summary>
		[DataMember] public string methods_ge { get; set; }
		/// <summary>
		/// methods_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> methods_in { get; set; }
		/// <summary>
		/// methods_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> methods_ni { get; set; }
		/// <summary>
		/// methods_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? methods_between { get; set; }
		/// <summary>
		/// methods_likeと部分一致する
		/// </summary>
		[DataMember] public string methods_like { get; set; }
		#endregion
		#region created_at
		/// <summary>
		/// created_at_eqと等しい
		/// </summary>
		[DataMember] public DateTime? created_at_eq { get; set; }
		/// <summary>
		/// created_at_neと等しくない
		/// </summary>
		[DataMember] public DateTime? created_at_ne { get; set; }
		/// <summary>
		/// created_at_ltより小さい
		/// </summary>
		[DataMember] public DateTime? created_at_lt { get; set; }
		/// <summary>
		/// created_at_gtより大きい
		/// </summary>
		[DataMember] public DateTime? created_at_gt { get; set; }
		/// <summary>
		/// created_at_le以下
		/// </summary>
		[DataMember] public DateTime? created_at_le { get; set; }
		/// <summary>
		/// created_at_ge以上
		/// </summary>
		[DataMember] public DateTime? created_at_ge { get; set; }
		/// <summary>
		/// created_at_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> created_at_in { get; set; }
		/// <summary>
		/// created_at_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> created_at_ni { get; set; }
		/// <summary>
		/// created_at_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? created_at_between { get; set; }
		#endregion
		#region created_by
		/// <summary>
		/// created_by_eqと等しい
		/// </summary>
		[DataMember] public int? created_by_eq { get; set; }
		/// <summary>
		/// created_by_neと等しくない
		/// </summary>
		[DataMember] public int? created_by_ne { get; set; }
		/// <summary>
		/// created_by_ltより小さい
		/// </summary>
		[DataMember] public int? created_by_lt { get; set; }
		/// <summary>
		/// created_by_gtより大きい
		/// </summary>
		[DataMember] public int? created_by_gt { get; set; }
		/// <summary>
		/// created_by_le以下
		/// </summary>
		[DataMember] public int? created_by_le { get; set; }
		/// <summary>
		/// created_by_ge以上
		/// </summary>
		[DataMember] public int? created_by_ge { get; set; }
		/// <summary>
		/// created_by_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> created_by_in { get; set; }
		/// <summary>
		/// created_by_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> created_by_ni { get; set; }
		/// <summary>
		/// created_by_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? created_by_between { get; set; }
		/// <summary>
		/// created_byがNULLか
		/// </summary>
		[DataMember] public bool created_by_isnull { get; set; } =  false ;
		/// <summary>
		/// created_byがNULLではないか
		/// </summary>
		[DataMember] public bool created_by_isnotnull { get; set; } = false;
		#endregion
		#region modified_at
		/// <summary>
		/// modified_at_eqと等しい
		/// </summary>
		[DataMember] public DateTime? modified_at_eq { get; set; }
		/// <summary>
		/// modified_at_neと等しくない
		/// </summary>
		[DataMember] public DateTime? modified_at_ne { get; set; }
		/// <summary>
		/// modified_at_ltより小さい
		/// </summary>
		[DataMember] public DateTime? modified_at_lt { get; set; }
		/// <summary>
		/// modified_at_gtより大きい
		/// </summary>
		[DataMember] public DateTime? modified_at_gt { get; set; }
		/// <summary>
		/// modified_at_le以下
		/// </summary>
		[DataMember] public DateTime? modified_at_le { get; set; }
		/// <summary>
		/// modified_at_ge以上
		/// </summary>
		[DataMember] public DateTime? modified_at_ge { get; set; }
		/// <summary>
		/// modified_at_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> modified_at_in { get; set; }
		/// <summary>
		/// modified_at_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> modified_at_ni { get; set; }
		/// <summary>
		/// modified_at_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? modified_at_between { get; set; }
		#endregion
		#region modified_by
		/// <summary>
		/// modified_by_eqと等しい
		/// </summary>
		[DataMember] public int? modified_by_eq { get; set; }
		/// <summary>
		/// modified_by_neと等しくない
		/// </summary>
		[DataMember] public int? modified_by_ne { get; set; }
		/// <summary>
		/// modified_by_ltより小さい
		/// </summary>
		[DataMember] public int? modified_by_lt { get; set; }
		/// <summary>
		/// modified_by_gtより大きい
		/// </summary>
		[DataMember] public int? modified_by_gt { get; set; }
		/// <summary>
		/// modified_by_le以下
		/// </summary>
		[DataMember] public int? modified_by_le { get; set; }
		/// <summary>
		/// modified_by_ge以上
		/// </summary>
		[DataMember] public int? modified_by_ge { get; set; }
		/// <summary>
		/// modified_by_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> modified_by_in { get; set; }
		/// <summary>
		/// modified_by_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> modified_by_ni { get; set; }
		/// <summary>
		/// modified_by_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? modified_by_between { get; set; }
		/// <summary>
		/// modified_byがNULLか
		/// </summary>
		[DataMember] public bool modified_by_isnull { get; set; } =  false ;
		/// <summary>
		/// modified_byがNULLではないか
		/// </summary>
		[DataMember] public bool modified_by_isnotnull { get; set; } = false;
		#endregion
		#region removed_at
		/// <summary>
		/// removed_at_eqと等しい
		/// </summary>
		[DataMember] public DateTime? removed_at_eq { get; set; }
		/// <summary>
		/// removed_at_neと等しくない
		/// </summary>
		[DataMember] public DateTime? removed_at_ne { get; set; }
		/// <summary>
		/// removed_at_ltより小さい
		/// </summary>
		[DataMember] public DateTime? removed_at_lt { get; set; }
		/// <summary>
		/// removed_at_gtより大きい
		/// </summary>
		[DataMember] public DateTime? removed_at_gt { get; set; }
		/// <summary>
		/// removed_at_le以下
		/// </summary>
		[DataMember] public DateTime? removed_at_le { get; set; }
		/// <summary>
		/// removed_at_ge以上
		/// </summary>
		[DataMember] public DateTime? removed_at_ge { get; set; }
		/// <summary>
		/// removed_at_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> removed_at_in { get; set; }
		/// <summary>
		/// removed_at_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> removed_at_ni { get; set; }
		/// <summary>
		/// removed_at_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? removed_at_between { get; set; }
		/// <summary>
		/// removed_atがNULLか
		/// </summary>
		[DataMember] public bool removed_at_isnull { get; set; } =  true ;
		/// <summary>
		/// removed_atがNULLではないか
		/// </summary>
		[DataMember] public bool removed_at_isnotnull { get; set; } = false;
		#endregion
		#region row_version
		/// <summary>
		/// row_version_eqと等しい
		/// </summary>
		[DataMember] public byte[] row_version_eq { get; set; }
		/// <summary>
		/// row_version_neと等しくない
		/// </summary>
		[DataMember] public byte[] row_version_ne { get; set; }
		/// <summary>
		/// row_versionがNULLか
		/// </summary>
		[DataMember] public bool row_version_isnull { get; set; } =  false ;
		/// <summary>
		/// row_versionがNULLではないか
		/// </summary>
		[DataMember] public bool row_version_isnotnull { get; set; } = false;
		#endregion
		#endregion

		#region override
		override public Expression<Func<ErrorLog, bool>> CreatePredicate()
		{
			var predicate = base.CreatePredicate();

			#region uid
			if (uid_eq != null) predicate = predicate.And(_ => _.uid == uid_eq);
			if (uid_ne != null) predicate = predicate.And(_ => _.uid != uid_ne);
			if (uid_lt != null) predicate = predicate.And(_ => _.uid < uid_lt);
			if (uid_gt != null) predicate = predicate.And(_ => _.uid > uid_gt);
			if (uid_le != null) predicate = predicate.And(_ => _.uid <= uid_le);
			if (uid_ge != null) predicate = predicate.And(_ => _.uid >= uid_ge);
			if (uid_in != null) predicate = predicate.And(_ => uid_in.Contains(_.uid));
			if (uid_ni != null) predicate = predicate.And(_ => !uid_ni.Contains(_.uid));
			#endregion
			#region category
			if (category_eq != null) predicate = predicate.And(_ => _.category == category_eq);
			if (category_ne != null) predicate = predicate.And(_ => _.category != category_ne);
			if (category_lt != null) predicate = predicate.And(_ => category_lt.CompareTo(_.category) > 0);
			if (category_gt != null) predicate = predicate.And(_ => category_gt.CompareTo(_.category) < 0);
			if (category_le != null) predicate = predicate.And(_ => category_le.CompareTo(_.category) >= 0);
			if (category_ge != null) predicate = predicate.And(_ => category_ge.CompareTo(_.category) <= 0);
			if (category_in != null) predicate = predicate.And(_ => category_in.Contains(_.category));
			if (category_ni != null) predicate = predicate.And(_ => !category_ni.Contains(_.category));
			#endregion
			#region type
			if (type_eq != null) predicate = predicate.And(_ => _.type == type_eq);
			if (type_ne != null) predicate = predicate.And(_ => _.type != type_ne);
			if (type_lt != null) predicate = predicate.And(_ => type_lt.CompareTo(_.type) > 0);
			if (type_gt != null) predicate = predicate.And(_ => type_gt.CompareTo(_.type) < 0);
			if (type_le != null) predicate = predicate.And(_ => type_le.CompareTo(_.type) >= 0);
			if (type_ge != null) predicate = predicate.And(_ => type_ge.CompareTo(_.type) <= 0);
			if (type_in != null) predicate = predicate.And(_ => type_in.Contains(_.type));
			if (type_ni != null) predicate = predicate.And(_ => !type_ni.Contains(_.type));
			#endregion
			#region level
			if (level_eq != null) predicate = predicate.And(_ => _.level == level_eq);
			if (level_ne != null) predicate = predicate.And(_ => _.level != level_ne);
			if (level_lt != null) predicate = predicate.And(_ => _.level < level_lt);
			if (level_gt != null) predicate = predicate.And(_ => _.level > level_gt);
			if (level_le != null) predicate = predicate.And(_ => _.level <= level_le);
			if (level_ge != null) predicate = predicate.And(_ => _.level >= level_ge);
			if (level_in != null) predicate = predicate.And(_ => level_in.Contains(_.level));
			if (level_ni != null) predicate = predicate.And(_ => !level_ni.Contains(_.level));
			#endregion
			#region url
			if (url_eq != null) predicate = predicate.And(_ => _.url == url_eq);
			if (url_ne != null) predicate = predicate.And(_ => _.url != url_ne);
			if (url_lt != null) predicate = predicate.And(_ => url_lt.CompareTo(_.url) > 0);
			if (url_gt != null) predicate = predicate.And(_ => url_gt.CompareTo(_.url) < 0);
			if (url_le != null) predicate = predicate.And(_ => url_le.CompareTo(_.url) >= 0);
			if (url_ge != null) predicate = predicate.And(_ => url_ge.CompareTo(_.url) <= 0);
			if (url_in != null) predicate = predicate.And(_ => url_in.Contains(_.url));
			if (url_ni != null) predicate = predicate.And(_ => !url_ni.Contains(_.url));
			#endregion
			#region methods
			if (methods_eq != null) predicate = predicate.And(_ => _.methods == methods_eq);
			if (methods_ne != null) predicate = predicate.And(_ => _.methods != methods_ne);
			if (methods_lt != null) predicate = predicate.And(_ => methods_lt.CompareTo(_.methods) > 0);
			if (methods_gt != null) predicate = predicate.And(_ => methods_gt.CompareTo(_.methods) < 0);
			if (methods_le != null) predicate = predicate.And(_ => methods_le.CompareTo(_.methods) >= 0);
			if (methods_ge != null) predicate = predicate.And(_ => methods_ge.CompareTo(_.methods) <= 0);
			if (methods_in != null) predicate = predicate.And(_ => methods_in.Contains(_.methods));
			if (methods_ni != null) predicate = predicate.And(_ => !methods_ni.Contains(_.methods));
			#endregion
			#region created_at
			if (created_at_eq != null) predicate = predicate.And(_ => _.created_at == created_at_eq);
			if (created_at_ne != null) predicate = predicate.And(_ => _.created_at != created_at_ne);
			if (created_at_lt != null) predicate = predicate.And(_ => _.created_at < created_at_lt);
			if (created_at_gt != null) predicate = predicate.And(_ => _.created_at > created_at_gt);
			if (created_at_le != null) predicate = predicate.And(_ => _.created_at <= created_at_le);
			if (created_at_ge != null) predicate = predicate.And(_ => _.created_at >= created_at_ge);
			if (created_at_in != null) predicate = predicate.And(_ => created_at_in.Contains(_.created_at));
			if (created_at_ni != null) predicate = predicate.And(_ => !created_at_ni.Contains(_.created_at));
			#endregion
			#region created_by
			if (created_by_eq != null) predicate = predicate.And(_ => _.created_by == created_by_eq);
			if (created_by_ne != null) predicate = predicate.And(_ => _.created_by != created_by_ne);
			if (created_by_lt != null) predicate = predicate.And(_ => _.created_by < created_by_lt);
			if (created_by_gt != null) predicate = predicate.And(_ => _.created_by > created_by_gt);
			if (created_by_le != null) predicate = predicate.And(_ => _.created_by <= created_by_le);
			if (created_by_ge != null) predicate = predicate.And(_ => _.created_by >= created_by_ge);
			if (created_by_in != null) predicate = predicate.And(_ => created_by_in.Contains(_.created_by.Value));
			if (created_by_ni != null) predicate = predicate.And(_ => !created_by_ni.Contains(_.created_by.Value));
			if (created_by_isnull) predicate = predicate.And(_ => _.created_by == null);
			if (created_by_isnotnull) predicate = predicate.And(_ => _.created_by != null);
			#endregion
			#region modified_at
			if (modified_at_eq != null) predicate = predicate.And(_ => _.modified_at == modified_at_eq);
			if (modified_at_ne != null) predicate = predicate.And(_ => _.modified_at != modified_at_ne);
			if (modified_at_lt != null) predicate = predicate.And(_ => _.modified_at < modified_at_lt);
			if (modified_at_gt != null) predicate = predicate.And(_ => _.modified_at > modified_at_gt);
			if (modified_at_le != null) predicate = predicate.And(_ => _.modified_at <= modified_at_le);
			if (modified_at_ge != null) predicate = predicate.And(_ => _.modified_at >= modified_at_ge);
			if (modified_at_in != null) predicate = predicate.And(_ => modified_at_in.Contains(_.modified_at));
			if (modified_at_ni != null) predicate = predicate.And(_ => !modified_at_ni.Contains(_.modified_at));
			#endregion
			#region modified_by
			if (modified_by_eq != null) predicate = predicate.And(_ => _.modified_by == modified_by_eq);
			if (modified_by_ne != null) predicate = predicate.And(_ => _.modified_by != modified_by_ne);
			if (modified_by_lt != null) predicate = predicate.And(_ => _.modified_by < modified_by_lt);
			if (modified_by_gt != null) predicate = predicate.And(_ => _.modified_by > modified_by_gt);
			if (modified_by_le != null) predicate = predicate.And(_ => _.modified_by <= modified_by_le);
			if (modified_by_ge != null) predicate = predicate.And(_ => _.modified_by >= modified_by_ge);
			if (modified_by_in != null) predicate = predicate.And(_ => modified_by_in.Contains(_.modified_by.Value));
			if (modified_by_ni != null) predicate = predicate.And(_ => !modified_by_ni.Contains(_.modified_by.Value));
			if (modified_by_isnull) predicate = predicate.And(_ => _.modified_by == null);
			if (modified_by_isnotnull) predicate = predicate.And(_ => _.modified_by != null);
			#endregion
			#region removed_at
			if (removed_at_eq != null) predicate = predicate.And(_ => _.removed_at == removed_at_eq);
			if (removed_at_ne != null) predicate = predicate.And(_ => _.removed_at != removed_at_ne);
			if (removed_at_lt != null) predicate = predicate.And(_ => _.removed_at < removed_at_lt);
			if (removed_at_gt != null) predicate = predicate.And(_ => _.removed_at > removed_at_gt);
			if (removed_at_le != null) predicate = predicate.And(_ => _.removed_at <= removed_at_le);
			if (removed_at_ge != null) predicate = predicate.And(_ => _.removed_at >= removed_at_ge);
			if (removed_at_in != null) predicate = predicate.And(_ => removed_at_in.Contains(_.removed_at.Value));
			if (removed_at_ni != null) predicate = predicate.And(_ => !removed_at_ni.Contains(_.removed_at.Value));
			if (removed_at_isnull) predicate = predicate.And(_ => _.removed_at == null);
			if (removed_at_isnotnull) predicate = predicate.And(_ => _.removed_at != null);
			#endregion
			#region row_version
			if (row_version_eq != null) predicate = predicate.And(_ => _.row_version == row_version_eq);
			if (row_version_ne != null) predicate = predicate.And(_ => _.row_version != row_version_ne);
			if (row_version_isnull) predicate = predicate.And(_ => _.row_version == null);
			if (row_version_isnotnull) predicate = predicate.And(_ => _.row_version != null);
			#endregion

			return predicate;
		}
		#endregion
	}
	#endregion
	#endregion
	#region 職員
	/// <summary>
	/// 職員
	/// </summary>
	[Table(Schema="HumanResource", Name="Staff"), DataContract]
	public partial class Staff : TableBase<Staff>, INotifyPropertyChanged
	{
		#region uid : int

		private int _uid;
		/// <summary>
		/// ユニークID
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull, Identity]
		public  int  uid
		{
			get { return _uid; }
			set
			{
				if (_uid != value)
				{
					BeforeuidChanged(value);
					_uid = value;
					AfteruidChanged();

					OnuidChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeuidChanged(int newValue);
		partial void AfteruidChanged();

		public const string NameOfuid = "uid";

		private static readonly PropertyChangedEventArgs _uidChangedEventArgs = new PropertyChangedEventArgs(NameOfuid);

		private void OnuidChanged()
		{
			OnPropertyChanged(_uidChangedEventArgs);
		}

		#endregion

		#endregion
		#region user_type : int

		private int _user_type;
		/// <summary>
		/// 利用者種別
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull, System.ComponentModel.DataAnnotations.Required]
		public  int  user_type
		{
			get { return _user_type; }
			set
			{
				if (_user_type != value)
				{
					Beforeuser_typeChanged(value);
					_user_type = value;
					Afteruser_typeChanged();

					Onuser_typeChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeuser_typeChanged(int newValue);
		partial void Afteruser_typeChanged();

		public const string NameOfuser_type = "user_type";

		private static readonly PropertyChangedEventArgs _user_typeChangedEventArgs = new PropertyChangedEventArgs(NameOfuser_type);

		private void Onuser_typeChanged()
		{
			OnPropertyChanged(_user_typeChangedEventArgs);
		}

		#endregion

		#endregion
		#region staff_no : string

		private string _staff_no;
		/// <summary>
		/// 職員番号
		/// </summary>
		[Column(DbType="varchar(16)", DataType=DataType.VarChar, Length=16), DataMember, NotNull, PrimaryKey(Order = 1), System.ComponentModel.DataAnnotations.Required]
		public  string  staff_no
		{
			get { return _staff_no; }
			set
			{
				if (_staff_no != value)
				{
					Beforestaff_noChanged(value);
					_staff_no = value;
					Afterstaff_noChanged();

					Onstaff_noChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforestaff_noChanged(string newValue);
		partial void Afterstaff_noChanged();

		public const string NameOfstaff_no = "staff_no";

		private static readonly PropertyChangedEventArgs _staff_noChangedEventArgs = new PropertyChangedEventArgs(NameOfstaff_no);

		private void Onstaff_noChanged()
		{
			OnPropertyChanged(_staff_noChangedEventArgs);
		}

		#endregion

		#endregion
		#region sex_type : int?

		private int? _sex_type;
		/// <summary>
		/// 性別
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, Nullable, System.ComponentModel.DataAnnotations.Required]
		public  int?  sex_type
		{
			get { return _sex_type; }
			set
			{
				if (_sex_type != value)
				{
					Beforesex_typeChanged(value);
					_sex_type = value;
					Aftersex_typeChanged();

					Onsex_typeChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforesex_typeChanged(int? newValue);
		partial void Aftersex_typeChanged();

		public const string NameOfsex_type = "sex_type";

		private static readonly PropertyChangedEventArgs _sex_typeChangedEventArgs = new PropertyChangedEventArgs(NameOfsex_type);

		private void Onsex_typeChanged()
		{
			OnPropertyChanged(_sex_typeChangedEventArgs);
		}

		#endregion

		#endregion
		#region birth_date : DateTime?

		private DateTime? _birth_date;
		/// <summary>
		/// 生年月日
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, Nullable]
		public  DateTime?  birth_date
		{
			get { return _birth_date; }
			set
			{
				if (_birth_date != value)
				{
					Beforebirth_dateChanged(value);
					_birth_date = value;
					Afterbirth_dateChanged();

					Onbirth_dateChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforebirth_dateChanged(DateTime? newValue);
		partial void Afterbirth_dateChanged();

		public const string NameOfbirth_date = "birth_date";

		private static readonly PropertyChangedEventArgs _birth_dateChangedEventArgs = new PropertyChangedEventArgs(NameOfbirth_date);

		private void Onbirth_dateChanged()
		{
			OnPropertyChanged(_birth_dateChangedEventArgs);
		}

		#endregion

		#endregion
		#region created_at : DateTime

		private DateTime _created_at;
		/// <summary>
		/// 作成日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, NotNull]
		public  DateTime  created_at
		{
			get { return _created_at; }
			set
			{
				if (_created_at != value)
				{
					Beforecreated_atChanged(value);
					_created_at = value;
					Aftercreated_atChanged();

					Oncreated_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecreated_atChanged(DateTime newValue);
		partial void Aftercreated_atChanged();

		public const string NameOfcreated_at = "created_at";

		private static readonly PropertyChangedEventArgs _created_atChangedEventArgs = new PropertyChangedEventArgs(NameOfcreated_at);

		private void Oncreated_atChanged()
		{
			OnPropertyChanged(_created_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region created_by : int?

		private int? _created_by;
		/// <summary>
		/// 作成者
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, Nullable]
		public  int?  created_by
		{
			get { return _created_by; }
			set
			{
				if (_created_by != value)
				{
					Beforecreated_byChanged(value);
					_created_by = value;
					Aftercreated_byChanged();

					Oncreated_byChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecreated_byChanged(int? newValue);
		partial void Aftercreated_byChanged();

		public const string NameOfcreated_by = "created_by";

		private static readonly PropertyChangedEventArgs _created_byChangedEventArgs = new PropertyChangedEventArgs(NameOfcreated_by);

		private void Oncreated_byChanged()
		{
			OnPropertyChanged(_created_byChangedEventArgs);
		}

		#endregion

		#endregion
		#region modified_at : DateTime

		private DateTime _modified_at;
		/// <summary>
		/// 更新日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, NotNull]
		public  DateTime  modified_at
		{
			get { return _modified_at; }
			set
			{
				if (_modified_at != value)
				{
					Beforemodified_atChanged(value);
					_modified_at = value;
					Aftermodified_atChanged();

					Onmodified_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforemodified_atChanged(DateTime newValue);
		partial void Aftermodified_atChanged();

		public const string NameOfmodified_at = "modified_at";

		private static readonly PropertyChangedEventArgs _modified_atChangedEventArgs = new PropertyChangedEventArgs(NameOfmodified_at);

		private void Onmodified_atChanged()
		{
			OnPropertyChanged(_modified_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region modified_by : int?

		private int? _modified_by;
		/// <summary>
		/// 更新者
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, Nullable]
		public  int?  modified_by
		{
			get { return _modified_by; }
			set
			{
				if (_modified_by != value)
				{
					Beforemodified_byChanged(value);
					_modified_by = value;
					Aftermodified_byChanged();

					Onmodified_byChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforemodified_byChanged(int? newValue);
		partial void Aftermodified_byChanged();

		public const string NameOfmodified_by = "modified_by";

		private static readonly PropertyChangedEventArgs _modified_byChangedEventArgs = new PropertyChangedEventArgs(NameOfmodified_by);

		private void Onmodified_byChanged()
		{
			OnPropertyChanged(_modified_byChangedEventArgs);
		}

		#endregion

		#endregion
		#region removed_at : DateTime?

		private DateTime? _removed_at;
		/// <summary>
		/// 削除日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, Nullable]
		public  DateTime?  removed_at
		{
			get { return _removed_at; }
			set
			{
				if (_removed_at != value)
				{
					Beforeremoved_atChanged(value);
					_removed_at = value;
					Afterremoved_atChanged();

					Onremoved_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeremoved_atChanged(DateTime? newValue);
		partial void Afterremoved_atChanged();

		public const string NameOfremoved_at = "removed_at";

		private static readonly PropertyChangedEventArgs _removed_atChangedEventArgs = new PropertyChangedEventArgs(NameOfremoved_at);

		private void Onremoved_atChanged()
		{
			OnPropertyChanged(_removed_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region row_version : byte[]

		private byte[] _row_version;
		/// <summary>
		/// 版
		/// </summary>
		[Column(DbType="timestamp", DataType=DataType.Timestamp, SkipOnInsert=true, SkipOnUpdate=true), DataMember, Nullable]
		public  byte[]  row_version
		{
			get { return _row_version; }
			set
			{
				if (_row_version != value)
				{
					Beforerow_versionChanged(value);
					_row_version = value;
					Afterrow_versionChanged();

					Onrow_versionChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforerow_versionChanged(byte[] newValue);
		partial void Afterrow_versionChanged();

		public const string NameOfrow_version = "row_version";

		private static readonly PropertyChangedEventArgs _row_versionChangedEventArgs = new PropertyChangedEventArgs(NameOfrow_version);

		private void Onrow_versionChanged()
		{
			OnPropertyChanged(_row_versionChangedEventArgs);
		}

		#endregion

		#endregion

		#region enum用アクセスラッパー
		/// <summary>
		/// user_typeのenumラッパー
		/// </summary>
		[ColumnAlias("user_type")]
		public UserType UserType
		{
			get => (UserType)user_type;
			set => user_type = value.Val();
		}
		#endregion

		#region Constructor

		public Staff()
		{
			#region フィールド初期化
			uid = default(int);
			user_type = 1;
			staff_no = "";
			sex_type = null;
			birth_date = null;
			created_at = DateTime.UtcNow;
			created_by = null;
			modified_at = DateTime.UtcNow;
			modified_by = null;
			removed_at = null;
			row_version = default(byte[]);
			#endregion
		}

		#endregion

		#region Association

		#region SexType : sex_type (FK_Staff_SexType)

		private SexType _SexType;
		/// <summary>
		/// FK_Staff_SexType
		/// </summary>
		[Association(ThisKey="sex_type", OtherKey="sex_type_id", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_Staff_SexType", BackReferenceName="Staff"), DataMember]
		public  SexType  SexType
		{
			get { return _SexType; }
			set
			{
				if (_SexType != value)
				{
					BeforeSexTypeChanged(value);
					_SexType = value;
					AfterSexTypeChanged();

					OnSexTypeChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeSexTypeChanged(SexType newValue);
		partial void AfterSexTypeChanged ();

		public const string NameOfSexType = "SexType";

		private static readonly PropertyChangedEventArgs _SexTypeChangedEventArgs = new PropertyChangedEventArgs(NameOfSexType);

		private void OnSexTypeChanged()
		{
			OnPropertyChanged(_SexTypeChangedEventArgs);
		}

		#endregion

		#endregion
		#region IEnumerable<Account> : staff_no to Account : staff_no (FK_Staff_Account)

		private IEnumerable<Account> _AccountList;
		/// <summary>
		/// FK_Staff_Account_BackReference
		/// </summary>
		[Association(ThisKey="staff_no", OtherKey="staff_no", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true), DataMember]
		public  IEnumerable<Account>  AccountList
		{
			get { return _AccountList; }
			set
			{
				if (_AccountList != value)
				{
					BeforeAccountListChanged(value);
					_AccountList = value;
					AfterAccountListChanged();

					OnAccountListChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeAccountListChanged(IEnumerable<Account> newValue);
		partial void AfterAccountListChanged ();

		public const string NameOfAccountList = "AccountList";

		private static readonly PropertyChangedEventArgs _AccountListChangedEventArgs = new PropertyChangedEventArgs(NameOfAccountList);

		private void OnAccountListChanged()
		{
			OnPropertyChanged(_AccountListChangedEventArgs);
		}

		#endregion

		#endregion
		#region IEnumerable<PersonName> : user_type,staff_no to PersonName : user_type,generic_user_no (FK_Staff_Name)

		private IEnumerable<PersonName> _NameList;
		/// <summary>
		/// FK_Staff_Name_BackReference
		/// </summary>
		[Association(ThisKey="user_type,staff_no", OtherKey="user_type,generic_user_no", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true), DataMember]
		public  IEnumerable<PersonName>  NameList
		{
			get { return _NameList; }
			set
			{
				if (_NameList != value)
				{
					BeforeNameListChanged(value);
					_NameList = value;
					AfterNameListChanged();

					OnNameListChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeNameListChanged(IEnumerable<PersonName> newValue);
		partial void AfterNameListChanged ();

		public const string NameOfNameList = "NameList";

		private static readonly PropertyChangedEventArgs _NameListChangedEventArgs = new PropertyChangedEventArgs(NameOfNameList);

		private void OnNameListChanged()
		{
			OnPropertyChanged(_NameListChangedEventArgs);
		}

		#endregion

		#endregion
		#region IEnumerable<Address> : user_type,staff_no to Address : user_type,generic_user_no (FK_Staff_Address)

		private IEnumerable<Address> _AddressList;
		/// <summary>
		/// FK_Staff_Address_BackReference
		/// </summary>
		[Association(ThisKey="user_type,staff_no", OtherKey="user_type,generic_user_no", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true), DataMember]
		public  IEnumerable<Address>  AddressList
		{
			get { return _AddressList; }
			set
			{
				if (_AddressList != value)
				{
					BeforeAddressListChanged(value);
					_AddressList = value;
					AfterAddressListChanged();

					OnAddressListChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeAddressListChanged(IEnumerable<Address> newValue);
		partial void AfterAddressListChanged ();

		public const string NameOfAddressList = "AddressList";

		private static readonly PropertyChangedEventArgs _AddressListChangedEventArgs = new PropertyChangedEventArgs(NameOfAddressList);

		private void OnAddressListChanged()
		{
			OnPropertyChanged(_AddressListChangedEventArgs);
		}

		#endregion

		#endregion
		#region IEnumerable<Contact> : user_type,staff_no to Contact : user_type,generic_user_no (FK_Staff_Contact)

		private IEnumerable<Contact> _ContactList;
		/// <summary>
		/// FK_Staff_Contact_BackReference
		/// </summary>
		[Association(ThisKey="user_type,staff_no", OtherKey="user_type,generic_user_no", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true), DataMember]
		public  IEnumerable<Contact>  ContactList
		{
			get { return _ContactList; }
			set
			{
				if (_ContactList != value)
				{
					BeforeContactListChanged(value);
					_ContactList = value;
					AfterContactListChanged();

					OnContactListChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeContactListChanged(IEnumerable<Contact> newValue);
		partial void AfterContactListChanged ();

		public const string NameOfContactList = "ContactList";

		private static readonly PropertyChangedEventArgs _ContactListChangedEventArgs = new PropertyChangedEventArgs(NameOfContactList);

		private void OnContactListChanged()
		{
			OnPropertyChanged(_ContactListChangedEventArgs);
		}

		#endregion

		#endregion

		#endregion

		#region INotifyPropertyChanged support

		[field : NonSerialized]
		public virtual event PropertyChangedEventHandler PropertyChanged;

		protected void OnPropertyChanged(string propertyName)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		protected void OnPropertyChanged(PropertyChangedEventArgs arg)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, arg);
			}
		}

		#endregion

	}
	#region 職員条件
	/// <summary>
	/// 職員条件
	/// </summary>
	[DataContract]
	public partial class StaffCondition : StaffConditionBase
	{
	}

	/// <summary>
	/// 職員条件ベース
	/// </summary>
	[DataContract]
	public class StaffConditionBase : ConditionBase<Staff>
	{
		#region properties
		#region uid
		/// <summary>
		/// uid_eqと等しい
		/// </summary>
		[DataMember] public int? uid_eq { get; set; }
		/// <summary>
		/// uid_neと等しくない
		/// </summary>
		[DataMember] public int? uid_ne { get; set; }
		/// <summary>
		/// uid_ltより小さい
		/// </summary>
		[DataMember] public int? uid_lt { get; set; }
		/// <summary>
		/// uid_gtより大きい
		/// </summary>
		[DataMember] public int? uid_gt { get; set; }
		/// <summary>
		/// uid_le以下
		/// </summary>
		[DataMember] public int? uid_le { get; set; }
		/// <summary>
		/// uid_ge以上
		/// </summary>
		[DataMember] public int? uid_ge { get; set; }
		/// <summary>
		/// uid_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> uid_in { get; set; }
		/// <summary>
		/// uid_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> uid_ni { get; set; }
		/// <summary>
		/// uid_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? uid_between { get; set; }
		#endregion
		#region user_type (UserType)
		private int? _user_type_eq;
		/// <summary>
		/// UserType_eqと等しい
		/// </summary>
		[DataMember] public UserType? UserType_eq
		{
			get => _user_type_eq?.ToUserType();
			set => _user_type_eq = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _user_type_ne;
		/// <summary>
		/// UserType_neと等しくない
		/// </summary>
		[DataMember] public UserType? UserType_ne
		{
			get => _user_type_ne?.ToUserType();
			set => _user_type_ne = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _user_type_lt;
		/// <summary>
		/// UserType_ltより小さい
		/// </summary>
		[DataMember] public UserType? UserType_lt
		{
			get => _user_type_lt?.ToUserType();
			set => _user_type_lt = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _user_type_gt;
		/// <summary>
		/// UserType_gtより大きい
		/// </summary>
		[DataMember] public UserType? UserType_gt
		{
			get => _user_type_gt?.ToUserType();
			set => _user_type_gt = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _user_type_le;
		/// <summary>
		/// UserType_le以下
		/// </summary>
		[DataMember] public UserType? UserType_le
		{
			get => _user_type_le?.ToUserType();
			set => _user_type_le = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _user_type_ge;
		/// <summary>
		/// UserType_ge以上
		/// </summary>
		[DataMember] public UserType? UserType_ge
		{
			get => _user_type_ge?.ToUserType();
			set => _user_type_ge = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private IEnumerable<int> _user_type_in;
		/// <summary>
		/// UserType_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<UserType> UserType_in
		{
			get => _user_type_in?.Select(_ => _.ToUserType().Value) ?? Enumerable.Empty<UserType>();
			set => _user_type_in = value.Select(_ => _.Val());
		}
		private IEnumerable<int> _user_type_ni;
		/// <summary>
		/// UserType_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<UserType> UserType_ni
		{
			get => _user_type_ni?.Select(_ => _.ToUserType().Value) ?? Enumerable.Empty<UserType>();
			set => _user_type_ni = value.Select(_ => _.Val());
		}
		private (int low, int high)? _user_type_between;
		/// <summary>
		/// UserType_betweenの範囲内にある
		/// </summary>
		[DataMember] public (UserType low, UserType high)? UserType_between
		{
			get => _user_type_between.HasValue ? (_user_type_between.Value.low.ToUserType().Value, _user_type_between.Value.high.ToUserType().Value) : ((UserType, UserType)?)null;
			set => _user_type_between = value.HasValue ? (value.Value.low.Val(), value.Value.high.Val()) : ((int, int)?)null;
		}
		#endregion
		#region staff_no
		/// <summary>
		/// staff_no_eqと等しい
		/// </summary>
		[DataMember] public string staff_no_eq { get; set; }
		/// <summary>
		/// staff_no_neと等しくない
		/// </summary>
		[DataMember] public string staff_no_ne { get; set; }
		/// <summary>
		/// staff_no_ltより小さい
		/// </summary>
		[DataMember] public string staff_no_lt { get; set; }
		/// <summary>
		/// staff_no_gtより大きい
		/// </summary>
		[DataMember] public string staff_no_gt { get; set; }
		/// <summary>
		/// staff_no_le以下
		/// </summary>
		[DataMember] public string staff_no_le { get; set; }
		/// <summary>
		/// staff_no_ge以上
		/// </summary>
		[DataMember] public string staff_no_ge { get; set; }
		/// <summary>
		/// staff_no_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> staff_no_in { get; set; }
		/// <summary>
		/// staff_no_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> staff_no_ni { get; set; }
		/// <summary>
		/// staff_no_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? staff_no_between { get; set; }
		/// <summary>
		/// staff_no_likeと部分一致する
		/// </summary>
		[DataMember] public string staff_no_like { get; set; }
		#endregion
		#region sex_type
		/// <summary>
		/// sex_type_eqと等しい
		/// </summary>
		[DataMember] public int? sex_type_eq { get; set; }
		/// <summary>
		/// sex_type_neと等しくない
		/// </summary>
		[DataMember] public int? sex_type_ne { get; set; }
		/// <summary>
		/// sex_type_ltより小さい
		/// </summary>
		[DataMember] public int? sex_type_lt { get; set; }
		/// <summary>
		/// sex_type_gtより大きい
		/// </summary>
		[DataMember] public int? sex_type_gt { get; set; }
		/// <summary>
		/// sex_type_le以下
		/// </summary>
		[DataMember] public int? sex_type_le { get; set; }
		/// <summary>
		/// sex_type_ge以上
		/// </summary>
		[DataMember] public int? sex_type_ge { get; set; }
		/// <summary>
		/// sex_type_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> sex_type_in { get; set; }
		/// <summary>
		/// sex_type_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> sex_type_ni { get; set; }
		/// <summary>
		/// sex_type_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? sex_type_between { get; set; }
		/// <summary>
		/// sex_typeがNULLか
		/// </summary>
		[DataMember] public bool sex_type_isnull { get; set; } =  false ;
		/// <summary>
		/// sex_typeがNULLではないか
		/// </summary>
		[DataMember] public bool sex_type_isnotnull { get; set; } = false;
		#endregion
		#region birth_date
		/// <summary>
		/// birth_date_eqと等しい
		/// </summary>
		[DataMember] public DateTime? birth_date_eq { get; set; }
		/// <summary>
		/// birth_date_neと等しくない
		/// </summary>
		[DataMember] public DateTime? birth_date_ne { get; set; }
		/// <summary>
		/// birth_date_ltより小さい
		/// </summary>
		[DataMember] public DateTime? birth_date_lt { get; set; }
		/// <summary>
		/// birth_date_gtより大きい
		/// </summary>
		[DataMember] public DateTime? birth_date_gt { get; set; }
		/// <summary>
		/// birth_date_le以下
		/// </summary>
		[DataMember] public DateTime? birth_date_le { get; set; }
		/// <summary>
		/// birth_date_ge以上
		/// </summary>
		[DataMember] public DateTime? birth_date_ge { get; set; }
		/// <summary>
		/// birth_date_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> birth_date_in { get; set; }
		/// <summary>
		/// birth_date_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> birth_date_ni { get; set; }
		/// <summary>
		/// birth_date_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? birth_date_between { get; set; }
		/// <summary>
		/// birth_dateがNULLか
		/// </summary>
		[DataMember] public bool birth_date_isnull { get; set; } =  false ;
		/// <summary>
		/// birth_dateがNULLではないか
		/// </summary>
		[DataMember] public bool birth_date_isnotnull { get; set; } = false;
		#endregion
		#region created_at
		/// <summary>
		/// created_at_eqと等しい
		/// </summary>
		[DataMember] public DateTime? created_at_eq { get; set; }
		/// <summary>
		/// created_at_neと等しくない
		/// </summary>
		[DataMember] public DateTime? created_at_ne { get; set; }
		/// <summary>
		/// created_at_ltより小さい
		/// </summary>
		[DataMember] public DateTime? created_at_lt { get; set; }
		/// <summary>
		/// created_at_gtより大きい
		/// </summary>
		[DataMember] public DateTime? created_at_gt { get; set; }
		/// <summary>
		/// created_at_le以下
		/// </summary>
		[DataMember] public DateTime? created_at_le { get; set; }
		/// <summary>
		/// created_at_ge以上
		/// </summary>
		[DataMember] public DateTime? created_at_ge { get; set; }
		/// <summary>
		/// created_at_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> created_at_in { get; set; }
		/// <summary>
		/// created_at_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> created_at_ni { get; set; }
		/// <summary>
		/// created_at_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? created_at_between { get; set; }
		#endregion
		#region created_by
		/// <summary>
		/// created_by_eqと等しい
		/// </summary>
		[DataMember] public int? created_by_eq { get; set; }
		/// <summary>
		/// created_by_neと等しくない
		/// </summary>
		[DataMember] public int? created_by_ne { get; set; }
		/// <summary>
		/// created_by_ltより小さい
		/// </summary>
		[DataMember] public int? created_by_lt { get; set; }
		/// <summary>
		/// created_by_gtより大きい
		/// </summary>
		[DataMember] public int? created_by_gt { get; set; }
		/// <summary>
		/// created_by_le以下
		/// </summary>
		[DataMember] public int? created_by_le { get; set; }
		/// <summary>
		/// created_by_ge以上
		/// </summary>
		[DataMember] public int? created_by_ge { get; set; }
		/// <summary>
		/// created_by_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> created_by_in { get; set; }
		/// <summary>
		/// created_by_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> created_by_ni { get; set; }
		/// <summary>
		/// created_by_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? created_by_between { get; set; }
		/// <summary>
		/// created_byがNULLか
		/// </summary>
		[DataMember] public bool created_by_isnull { get; set; } =  false ;
		/// <summary>
		/// created_byがNULLではないか
		/// </summary>
		[DataMember] public bool created_by_isnotnull { get; set; } = false;
		#endregion
		#region modified_at
		/// <summary>
		/// modified_at_eqと等しい
		/// </summary>
		[DataMember] public DateTime? modified_at_eq { get; set; }
		/// <summary>
		/// modified_at_neと等しくない
		/// </summary>
		[DataMember] public DateTime? modified_at_ne { get; set; }
		/// <summary>
		/// modified_at_ltより小さい
		/// </summary>
		[DataMember] public DateTime? modified_at_lt { get; set; }
		/// <summary>
		/// modified_at_gtより大きい
		/// </summary>
		[DataMember] public DateTime? modified_at_gt { get; set; }
		/// <summary>
		/// modified_at_le以下
		/// </summary>
		[DataMember] public DateTime? modified_at_le { get; set; }
		/// <summary>
		/// modified_at_ge以上
		/// </summary>
		[DataMember] public DateTime? modified_at_ge { get; set; }
		/// <summary>
		/// modified_at_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> modified_at_in { get; set; }
		/// <summary>
		/// modified_at_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> modified_at_ni { get; set; }
		/// <summary>
		/// modified_at_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? modified_at_between { get; set; }
		#endregion
		#region modified_by
		/// <summary>
		/// modified_by_eqと等しい
		/// </summary>
		[DataMember] public int? modified_by_eq { get; set; }
		/// <summary>
		/// modified_by_neと等しくない
		/// </summary>
		[DataMember] public int? modified_by_ne { get; set; }
		/// <summary>
		/// modified_by_ltより小さい
		/// </summary>
		[DataMember] public int? modified_by_lt { get; set; }
		/// <summary>
		/// modified_by_gtより大きい
		/// </summary>
		[DataMember] public int? modified_by_gt { get; set; }
		/// <summary>
		/// modified_by_le以下
		/// </summary>
		[DataMember] public int? modified_by_le { get; set; }
		/// <summary>
		/// modified_by_ge以上
		/// </summary>
		[DataMember] public int? modified_by_ge { get; set; }
		/// <summary>
		/// modified_by_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> modified_by_in { get; set; }
		/// <summary>
		/// modified_by_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> modified_by_ni { get; set; }
		/// <summary>
		/// modified_by_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? modified_by_between { get; set; }
		/// <summary>
		/// modified_byがNULLか
		/// </summary>
		[DataMember] public bool modified_by_isnull { get; set; } =  false ;
		/// <summary>
		/// modified_byがNULLではないか
		/// </summary>
		[DataMember] public bool modified_by_isnotnull { get; set; } = false;
		#endregion
		#region removed_at
		/// <summary>
		/// removed_at_eqと等しい
		/// </summary>
		[DataMember] public DateTime? removed_at_eq { get; set; }
		/// <summary>
		/// removed_at_neと等しくない
		/// </summary>
		[DataMember] public DateTime? removed_at_ne { get; set; }
		/// <summary>
		/// removed_at_ltより小さい
		/// </summary>
		[DataMember] public DateTime? removed_at_lt { get; set; }
		/// <summary>
		/// removed_at_gtより大きい
		/// </summary>
		[DataMember] public DateTime? removed_at_gt { get; set; }
		/// <summary>
		/// removed_at_le以下
		/// </summary>
		[DataMember] public DateTime? removed_at_le { get; set; }
		/// <summary>
		/// removed_at_ge以上
		/// </summary>
		[DataMember] public DateTime? removed_at_ge { get; set; }
		/// <summary>
		/// removed_at_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> removed_at_in { get; set; }
		/// <summary>
		/// removed_at_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> removed_at_ni { get; set; }
		/// <summary>
		/// removed_at_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? removed_at_between { get; set; }
		/// <summary>
		/// removed_atがNULLか
		/// </summary>
		[DataMember] public bool removed_at_isnull { get; set; } =  true ;
		/// <summary>
		/// removed_atがNULLではないか
		/// </summary>
		[DataMember] public bool removed_at_isnotnull { get; set; } = false;
		#endregion
		#region row_version
		/// <summary>
		/// row_version_eqと等しい
		/// </summary>
		[DataMember] public byte[] row_version_eq { get; set; }
		/// <summary>
		/// row_version_neと等しくない
		/// </summary>
		[DataMember] public byte[] row_version_ne { get; set; }
		/// <summary>
		/// row_versionがNULLか
		/// </summary>
		[DataMember] public bool row_version_isnull { get; set; } =  false ;
		/// <summary>
		/// row_versionがNULLではないか
		/// </summary>
		[DataMember] public bool row_version_isnotnull { get; set; } = false;
		#endregion
		#endregion

		#region override
		override public Expression<Func<Staff, bool>> CreatePredicate()
		{
			var predicate = base.CreatePredicate();

			#region uid
			if (uid_eq != null) predicate = predicate.And(_ => _.uid == uid_eq);
			if (uid_ne != null) predicate = predicate.And(_ => _.uid != uid_ne);
			if (uid_lt != null) predicate = predicate.And(_ => _.uid < uid_lt);
			if (uid_gt != null) predicate = predicate.And(_ => _.uid > uid_gt);
			if (uid_le != null) predicate = predicate.And(_ => _.uid <= uid_le);
			if (uid_ge != null) predicate = predicate.And(_ => _.uid >= uid_ge);
			if (uid_in != null) predicate = predicate.And(_ => uid_in.Contains(_.uid));
			if (uid_ni != null) predicate = predicate.And(_ => !uid_ni.Contains(_.uid));
			#endregion
			#region user_type
			if (_user_type_eq != null) predicate = predicate.And(_ => _.user_type == _user_type_eq);
			if (_user_type_ne != null) predicate = predicate.And(_ => _.user_type != _user_type_ne);
			if (_user_type_lt != null) predicate = predicate.And(_ => _.user_type < _user_type_lt);
			if (_user_type_gt != null) predicate = predicate.And(_ => _.user_type > _user_type_gt);
			if (_user_type_le != null) predicate = predicate.And(_ => _.user_type <= _user_type_le);
			if (_user_type_ge != null) predicate = predicate.And(_ => _.user_type >= _user_type_ge);
			if (_user_type_in != null) predicate = predicate.And(_ => _user_type_in.Contains(_.user_type));
			if (_user_type_ni != null) predicate = predicate.And(_ => !_user_type_ni.Contains(_.user_type));
			#endregion
			#region staff_no
			if (staff_no_eq != null) predicate = predicate.And(_ => _.staff_no == staff_no_eq);
			if (staff_no_ne != null) predicate = predicate.And(_ => _.staff_no != staff_no_ne);
			if (staff_no_lt != null) predicate = predicate.And(_ => staff_no_lt.CompareTo(_.staff_no) > 0);
			if (staff_no_gt != null) predicate = predicate.And(_ => staff_no_gt.CompareTo(_.staff_no) < 0);
			if (staff_no_le != null) predicate = predicate.And(_ => staff_no_le.CompareTo(_.staff_no) >= 0);
			if (staff_no_ge != null) predicate = predicate.And(_ => staff_no_ge.CompareTo(_.staff_no) <= 0);
			if (staff_no_in != null) predicate = predicate.And(_ => staff_no_in.Contains(_.staff_no));
			if (staff_no_ni != null) predicate = predicate.And(_ => !staff_no_ni.Contains(_.staff_no));
			#endregion
			#region sex_type
			if (sex_type_eq != null) predicate = predicate.And(_ => _.sex_type == sex_type_eq);
			if (sex_type_ne != null) predicate = predicate.And(_ => _.sex_type != sex_type_ne);
			if (sex_type_lt != null) predicate = predicate.And(_ => _.sex_type < sex_type_lt);
			if (sex_type_gt != null) predicate = predicate.And(_ => _.sex_type > sex_type_gt);
			if (sex_type_le != null) predicate = predicate.And(_ => _.sex_type <= sex_type_le);
			if (sex_type_ge != null) predicate = predicate.And(_ => _.sex_type >= sex_type_ge);
			if (sex_type_in != null) predicate = predicate.And(_ => sex_type_in.Contains(_.sex_type.Value));
			if (sex_type_ni != null) predicate = predicate.And(_ => !sex_type_ni.Contains(_.sex_type.Value));
			if (sex_type_isnull) predicate = predicate.And(_ => _.sex_type == null);
			if (sex_type_isnotnull) predicate = predicate.And(_ => _.sex_type != null);
			#endregion
			#region birth_date
			if (birth_date_eq != null) predicate = predicate.And(_ => _.birth_date == birth_date_eq);
			if (birth_date_ne != null) predicate = predicate.And(_ => _.birth_date != birth_date_ne);
			if (birth_date_lt != null) predicate = predicate.And(_ => _.birth_date < birth_date_lt);
			if (birth_date_gt != null) predicate = predicate.And(_ => _.birth_date > birth_date_gt);
			if (birth_date_le != null) predicate = predicate.And(_ => _.birth_date <= birth_date_le);
			if (birth_date_ge != null) predicate = predicate.And(_ => _.birth_date >= birth_date_ge);
			if (birth_date_in != null) predicate = predicate.And(_ => birth_date_in.Contains(_.birth_date.Value));
			if (birth_date_ni != null) predicate = predicate.And(_ => !birth_date_ni.Contains(_.birth_date.Value));
			if (birth_date_isnull) predicate = predicate.And(_ => _.birth_date == null);
			if (birth_date_isnotnull) predicate = predicate.And(_ => _.birth_date != null);
			#endregion
			#region created_at
			if (created_at_eq != null) predicate = predicate.And(_ => _.created_at == created_at_eq);
			if (created_at_ne != null) predicate = predicate.And(_ => _.created_at != created_at_ne);
			if (created_at_lt != null) predicate = predicate.And(_ => _.created_at < created_at_lt);
			if (created_at_gt != null) predicate = predicate.And(_ => _.created_at > created_at_gt);
			if (created_at_le != null) predicate = predicate.And(_ => _.created_at <= created_at_le);
			if (created_at_ge != null) predicate = predicate.And(_ => _.created_at >= created_at_ge);
			if (created_at_in != null) predicate = predicate.And(_ => created_at_in.Contains(_.created_at));
			if (created_at_ni != null) predicate = predicate.And(_ => !created_at_ni.Contains(_.created_at));
			#endregion
			#region created_by
			if (created_by_eq != null) predicate = predicate.And(_ => _.created_by == created_by_eq);
			if (created_by_ne != null) predicate = predicate.And(_ => _.created_by != created_by_ne);
			if (created_by_lt != null) predicate = predicate.And(_ => _.created_by < created_by_lt);
			if (created_by_gt != null) predicate = predicate.And(_ => _.created_by > created_by_gt);
			if (created_by_le != null) predicate = predicate.And(_ => _.created_by <= created_by_le);
			if (created_by_ge != null) predicate = predicate.And(_ => _.created_by >= created_by_ge);
			if (created_by_in != null) predicate = predicate.And(_ => created_by_in.Contains(_.created_by.Value));
			if (created_by_ni != null) predicate = predicate.And(_ => !created_by_ni.Contains(_.created_by.Value));
			if (created_by_isnull) predicate = predicate.And(_ => _.created_by == null);
			if (created_by_isnotnull) predicate = predicate.And(_ => _.created_by != null);
			#endregion
			#region modified_at
			if (modified_at_eq != null) predicate = predicate.And(_ => _.modified_at == modified_at_eq);
			if (modified_at_ne != null) predicate = predicate.And(_ => _.modified_at != modified_at_ne);
			if (modified_at_lt != null) predicate = predicate.And(_ => _.modified_at < modified_at_lt);
			if (modified_at_gt != null) predicate = predicate.And(_ => _.modified_at > modified_at_gt);
			if (modified_at_le != null) predicate = predicate.And(_ => _.modified_at <= modified_at_le);
			if (modified_at_ge != null) predicate = predicate.And(_ => _.modified_at >= modified_at_ge);
			if (modified_at_in != null) predicate = predicate.And(_ => modified_at_in.Contains(_.modified_at));
			if (modified_at_ni != null) predicate = predicate.And(_ => !modified_at_ni.Contains(_.modified_at));
			#endregion
			#region modified_by
			if (modified_by_eq != null) predicate = predicate.And(_ => _.modified_by == modified_by_eq);
			if (modified_by_ne != null) predicate = predicate.And(_ => _.modified_by != modified_by_ne);
			if (modified_by_lt != null) predicate = predicate.And(_ => _.modified_by < modified_by_lt);
			if (modified_by_gt != null) predicate = predicate.And(_ => _.modified_by > modified_by_gt);
			if (modified_by_le != null) predicate = predicate.And(_ => _.modified_by <= modified_by_le);
			if (modified_by_ge != null) predicate = predicate.And(_ => _.modified_by >= modified_by_ge);
			if (modified_by_in != null) predicate = predicate.And(_ => modified_by_in.Contains(_.modified_by.Value));
			if (modified_by_ni != null) predicate = predicate.And(_ => !modified_by_ni.Contains(_.modified_by.Value));
			if (modified_by_isnull) predicate = predicate.And(_ => _.modified_by == null);
			if (modified_by_isnotnull) predicate = predicate.And(_ => _.modified_by != null);
			#endregion
			#region removed_at
			if (removed_at_eq != null) predicate = predicate.And(_ => _.removed_at == removed_at_eq);
			if (removed_at_ne != null) predicate = predicate.And(_ => _.removed_at != removed_at_ne);
			if (removed_at_lt != null) predicate = predicate.And(_ => _.removed_at < removed_at_lt);
			if (removed_at_gt != null) predicate = predicate.And(_ => _.removed_at > removed_at_gt);
			if (removed_at_le != null) predicate = predicate.And(_ => _.removed_at <= removed_at_le);
			if (removed_at_ge != null) predicate = predicate.And(_ => _.removed_at >= removed_at_ge);
			if (removed_at_in != null) predicate = predicate.And(_ => removed_at_in.Contains(_.removed_at.Value));
			if (removed_at_ni != null) predicate = predicate.And(_ => !removed_at_ni.Contains(_.removed_at.Value));
			if (removed_at_isnull) predicate = predicate.And(_ => _.removed_at == null);
			if (removed_at_isnotnull) predicate = predicate.And(_ => _.removed_at != null);
			#endregion
			#region row_version
			if (row_version_eq != null) predicate = predicate.And(_ => _.row_version == row_version_eq);
			if (row_version_ne != null) predicate = predicate.And(_ => _.row_version != row_version_ne);
			if (row_version_isnull) predicate = predicate.And(_ => _.row_version == null);
			if (row_version_isnotnull) predicate = predicate.And(_ => _.row_version != null);
			#endregion

			return predicate;
		}
		#endregion
	}
	#endregion
	#endregion
	#region 教員
	/// <summary>
	/// 教員
	/// </summary>
	[Table(Schema="HumanResource", Name="Teacher"), DataContract]
	public partial class Teacher : TableBase<Teacher>, INotifyPropertyChanged
	{
		#region uid : int

		private int _uid;
		/// <summary>
		/// ユニークID
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull, Identity]
		public  int  uid
		{
			get { return _uid; }
			set
			{
				if (_uid != value)
				{
					BeforeuidChanged(value);
					_uid = value;
					AfteruidChanged();

					OnuidChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeuidChanged(int newValue);
		partial void AfteruidChanged();

		public const string NameOfuid = "uid";

		private static readonly PropertyChangedEventArgs _uidChangedEventArgs = new PropertyChangedEventArgs(NameOfuid);

		private void OnuidChanged()
		{
			OnPropertyChanged(_uidChangedEventArgs);
		}

		#endregion

		#endregion
		#region user_type : int

		private int _user_type;
		/// <summary>
		/// 利用者種別
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull, System.ComponentModel.DataAnnotations.Required]
		public  int  user_type
		{
			get { return _user_type; }
			set
			{
				if (_user_type != value)
				{
					Beforeuser_typeChanged(value);
					_user_type = value;
					Afteruser_typeChanged();

					Onuser_typeChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeuser_typeChanged(int newValue);
		partial void Afteruser_typeChanged();

		public const string NameOfuser_type = "user_type";

		private static readonly PropertyChangedEventArgs _user_typeChangedEventArgs = new PropertyChangedEventArgs(NameOfuser_type);

		private void Onuser_typeChanged()
		{
			OnPropertyChanged(_user_typeChangedEventArgs);
		}

		#endregion

		#endregion
		#region teacher_no : string

		private string _teacher_no;
		/// <summary>
		/// 教員番号
		/// </summary>
		[Column(DbType="varchar(16)", DataType=DataType.VarChar, Length=16), DataMember, NotNull, PrimaryKey(Order = 1), System.ComponentModel.DataAnnotations.Required]
		public  string  teacher_no
		{
			get { return _teacher_no; }
			set
			{
				if (_teacher_no != value)
				{
					Beforeteacher_noChanged(value);
					_teacher_no = value;
					Afterteacher_noChanged();

					Onteacher_noChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeteacher_noChanged(string newValue);
		partial void Afterteacher_noChanged();

		public const string NameOfteacher_no = "teacher_no";

		private static readonly PropertyChangedEventArgs _teacher_noChangedEventArgs = new PropertyChangedEventArgs(NameOfteacher_no);

		private void Onteacher_noChanged()
		{
			OnPropertyChanged(_teacher_noChangedEventArgs);
		}

		#endregion

		#endregion
		#region sex_type : int?

		private int? _sex_type;
		/// <summary>
		/// 性別
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, Nullable, System.ComponentModel.DataAnnotations.Required]
		public  int?  sex_type
		{
			get { return _sex_type; }
			set
			{
				if (_sex_type != value)
				{
					Beforesex_typeChanged(value);
					_sex_type = value;
					Aftersex_typeChanged();

					Onsex_typeChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforesex_typeChanged(int? newValue);
		partial void Aftersex_typeChanged();

		public const string NameOfsex_type = "sex_type";

		private static readonly PropertyChangedEventArgs _sex_typeChangedEventArgs = new PropertyChangedEventArgs(NameOfsex_type);

		private void Onsex_typeChanged()
		{
			OnPropertyChanged(_sex_typeChangedEventArgs);
		}

		#endregion

		#endregion
		#region birth_date : DateTime?

		private DateTime? _birth_date;
		/// <summary>
		/// 生年月日
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, Nullable]
		public  DateTime?  birth_date
		{
			get { return _birth_date; }
			set
			{
				if (_birth_date != value)
				{
					Beforebirth_dateChanged(value);
					_birth_date = value;
					Afterbirth_dateChanged();

					Onbirth_dateChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforebirth_dateChanged(DateTime? newValue);
		partial void Afterbirth_dateChanged();

		public const string NameOfbirth_date = "birth_date";

		private static readonly PropertyChangedEventArgs _birth_dateChangedEventArgs = new PropertyChangedEventArgs(NameOfbirth_date);

		private void Onbirth_dateChanged()
		{
			OnPropertyChanged(_birth_dateChangedEventArgs);
		}

		#endregion

		#endregion
		#region work_style_type : int

		private int _work_style_type;
		/// <summary>
		/// 勤務形態
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull]
		public  int  work_style_type
		{
			get { return _work_style_type; }
			set
			{
				if (_work_style_type != value)
				{
					Beforework_style_typeChanged(value);
					_work_style_type = value;
					Afterwork_style_typeChanged();

					Onwork_style_typeChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforework_style_typeChanged(int newValue);
		partial void Afterwork_style_typeChanged();

		public const string NameOfwork_style_type = "work_style_type";

		private static readonly PropertyChangedEventArgs _work_style_typeChangedEventArgs = new PropertyChangedEventArgs(NameOfwork_style_type);

		private void Onwork_style_typeChanged()
		{
			OnPropertyChanged(_work_style_typeChangedEventArgs);
		}

		#endregion

		#endregion
		#region position_type : int

		private int _position_type;
		/// <summary>
		/// 職階
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull]
		public  int  position_type
		{
			get { return _position_type; }
			set
			{
				if (_position_type != value)
				{
					Beforeposition_typeChanged(value);
					_position_type = value;
					Afterposition_typeChanged();

					Onposition_typeChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeposition_typeChanged(int newValue);
		partial void Afterposition_typeChanged();

		public const string NameOfposition_type = "position_type";

		private static readonly PropertyChangedEventArgs _position_typeChangedEventArgs = new PropertyChangedEventArgs(NameOfposition_type);

		private void Onposition_typeChanged()
		{
			OnPropertyChanged(_position_typeChangedEventArgs);
		}

		#endregion

		#endregion
		#region teacher_lisence_type : int

		private int _teacher_lisence_type;
		/// <summary>
		/// 教員資格
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull]
		public  int  teacher_lisence_type
		{
			get { return _teacher_lisence_type; }
			set
			{
				if (_teacher_lisence_type != value)
				{
					Beforeteacher_lisence_typeChanged(value);
					_teacher_lisence_type = value;
					Afterteacher_lisence_typeChanged();

					Onteacher_lisence_typeChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeteacher_lisence_typeChanged(int newValue);
		partial void Afterteacher_lisence_typeChanged();

		public const string NameOfteacher_lisence_type = "teacher_lisence_type";

		private static readonly PropertyChangedEventArgs _teacher_lisence_typeChangedEventArgs = new PropertyChangedEventArgs(NameOfteacher_lisence_type);

		private void Onteacher_lisence_typeChanged()
		{
			OnPropertyChanged(_teacher_lisence_typeChangedEventArgs);
		}

		#endregion

		#endregion
		#region created_at : DateTime

		private DateTime _created_at;
		/// <summary>
		/// 作成日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, NotNull]
		public  DateTime  created_at
		{
			get { return _created_at; }
			set
			{
				if (_created_at != value)
				{
					Beforecreated_atChanged(value);
					_created_at = value;
					Aftercreated_atChanged();

					Oncreated_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecreated_atChanged(DateTime newValue);
		partial void Aftercreated_atChanged();

		public const string NameOfcreated_at = "created_at";

		private static readonly PropertyChangedEventArgs _created_atChangedEventArgs = new PropertyChangedEventArgs(NameOfcreated_at);

		private void Oncreated_atChanged()
		{
			OnPropertyChanged(_created_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region created_by : int?

		private int? _created_by;
		/// <summary>
		/// 作成者
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, Nullable]
		public  int?  created_by
		{
			get { return _created_by; }
			set
			{
				if (_created_by != value)
				{
					Beforecreated_byChanged(value);
					_created_by = value;
					Aftercreated_byChanged();

					Oncreated_byChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecreated_byChanged(int? newValue);
		partial void Aftercreated_byChanged();

		public const string NameOfcreated_by = "created_by";

		private static readonly PropertyChangedEventArgs _created_byChangedEventArgs = new PropertyChangedEventArgs(NameOfcreated_by);

		private void Oncreated_byChanged()
		{
			OnPropertyChanged(_created_byChangedEventArgs);
		}

		#endregion

		#endregion
		#region modified_at : DateTime

		private DateTime _modified_at;
		/// <summary>
		/// 更新日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, NotNull]
		public  DateTime  modified_at
		{
			get { return _modified_at; }
			set
			{
				if (_modified_at != value)
				{
					Beforemodified_atChanged(value);
					_modified_at = value;
					Aftermodified_atChanged();

					Onmodified_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforemodified_atChanged(DateTime newValue);
		partial void Aftermodified_atChanged();

		public const string NameOfmodified_at = "modified_at";

		private static readonly PropertyChangedEventArgs _modified_atChangedEventArgs = new PropertyChangedEventArgs(NameOfmodified_at);

		private void Onmodified_atChanged()
		{
			OnPropertyChanged(_modified_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region modified_by : int?

		private int? _modified_by;
		/// <summary>
		/// 更新者
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, Nullable]
		public  int?  modified_by
		{
			get { return _modified_by; }
			set
			{
				if (_modified_by != value)
				{
					Beforemodified_byChanged(value);
					_modified_by = value;
					Aftermodified_byChanged();

					Onmodified_byChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforemodified_byChanged(int? newValue);
		partial void Aftermodified_byChanged();

		public const string NameOfmodified_by = "modified_by";

		private static readonly PropertyChangedEventArgs _modified_byChangedEventArgs = new PropertyChangedEventArgs(NameOfmodified_by);

		private void Onmodified_byChanged()
		{
			OnPropertyChanged(_modified_byChangedEventArgs);
		}

		#endregion

		#endregion
		#region removed_at : DateTime?

		private DateTime? _removed_at;
		/// <summary>
		/// 削除日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, Nullable]
		public  DateTime?  removed_at
		{
			get { return _removed_at; }
			set
			{
				if (_removed_at != value)
				{
					Beforeremoved_atChanged(value);
					_removed_at = value;
					Afterremoved_atChanged();

					Onremoved_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeremoved_atChanged(DateTime? newValue);
		partial void Afterremoved_atChanged();

		public const string NameOfremoved_at = "removed_at";

		private static readonly PropertyChangedEventArgs _removed_atChangedEventArgs = new PropertyChangedEventArgs(NameOfremoved_at);

		private void Onremoved_atChanged()
		{
			OnPropertyChanged(_removed_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region row_version : byte[]

		private byte[] _row_version;
		/// <summary>
		/// 版
		/// </summary>
		[Column(DbType="timestamp", DataType=DataType.Timestamp, SkipOnInsert=true, SkipOnUpdate=true), DataMember, Nullable]
		public  byte[]  row_version
		{
			get { return _row_version; }
			set
			{
				if (_row_version != value)
				{
					Beforerow_versionChanged(value);
					_row_version = value;
					Afterrow_versionChanged();

					Onrow_versionChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforerow_versionChanged(byte[] newValue);
		partial void Afterrow_versionChanged();

		public const string NameOfrow_version = "row_version";

		private static readonly PropertyChangedEventArgs _row_versionChangedEventArgs = new PropertyChangedEventArgs(NameOfrow_version);

		private void Onrow_versionChanged()
		{
			OnPropertyChanged(_row_versionChangedEventArgs);
		}

		#endregion

		#endregion

		#region enum用アクセスラッパー
		/// <summary>
		/// user_typeのenumラッパー
		/// </summary>
		[ColumnAlias("user_type")]
		public UserType UserType
		{
			get => (UserType)user_type;
			set => user_type = value.Val();
		}
		#endregion

		#region Constructor

		public Teacher()
		{
			#region フィールド初期化
			uid = default(int);
			user_type = 2;
			teacher_no = "";
			sex_type = null;
			birth_date = null;
			work_style_type = 0;
			position_type = 0;
			teacher_lisence_type = 0;
			created_at = DateTime.UtcNow;
			created_by = null;
			modified_at = DateTime.UtcNow;
			modified_by = null;
			removed_at = null;
			row_version = default(byte[]);
			#endregion
		}

		#endregion

		#region Association

		#region WorkStyleType : work_style_type (FK_Teacher_WorkStyle)

		private WorkStyleType _WorkStyle;
		/// <summary>
		/// FK_Teacher_WorkStyle
		/// </summary>
		[Association(ThisKey="work_style_type", OtherKey="work_style_type_id", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_Teacher_WorkStyle", BackReferenceName="Teacher"), DataMember]
		public  WorkStyleType  WorkStyle
		{
			get { return _WorkStyle; }
			set
			{
				if (_WorkStyle != value)
				{
					BeforeWorkStyleChanged(value);
					_WorkStyle = value;
					AfterWorkStyleChanged();

					OnWorkStyleChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeWorkStyleChanged(WorkStyleType newValue);
		partial void AfterWorkStyleChanged ();

		public const string NameOfWorkStyle = "WorkStyle";

		private static readonly PropertyChangedEventArgs _WorkStyleChangedEventArgs = new PropertyChangedEventArgs(NameOfWorkStyle);

		private void OnWorkStyleChanged()
		{
			OnPropertyChanged(_WorkStyleChangedEventArgs);
		}

		#endregion

		#endregion
		#region PositionType : position_type (FK_Teacher_Position)

		private PositionType _Position;
		/// <summary>
		/// FK_Teacher_Position
		/// </summary>
		[Association(ThisKey="position_type", OtherKey="position_type_id", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_Teacher_Position", BackReferenceName="Teacher"), DataMember]
		public  PositionType  Position
		{
			get { return _Position; }
			set
			{
				if (_Position != value)
				{
					BeforePositionChanged(value);
					_Position = value;
					AfterPositionChanged();

					OnPositionChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforePositionChanged(PositionType newValue);
		partial void AfterPositionChanged ();

		public const string NameOfPosition = "Position";

		private static readonly PropertyChangedEventArgs _PositionChangedEventArgs = new PropertyChangedEventArgs(NameOfPosition);

		private void OnPositionChanged()
		{
			OnPropertyChanged(_PositionChangedEventArgs);
		}

		#endregion

		#endregion
		#region TeacherLisenceType : teacher_lisence_type (FK_Teacher_TeacherLisence)

		private TeacherLisenceType _TeacherLisence;
		/// <summary>
		/// FK_Teacher_TeacherLisence
		/// </summary>
		[Association(ThisKey="teacher_lisence_type", OtherKey="teacher_lisence_type_id", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_Teacher_TeacherLisence", BackReferenceName="Teacher"), DataMember]
		public  TeacherLisenceType  TeacherLisence
		{
			get { return _TeacherLisence; }
			set
			{
				if (_TeacherLisence != value)
				{
					BeforeTeacherLisenceChanged(value);
					_TeacherLisence = value;
					AfterTeacherLisenceChanged();

					OnTeacherLisenceChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeTeacherLisenceChanged(TeacherLisenceType newValue);
		partial void AfterTeacherLisenceChanged ();

		public const string NameOfTeacherLisence = "TeacherLisence";

		private static readonly PropertyChangedEventArgs _TeacherLisenceChangedEventArgs = new PropertyChangedEventArgs(NameOfTeacherLisence);

		private void OnTeacherLisenceChanged()
		{
			OnPropertyChanged(_TeacherLisenceChangedEventArgs);
		}

		#endregion

		#endregion
		#region SexType : sex_type (FK_Teacher_SexType)

		private SexType _SexType;
		/// <summary>
		/// FK_Teacher_SexType
		/// </summary>
		[Association(ThisKey="sex_type", OtherKey="sex_type_id", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_Teacher_SexType", BackReferenceName="Teacher"), DataMember]
		public  SexType  SexType
		{
			get { return _SexType; }
			set
			{
				if (_SexType != value)
				{
					BeforeSexTypeChanged(value);
					_SexType = value;
					AfterSexTypeChanged();

					OnSexTypeChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeSexTypeChanged(SexType newValue);
		partial void AfterSexTypeChanged ();

		public const string NameOfSexType = "SexType";

		private static readonly PropertyChangedEventArgs _SexTypeChangedEventArgs = new PropertyChangedEventArgs(NameOfSexType);

		private void OnSexTypeChanged()
		{
			OnPropertyChanged(_SexTypeChangedEventArgs);
		}

		#endregion

		#endregion
		#region IEnumerable<Account> : teacher_no to Account : teacher_no (FK_Teacher_Account)

		private IEnumerable<Account> _AccountList;
		/// <summary>
		/// FK_Teacher_Account_BackReference
		/// </summary>
		[Association(ThisKey="teacher_no", OtherKey="teacher_no", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true), DataMember]
		public  IEnumerable<Account>  AccountList
		{
			get { return _AccountList; }
			set
			{
				if (_AccountList != value)
				{
					BeforeAccountListChanged(value);
					_AccountList = value;
					AfterAccountListChanged();

					OnAccountListChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeAccountListChanged(IEnumerable<Account> newValue);
		partial void AfterAccountListChanged ();

		public const string NameOfAccountList = "AccountList";

		private static readonly PropertyChangedEventArgs _AccountListChangedEventArgs = new PropertyChangedEventArgs(NameOfAccountList);

		private void OnAccountListChanged()
		{
			OnPropertyChanged(_AccountListChangedEventArgs);
		}

		#endregion

		#endregion
		#region IEnumerable<PersonName> : user_type,teacher_no to PersonName : user_type,generic_user_no (FK_Teacher_Name)

		private IEnumerable<PersonName> _NameList;
		/// <summary>
		/// FK_Teacher_Name_BackReference
		/// </summary>
		[Association(ThisKey="user_type,teacher_no", OtherKey="user_type,generic_user_no", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true), DataMember]
		public  IEnumerable<PersonName>  NameList
		{
			get { return _NameList; }
			set
			{
				if (_NameList != value)
				{
					BeforeNameListChanged(value);
					_NameList = value;
					AfterNameListChanged();

					OnNameListChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeNameListChanged(IEnumerable<PersonName> newValue);
		partial void AfterNameListChanged ();

		public const string NameOfNameList = "NameList";

		private static readonly PropertyChangedEventArgs _NameListChangedEventArgs = new PropertyChangedEventArgs(NameOfNameList);

		private void OnNameListChanged()
		{
			OnPropertyChanged(_NameListChangedEventArgs);
		}

		#endregion

		#endregion
		#region IEnumerable<Address> : user_type,teacher_no to Address : user_type,generic_user_no (FK_Teacher_Address)

		private IEnumerable<Address> _AddressList;
		/// <summary>
		/// FK_Teacher_Address_BackReference
		/// </summary>
		[Association(ThisKey="user_type,teacher_no", OtherKey="user_type,generic_user_no", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true), DataMember]
		public  IEnumerable<Address>  AddressList
		{
			get { return _AddressList; }
			set
			{
				if (_AddressList != value)
				{
					BeforeAddressListChanged(value);
					_AddressList = value;
					AfterAddressListChanged();

					OnAddressListChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeAddressListChanged(IEnumerable<Address> newValue);
		partial void AfterAddressListChanged ();

		public const string NameOfAddressList = "AddressList";

		private static readonly PropertyChangedEventArgs _AddressListChangedEventArgs = new PropertyChangedEventArgs(NameOfAddressList);

		private void OnAddressListChanged()
		{
			OnPropertyChanged(_AddressListChangedEventArgs);
		}

		#endregion

		#endregion
		#region IEnumerable<Contact> : user_type,teacher_no to Contact : user_type,generic_user_no (FK_Teacher_Contact)

		private IEnumerable<Contact> _ContactList;
		/// <summary>
		/// FK_Teacher_Contact_BackReference
		/// </summary>
		[Association(ThisKey="user_type,teacher_no", OtherKey="user_type,generic_user_no", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true), DataMember]
		public  IEnumerable<Contact>  ContactList
		{
			get { return _ContactList; }
			set
			{
				if (_ContactList != value)
				{
					BeforeContactListChanged(value);
					_ContactList = value;
					AfterContactListChanged();

					OnContactListChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeContactListChanged(IEnumerable<Contact> newValue);
		partial void AfterContactListChanged ();

		public const string NameOfContactList = "ContactList";

		private static readonly PropertyChangedEventArgs _ContactListChangedEventArgs = new PropertyChangedEventArgs(NameOfContactList);

		private void OnContactListChanged()
		{
			OnPropertyChanged(_ContactListChangedEventArgs);
		}

		#endregion

		#endregion

		#endregion

		#region INotifyPropertyChanged support

		[field : NonSerialized]
		public virtual event PropertyChangedEventHandler PropertyChanged;

		protected void OnPropertyChanged(string propertyName)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		protected void OnPropertyChanged(PropertyChangedEventArgs arg)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, arg);
			}
		}

		#endregion

	}
	#region 教員条件
	/// <summary>
	/// 教員条件
	/// </summary>
	[DataContract]
	public partial class TeacherCondition : TeacherConditionBase
	{
	}

	/// <summary>
	/// 教員条件ベース
	/// </summary>
	[DataContract]
	public class TeacherConditionBase : ConditionBase<Teacher>
	{
		#region properties
		#region uid
		/// <summary>
		/// uid_eqと等しい
		/// </summary>
		[DataMember] public int? uid_eq { get; set; }
		/// <summary>
		/// uid_neと等しくない
		/// </summary>
		[DataMember] public int? uid_ne { get; set; }
		/// <summary>
		/// uid_ltより小さい
		/// </summary>
		[DataMember] public int? uid_lt { get; set; }
		/// <summary>
		/// uid_gtより大きい
		/// </summary>
		[DataMember] public int? uid_gt { get; set; }
		/// <summary>
		/// uid_le以下
		/// </summary>
		[DataMember] public int? uid_le { get; set; }
		/// <summary>
		/// uid_ge以上
		/// </summary>
		[DataMember] public int? uid_ge { get; set; }
		/// <summary>
		/// uid_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> uid_in { get; set; }
		/// <summary>
		/// uid_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> uid_ni { get; set; }
		/// <summary>
		/// uid_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? uid_between { get; set; }
		#endregion
		#region user_type (UserType)
		private int? _user_type_eq;
		/// <summary>
		/// UserType_eqと等しい
		/// </summary>
		[DataMember] public UserType? UserType_eq
		{
			get => _user_type_eq?.ToUserType();
			set => _user_type_eq = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _user_type_ne;
		/// <summary>
		/// UserType_neと等しくない
		/// </summary>
		[DataMember] public UserType? UserType_ne
		{
			get => _user_type_ne?.ToUserType();
			set => _user_type_ne = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _user_type_lt;
		/// <summary>
		/// UserType_ltより小さい
		/// </summary>
		[DataMember] public UserType? UserType_lt
		{
			get => _user_type_lt?.ToUserType();
			set => _user_type_lt = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _user_type_gt;
		/// <summary>
		/// UserType_gtより大きい
		/// </summary>
		[DataMember] public UserType? UserType_gt
		{
			get => _user_type_gt?.ToUserType();
			set => _user_type_gt = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _user_type_le;
		/// <summary>
		/// UserType_le以下
		/// </summary>
		[DataMember] public UserType? UserType_le
		{
			get => _user_type_le?.ToUserType();
			set => _user_type_le = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _user_type_ge;
		/// <summary>
		/// UserType_ge以上
		/// </summary>
		[DataMember] public UserType? UserType_ge
		{
			get => _user_type_ge?.ToUserType();
			set => _user_type_ge = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private IEnumerable<int> _user_type_in;
		/// <summary>
		/// UserType_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<UserType> UserType_in
		{
			get => _user_type_in?.Select(_ => _.ToUserType().Value) ?? Enumerable.Empty<UserType>();
			set => _user_type_in = value.Select(_ => _.Val());
		}
		private IEnumerable<int> _user_type_ni;
		/// <summary>
		/// UserType_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<UserType> UserType_ni
		{
			get => _user_type_ni?.Select(_ => _.ToUserType().Value) ?? Enumerable.Empty<UserType>();
			set => _user_type_ni = value.Select(_ => _.Val());
		}
		private (int low, int high)? _user_type_between;
		/// <summary>
		/// UserType_betweenの範囲内にある
		/// </summary>
		[DataMember] public (UserType low, UserType high)? UserType_between
		{
			get => _user_type_between.HasValue ? (_user_type_between.Value.low.ToUserType().Value, _user_type_between.Value.high.ToUserType().Value) : ((UserType, UserType)?)null;
			set => _user_type_between = value.HasValue ? (value.Value.low.Val(), value.Value.high.Val()) : ((int, int)?)null;
		}
		#endregion
		#region teacher_no
		/// <summary>
		/// teacher_no_eqと等しい
		/// </summary>
		[DataMember] public string teacher_no_eq { get; set; }
		/// <summary>
		/// teacher_no_neと等しくない
		/// </summary>
		[DataMember] public string teacher_no_ne { get; set; }
		/// <summary>
		/// teacher_no_ltより小さい
		/// </summary>
		[DataMember] public string teacher_no_lt { get; set; }
		/// <summary>
		/// teacher_no_gtより大きい
		/// </summary>
		[DataMember] public string teacher_no_gt { get; set; }
		/// <summary>
		/// teacher_no_le以下
		/// </summary>
		[DataMember] public string teacher_no_le { get; set; }
		/// <summary>
		/// teacher_no_ge以上
		/// </summary>
		[DataMember] public string teacher_no_ge { get; set; }
		/// <summary>
		/// teacher_no_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> teacher_no_in { get; set; }
		/// <summary>
		/// teacher_no_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> teacher_no_ni { get; set; }
		/// <summary>
		/// teacher_no_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? teacher_no_between { get; set; }
		/// <summary>
		/// teacher_no_likeと部分一致する
		/// </summary>
		[DataMember] public string teacher_no_like { get; set; }
		#endregion
		#region sex_type
		/// <summary>
		/// sex_type_eqと等しい
		/// </summary>
		[DataMember] public int? sex_type_eq { get; set; }
		/// <summary>
		/// sex_type_neと等しくない
		/// </summary>
		[DataMember] public int? sex_type_ne { get; set; }
		/// <summary>
		/// sex_type_ltより小さい
		/// </summary>
		[DataMember] public int? sex_type_lt { get; set; }
		/// <summary>
		/// sex_type_gtより大きい
		/// </summary>
		[DataMember] public int? sex_type_gt { get; set; }
		/// <summary>
		/// sex_type_le以下
		/// </summary>
		[DataMember] public int? sex_type_le { get; set; }
		/// <summary>
		/// sex_type_ge以上
		/// </summary>
		[DataMember] public int? sex_type_ge { get; set; }
		/// <summary>
		/// sex_type_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> sex_type_in { get; set; }
		/// <summary>
		/// sex_type_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> sex_type_ni { get; set; }
		/// <summary>
		/// sex_type_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? sex_type_between { get; set; }
		/// <summary>
		/// sex_typeがNULLか
		/// </summary>
		[DataMember] public bool sex_type_isnull { get; set; } =  false ;
		/// <summary>
		/// sex_typeがNULLではないか
		/// </summary>
		[DataMember] public bool sex_type_isnotnull { get; set; } = false;
		#endregion
		#region birth_date
		/// <summary>
		/// birth_date_eqと等しい
		/// </summary>
		[DataMember] public DateTime? birth_date_eq { get; set; }
		/// <summary>
		/// birth_date_neと等しくない
		/// </summary>
		[DataMember] public DateTime? birth_date_ne { get; set; }
		/// <summary>
		/// birth_date_ltより小さい
		/// </summary>
		[DataMember] public DateTime? birth_date_lt { get; set; }
		/// <summary>
		/// birth_date_gtより大きい
		/// </summary>
		[DataMember] public DateTime? birth_date_gt { get; set; }
		/// <summary>
		/// birth_date_le以下
		/// </summary>
		[DataMember] public DateTime? birth_date_le { get; set; }
		/// <summary>
		/// birth_date_ge以上
		/// </summary>
		[DataMember] public DateTime? birth_date_ge { get; set; }
		/// <summary>
		/// birth_date_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> birth_date_in { get; set; }
		/// <summary>
		/// birth_date_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> birth_date_ni { get; set; }
		/// <summary>
		/// birth_date_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? birth_date_between { get; set; }
		/// <summary>
		/// birth_dateがNULLか
		/// </summary>
		[DataMember] public bool birth_date_isnull { get; set; } =  false ;
		/// <summary>
		/// birth_dateがNULLではないか
		/// </summary>
		[DataMember] public bool birth_date_isnotnull { get; set; } = false;
		#endregion
		#region work_style_type
		/// <summary>
		/// work_style_type_eqと等しい
		/// </summary>
		[DataMember] public int? work_style_type_eq { get; set; }
		/// <summary>
		/// work_style_type_neと等しくない
		/// </summary>
		[DataMember] public int? work_style_type_ne { get; set; }
		/// <summary>
		/// work_style_type_ltより小さい
		/// </summary>
		[DataMember] public int? work_style_type_lt { get; set; }
		/// <summary>
		/// work_style_type_gtより大きい
		/// </summary>
		[DataMember] public int? work_style_type_gt { get; set; }
		/// <summary>
		/// work_style_type_le以下
		/// </summary>
		[DataMember] public int? work_style_type_le { get; set; }
		/// <summary>
		/// work_style_type_ge以上
		/// </summary>
		[DataMember] public int? work_style_type_ge { get; set; }
		/// <summary>
		/// work_style_type_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> work_style_type_in { get; set; }
		/// <summary>
		/// work_style_type_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> work_style_type_ni { get; set; }
		/// <summary>
		/// work_style_type_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? work_style_type_between { get; set; }
		#endregion
		#region position_type
		/// <summary>
		/// position_type_eqと等しい
		/// </summary>
		[DataMember] public int? position_type_eq { get; set; }
		/// <summary>
		/// position_type_neと等しくない
		/// </summary>
		[DataMember] public int? position_type_ne { get; set; }
		/// <summary>
		/// position_type_ltより小さい
		/// </summary>
		[DataMember] public int? position_type_lt { get; set; }
		/// <summary>
		/// position_type_gtより大きい
		/// </summary>
		[DataMember] public int? position_type_gt { get; set; }
		/// <summary>
		/// position_type_le以下
		/// </summary>
		[DataMember] public int? position_type_le { get; set; }
		/// <summary>
		/// position_type_ge以上
		/// </summary>
		[DataMember] public int? position_type_ge { get; set; }
		/// <summary>
		/// position_type_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> position_type_in { get; set; }
		/// <summary>
		/// position_type_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> position_type_ni { get; set; }
		/// <summary>
		/// position_type_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? position_type_between { get; set; }
		#endregion
		#region teacher_lisence_type
		/// <summary>
		/// teacher_lisence_type_eqと等しい
		/// </summary>
		[DataMember] public int? teacher_lisence_type_eq { get; set; }
		/// <summary>
		/// teacher_lisence_type_neと等しくない
		/// </summary>
		[DataMember] public int? teacher_lisence_type_ne { get; set; }
		/// <summary>
		/// teacher_lisence_type_ltより小さい
		/// </summary>
		[DataMember] public int? teacher_lisence_type_lt { get; set; }
		/// <summary>
		/// teacher_lisence_type_gtより大きい
		/// </summary>
		[DataMember] public int? teacher_lisence_type_gt { get; set; }
		/// <summary>
		/// teacher_lisence_type_le以下
		/// </summary>
		[DataMember] public int? teacher_lisence_type_le { get; set; }
		/// <summary>
		/// teacher_lisence_type_ge以上
		/// </summary>
		[DataMember] public int? teacher_lisence_type_ge { get; set; }
		/// <summary>
		/// teacher_lisence_type_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> teacher_lisence_type_in { get; set; }
		/// <summary>
		/// teacher_lisence_type_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> teacher_lisence_type_ni { get; set; }
		/// <summary>
		/// teacher_lisence_type_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? teacher_lisence_type_between { get; set; }
		#endregion
		#region created_at
		/// <summary>
		/// created_at_eqと等しい
		/// </summary>
		[DataMember] public DateTime? created_at_eq { get; set; }
		/// <summary>
		/// created_at_neと等しくない
		/// </summary>
		[DataMember] public DateTime? created_at_ne { get; set; }
		/// <summary>
		/// created_at_ltより小さい
		/// </summary>
		[DataMember] public DateTime? created_at_lt { get; set; }
		/// <summary>
		/// created_at_gtより大きい
		/// </summary>
		[DataMember] public DateTime? created_at_gt { get; set; }
		/// <summary>
		/// created_at_le以下
		/// </summary>
		[DataMember] public DateTime? created_at_le { get; set; }
		/// <summary>
		/// created_at_ge以上
		/// </summary>
		[DataMember] public DateTime? created_at_ge { get; set; }
		/// <summary>
		/// created_at_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> created_at_in { get; set; }
		/// <summary>
		/// created_at_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> created_at_ni { get; set; }
		/// <summary>
		/// created_at_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? created_at_between { get; set; }
		#endregion
		#region created_by
		/// <summary>
		/// created_by_eqと等しい
		/// </summary>
		[DataMember] public int? created_by_eq { get; set; }
		/// <summary>
		/// created_by_neと等しくない
		/// </summary>
		[DataMember] public int? created_by_ne { get; set; }
		/// <summary>
		/// created_by_ltより小さい
		/// </summary>
		[DataMember] public int? created_by_lt { get; set; }
		/// <summary>
		/// created_by_gtより大きい
		/// </summary>
		[DataMember] public int? created_by_gt { get; set; }
		/// <summary>
		/// created_by_le以下
		/// </summary>
		[DataMember] public int? created_by_le { get; set; }
		/// <summary>
		/// created_by_ge以上
		/// </summary>
		[DataMember] public int? created_by_ge { get; set; }
		/// <summary>
		/// created_by_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> created_by_in { get; set; }
		/// <summary>
		/// created_by_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> created_by_ni { get; set; }
		/// <summary>
		/// created_by_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? created_by_between { get; set; }
		/// <summary>
		/// created_byがNULLか
		/// </summary>
		[DataMember] public bool created_by_isnull { get; set; } =  false ;
		/// <summary>
		/// created_byがNULLではないか
		/// </summary>
		[DataMember] public bool created_by_isnotnull { get; set; } = false;
		#endregion
		#region modified_at
		/// <summary>
		/// modified_at_eqと等しい
		/// </summary>
		[DataMember] public DateTime? modified_at_eq { get; set; }
		/// <summary>
		/// modified_at_neと等しくない
		/// </summary>
		[DataMember] public DateTime? modified_at_ne { get; set; }
		/// <summary>
		/// modified_at_ltより小さい
		/// </summary>
		[DataMember] public DateTime? modified_at_lt { get; set; }
		/// <summary>
		/// modified_at_gtより大きい
		/// </summary>
		[DataMember] public DateTime? modified_at_gt { get; set; }
		/// <summary>
		/// modified_at_le以下
		/// </summary>
		[DataMember] public DateTime? modified_at_le { get; set; }
		/// <summary>
		/// modified_at_ge以上
		/// </summary>
		[DataMember] public DateTime? modified_at_ge { get; set; }
		/// <summary>
		/// modified_at_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> modified_at_in { get; set; }
		/// <summary>
		/// modified_at_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> modified_at_ni { get; set; }
		/// <summary>
		/// modified_at_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? modified_at_between { get; set; }
		#endregion
		#region modified_by
		/// <summary>
		/// modified_by_eqと等しい
		/// </summary>
		[DataMember] public int? modified_by_eq { get; set; }
		/// <summary>
		/// modified_by_neと等しくない
		/// </summary>
		[DataMember] public int? modified_by_ne { get; set; }
		/// <summary>
		/// modified_by_ltより小さい
		/// </summary>
		[DataMember] public int? modified_by_lt { get; set; }
		/// <summary>
		/// modified_by_gtより大きい
		/// </summary>
		[DataMember] public int? modified_by_gt { get; set; }
		/// <summary>
		/// modified_by_le以下
		/// </summary>
		[DataMember] public int? modified_by_le { get; set; }
		/// <summary>
		/// modified_by_ge以上
		/// </summary>
		[DataMember] public int? modified_by_ge { get; set; }
		/// <summary>
		/// modified_by_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> modified_by_in { get; set; }
		/// <summary>
		/// modified_by_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> modified_by_ni { get; set; }
		/// <summary>
		/// modified_by_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? modified_by_between { get; set; }
		/// <summary>
		/// modified_byがNULLか
		/// </summary>
		[DataMember] public bool modified_by_isnull { get; set; } =  false ;
		/// <summary>
		/// modified_byがNULLではないか
		/// </summary>
		[DataMember] public bool modified_by_isnotnull { get; set; } = false;
		#endregion
		#region removed_at
		/// <summary>
		/// removed_at_eqと等しい
		/// </summary>
		[DataMember] public DateTime? removed_at_eq { get; set; }
		/// <summary>
		/// removed_at_neと等しくない
		/// </summary>
		[DataMember] public DateTime? removed_at_ne { get; set; }
		/// <summary>
		/// removed_at_ltより小さい
		/// </summary>
		[DataMember] public DateTime? removed_at_lt { get; set; }
		/// <summary>
		/// removed_at_gtより大きい
		/// </summary>
		[DataMember] public DateTime? removed_at_gt { get; set; }
		/// <summary>
		/// removed_at_le以下
		/// </summary>
		[DataMember] public DateTime? removed_at_le { get; set; }
		/// <summary>
		/// removed_at_ge以上
		/// </summary>
		[DataMember] public DateTime? removed_at_ge { get; set; }
		/// <summary>
		/// removed_at_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> removed_at_in { get; set; }
		/// <summary>
		/// removed_at_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> removed_at_ni { get; set; }
		/// <summary>
		/// removed_at_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? removed_at_between { get; set; }
		/// <summary>
		/// removed_atがNULLか
		/// </summary>
		[DataMember] public bool removed_at_isnull { get; set; } =  true ;
		/// <summary>
		/// removed_atがNULLではないか
		/// </summary>
		[DataMember] public bool removed_at_isnotnull { get; set; } = false;
		#endregion
		#region row_version
		/// <summary>
		/// row_version_eqと等しい
		/// </summary>
		[DataMember] public byte[] row_version_eq { get; set; }
		/// <summary>
		/// row_version_neと等しくない
		/// </summary>
		[DataMember] public byte[] row_version_ne { get; set; }
		/// <summary>
		/// row_versionがNULLか
		/// </summary>
		[DataMember] public bool row_version_isnull { get; set; } =  false ;
		/// <summary>
		/// row_versionがNULLではないか
		/// </summary>
		[DataMember] public bool row_version_isnotnull { get; set; } = false;
		#endregion
		#endregion

		#region override
		override public Expression<Func<Teacher, bool>> CreatePredicate()
		{
			var predicate = base.CreatePredicate();

			#region uid
			if (uid_eq != null) predicate = predicate.And(_ => _.uid == uid_eq);
			if (uid_ne != null) predicate = predicate.And(_ => _.uid != uid_ne);
			if (uid_lt != null) predicate = predicate.And(_ => _.uid < uid_lt);
			if (uid_gt != null) predicate = predicate.And(_ => _.uid > uid_gt);
			if (uid_le != null) predicate = predicate.And(_ => _.uid <= uid_le);
			if (uid_ge != null) predicate = predicate.And(_ => _.uid >= uid_ge);
			if (uid_in != null) predicate = predicate.And(_ => uid_in.Contains(_.uid));
			if (uid_ni != null) predicate = predicate.And(_ => !uid_ni.Contains(_.uid));
			#endregion
			#region user_type
			if (_user_type_eq != null) predicate = predicate.And(_ => _.user_type == _user_type_eq);
			if (_user_type_ne != null) predicate = predicate.And(_ => _.user_type != _user_type_ne);
			if (_user_type_lt != null) predicate = predicate.And(_ => _.user_type < _user_type_lt);
			if (_user_type_gt != null) predicate = predicate.And(_ => _.user_type > _user_type_gt);
			if (_user_type_le != null) predicate = predicate.And(_ => _.user_type <= _user_type_le);
			if (_user_type_ge != null) predicate = predicate.And(_ => _.user_type >= _user_type_ge);
			if (_user_type_in != null) predicate = predicate.And(_ => _user_type_in.Contains(_.user_type));
			if (_user_type_ni != null) predicate = predicate.And(_ => !_user_type_ni.Contains(_.user_type));
			#endregion
			#region teacher_no
			if (teacher_no_eq != null) predicate = predicate.And(_ => _.teacher_no == teacher_no_eq);
			if (teacher_no_ne != null) predicate = predicate.And(_ => _.teacher_no != teacher_no_ne);
			if (teacher_no_lt != null) predicate = predicate.And(_ => teacher_no_lt.CompareTo(_.teacher_no) > 0);
			if (teacher_no_gt != null) predicate = predicate.And(_ => teacher_no_gt.CompareTo(_.teacher_no) < 0);
			if (teacher_no_le != null) predicate = predicate.And(_ => teacher_no_le.CompareTo(_.teacher_no) >= 0);
			if (teacher_no_ge != null) predicate = predicate.And(_ => teacher_no_ge.CompareTo(_.teacher_no) <= 0);
			if (teacher_no_in != null) predicate = predicate.And(_ => teacher_no_in.Contains(_.teacher_no));
			if (teacher_no_ni != null) predicate = predicate.And(_ => !teacher_no_ni.Contains(_.teacher_no));
			#endregion
			#region sex_type
			if (sex_type_eq != null) predicate = predicate.And(_ => _.sex_type == sex_type_eq);
			if (sex_type_ne != null) predicate = predicate.And(_ => _.sex_type != sex_type_ne);
			if (sex_type_lt != null) predicate = predicate.And(_ => _.sex_type < sex_type_lt);
			if (sex_type_gt != null) predicate = predicate.And(_ => _.sex_type > sex_type_gt);
			if (sex_type_le != null) predicate = predicate.And(_ => _.sex_type <= sex_type_le);
			if (sex_type_ge != null) predicate = predicate.And(_ => _.sex_type >= sex_type_ge);
			if (sex_type_in != null) predicate = predicate.And(_ => sex_type_in.Contains(_.sex_type.Value));
			if (sex_type_ni != null) predicate = predicate.And(_ => !sex_type_ni.Contains(_.sex_type.Value));
			if (sex_type_isnull) predicate = predicate.And(_ => _.sex_type == null);
			if (sex_type_isnotnull) predicate = predicate.And(_ => _.sex_type != null);
			#endregion
			#region birth_date
			if (birth_date_eq != null) predicate = predicate.And(_ => _.birth_date == birth_date_eq);
			if (birth_date_ne != null) predicate = predicate.And(_ => _.birth_date != birth_date_ne);
			if (birth_date_lt != null) predicate = predicate.And(_ => _.birth_date < birth_date_lt);
			if (birth_date_gt != null) predicate = predicate.And(_ => _.birth_date > birth_date_gt);
			if (birth_date_le != null) predicate = predicate.And(_ => _.birth_date <= birth_date_le);
			if (birth_date_ge != null) predicate = predicate.And(_ => _.birth_date >= birth_date_ge);
			if (birth_date_in != null) predicate = predicate.And(_ => birth_date_in.Contains(_.birth_date.Value));
			if (birth_date_ni != null) predicate = predicate.And(_ => !birth_date_ni.Contains(_.birth_date.Value));
			if (birth_date_isnull) predicate = predicate.And(_ => _.birth_date == null);
			if (birth_date_isnotnull) predicate = predicate.And(_ => _.birth_date != null);
			#endregion
			#region work_style_type
			if (work_style_type_eq != null) predicate = predicate.And(_ => _.work_style_type == work_style_type_eq);
			if (work_style_type_ne != null) predicate = predicate.And(_ => _.work_style_type != work_style_type_ne);
			if (work_style_type_lt != null) predicate = predicate.And(_ => _.work_style_type < work_style_type_lt);
			if (work_style_type_gt != null) predicate = predicate.And(_ => _.work_style_type > work_style_type_gt);
			if (work_style_type_le != null) predicate = predicate.And(_ => _.work_style_type <= work_style_type_le);
			if (work_style_type_ge != null) predicate = predicate.And(_ => _.work_style_type >= work_style_type_ge);
			if (work_style_type_in != null) predicate = predicate.And(_ => work_style_type_in.Contains(_.work_style_type));
			if (work_style_type_ni != null) predicate = predicate.And(_ => !work_style_type_ni.Contains(_.work_style_type));
			#endregion
			#region position_type
			if (position_type_eq != null) predicate = predicate.And(_ => _.position_type == position_type_eq);
			if (position_type_ne != null) predicate = predicate.And(_ => _.position_type != position_type_ne);
			if (position_type_lt != null) predicate = predicate.And(_ => _.position_type < position_type_lt);
			if (position_type_gt != null) predicate = predicate.And(_ => _.position_type > position_type_gt);
			if (position_type_le != null) predicate = predicate.And(_ => _.position_type <= position_type_le);
			if (position_type_ge != null) predicate = predicate.And(_ => _.position_type >= position_type_ge);
			if (position_type_in != null) predicate = predicate.And(_ => position_type_in.Contains(_.position_type));
			if (position_type_ni != null) predicate = predicate.And(_ => !position_type_ni.Contains(_.position_type));
			#endregion
			#region teacher_lisence_type
			if (teacher_lisence_type_eq != null) predicate = predicate.And(_ => _.teacher_lisence_type == teacher_lisence_type_eq);
			if (teacher_lisence_type_ne != null) predicate = predicate.And(_ => _.teacher_lisence_type != teacher_lisence_type_ne);
			if (teacher_lisence_type_lt != null) predicate = predicate.And(_ => _.teacher_lisence_type < teacher_lisence_type_lt);
			if (teacher_lisence_type_gt != null) predicate = predicate.And(_ => _.teacher_lisence_type > teacher_lisence_type_gt);
			if (teacher_lisence_type_le != null) predicate = predicate.And(_ => _.teacher_lisence_type <= teacher_lisence_type_le);
			if (teacher_lisence_type_ge != null) predicate = predicate.And(_ => _.teacher_lisence_type >= teacher_lisence_type_ge);
			if (teacher_lisence_type_in != null) predicate = predicate.And(_ => teacher_lisence_type_in.Contains(_.teacher_lisence_type));
			if (teacher_lisence_type_ni != null) predicate = predicate.And(_ => !teacher_lisence_type_ni.Contains(_.teacher_lisence_type));
			#endregion
			#region created_at
			if (created_at_eq != null) predicate = predicate.And(_ => _.created_at == created_at_eq);
			if (created_at_ne != null) predicate = predicate.And(_ => _.created_at != created_at_ne);
			if (created_at_lt != null) predicate = predicate.And(_ => _.created_at < created_at_lt);
			if (created_at_gt != null) predicate = predicate.And(_ => _.created_at > created_at_gt);
			if (created_at_le != null) predicate = predicate.And(_ => _.created_at <= created_at_le);
			if (created_at_ge != null) predicate = predicate.And(_ => _.created_at >= created_at_ge);
			if (created_at_in != null) predicate = predicate.And(_ => created_at_in.Contains(_.created_at));
			if (created_at_ni != null) predicate = predicate.And(_ => !created_at_ni.Contains(_.created_at));
			#endregion
			#region created_by
			if (created_by_eq != null) predicate = predicate.And(_ => _.created_by == created_by_eq);
			if (created_by_ne != null) predicate = predicate.And(_ => _.created_by != created_by_ne);
			if (created_by_lt != null) predicate = predicate.And(_ => _.created_by < created_by_lt);
			if (created_by_gt != null) predicate = predicate.And(_ => _.created_by > created_by_gt);
			if (created_by_le != null) predicate = predicate.And(_ => _.created_by <= created_by_le);
			if (created_by_ge != null) predicate = predicate.And(_ => _.created_by >= created_by_ge);
			if (created_by_in != null) predicate = predicate.And(_ => created_by_in.Contains(_.created_by.Value));
			if (created_by_ni != null) predicate = predicate.And(_ => !created_by_ni.Contains(_.created_by.Value));
			if (created_by_isnull) predicate = predicate.And(_ => _.created_by == null);
			if (created_by_isnotnull) predicate = predicate.And(_ => _.created_by != null);
			#endregion
			#region modified_at
			if (modified_at_eq != null) predicate = predicate.And(_ => _.modified_at == modified_at_eq);
			if (modified_at_ne != null) predicate = predicate.And(_ => _.modified_at != modified_at_ne);
			if (modified_at_lt != null) predicate = predicate.And(_ => _.modified_at < modified_at_lt);
			if (modified_at_gt != null) predicate = predicate.And(_ => _.modified_at > modified_at_gt);
			if (modified_at_le != null) predicate = predicate.And(_ => _.modified_at <= modified_at_le);
			if (modified_at_ge != null) predicate = predicate.And(_ => _.modified_at >= modified_at_ge);
			if (modified_at_in != null) predicate = predicate.And(_ => modified_at_in.Contains(_.modified_at));
			if (modified_at_ni != null) predicate = predicate.And(_ => !modified_at_ni.Contains(_.modified_at));
			#endregion
			#region modified_by
			if (modified_by_eq != null) predicate = predicate.And(_ => _.modified_by == modified_by_eq);
			if (modified_by_ne != null) predicate = predicate.And(_ => _.modified_by != modified_by_ne);
			if (modified_by_lt != null) predicate = predicate.And(_ => _.modified_by < modified_by_lt);
			if (modified_by_gt != null) predicate = predicate.And(_ => _.modified_by > modified_by_gt);
			if (modified_by_le != null) predicate = predicate.And(_ => _.modified_by <= modified_by_le);
			if (modified_by_ge != null) predicate = predicate.And(_ => _.modified_by >= modified_by_ge);
			if (modified_by_in != null) predicate = predicate.And(_ => modified_by_in.Contains(_.modified_by.Value));
			if (modified_by_ni != null) predicate = predicate.And(_ => !modified_by_ni.Contains(_.modified_by.Value));
			if (modified_by_isnull) predicate = predicate.And(_ => _.modified_by == null);
			if (modified_by_isnotnull) predicate = predicate.And(_ => _.modified_by != null);
			#endregion
			#region removed_at
			if (removed_at_eq != null) predicate = predicate.And(_ => _.removed_at == removed_at_eq);
			if (removed_at_ne != null) predicate = predicate.And(_ => _.removed_at != removed_at_ne);
			if (removed_at_lt != null) predicate = predicate.And(_ => _.removed_at < removed_at_lt);
			if (removed_at_gt != null) predicate = predicate.And(_ => _.removed_at > removed_at_gt);
			if (removed_at_le != null) predicate = predicate.And(_ => _.removed_at <= removed_at_le);
			if (removed_at_ge != null) predicate = predicate.And(_ => _.removed_at >= removed_at_ge);
			if (removed_at_in != null) predicate = predicate.And(_ => removed_at_in.Contains(_.removed_at.Value));
			if (removed_at_ni != null) predicate = predicate.And(_ => !removed_at_ni.Contains(_.removed_at.Value));
			if (removed_at_isnull) predicate = predicate.And(_ => _.removed_at == null);
			if (removed_at_isnotnull) predicate = predicate.And(_ => _.removed_at != null);
			#endregion
			#region row_version
			if (row_version_eq != null) predicate = predicate.And(_ => _.row_version == row_version_eq);
			if (row_version_ne != null) predicate = predicate.And(_ => _.row_version != row_version_ne);
			if (row_version_isnull) predicate = predicate.And(_ => _.row_version == null);
			if (row_version_isnotnull) predicate = predicate.And(_ => _.row_version != null);
			#endregion

			return predicate;
		}
		#endregion
	}
	#endregion
	#endregion
	#region 他ユーザ
	/// <summary>
	/// 他ユーザ
	/// </summary>
	[Table(Schema="HumanResource", Name="User"), DataContract]
	public partial class User : TableBase<User>, INotifyPropertyChanged
	{
		#region uid : int

		private int _uid;
		/// <summary>
		/// ユニークID
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull, Identity]
		public  int  uid
		{
			get { return _uid; }
			set
			{
				if (_uid != value)
				{
					BeforeuidChanged(value);
					_uid = value;
					AfteruidChanged();

					OnuidChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeuidChanged(int newValue);
		partial void AfteruidChanged();

		public const string NameOfuid = "uid";

		private static readonly PropertyChangedEventArgs _uidChangedEventArgs = new PropertyChangedEventArgs(NameOfuid);

		private void OnuidChanged()
		{
			OnPropertyChanged(_uidChangedEventArgs);
		}

		#endregion

		#endregion
		#region user_type : int

		private int _user_type;
		/// <summary>
		/// 利用者種別
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull, System.ComponentModel.DataAnnotations.Required]
		public  int  user_type
		{
			get { return _user_type; }
			set
			{
				if (_user_type != value)
				{
					Beforeuser_typeChanged(value);
					_user_type = value;
					Afteruser_typeChanged();

					Onuser_typeChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeuser_typeChanged(int newValue);
		partial void Afteruser_typeChanged();

		public const string NameOfuser_type = "user_type";

		private static readonly PropertyChangedEventArgs _user_typeChangedEventArgs = new PropertyChangedEventArgs(NameOfuser_type);

		private void Onuser_typeChanged()
		{
			OnPropertyChanged(_user_typeChangedEventArgs);
		}

		#endregion

		#endregion
		#region user_no : string

		private string _user_no;
		/// <summary>
		/// 利用者番号
		/// </summary>
		[Column(DbType="varchar(16)", DataType=DataType.VarChar, Length=16), DataMember, NotNull, PrimaryKey(Order = 1), System.ComponentModel.DataAnnotations.Required]
		public  string  user_no
		{
			get { return _user_no; }
			set
			{
				if (_user_no != value)
				{
					Beforeuser_noChanged(value);
					_user_no = value;
					Afteruser_noChanged();

					Onuser_noChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeuser_noChanged(string newValue);
		partial void Afteruser_noChanged();

		public const string NameOfuser_no = "user_no";

		private static readonly PropertyChangedEventArgs _user_noChangedEventArgs = new PropertyChangedEventArgs(NameOfuser_no);

		private void Onuser_noChanged()
		{
			OnPropertyChanged(_user_noChangedEventArgs);
		}

		#endregion

		#endregion
		#region sex_type : int?

		private int? _sex_type;
		/// <summary>
		/// 性別
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, Nullable, System.ComponentModel.DataAnnotations.Required]
		public  int?  sex_type
		{
			get { return _sex_type; }
			set
			{
				if (_sex_type != value)
				{
					Beforesex_typeChanged(value);
					_sex_type = value;
					Aftersex_typeChanged();

					Onsex_typeChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforesex_typeChanged(int? newValue);
		partial void Aftersex_typeChanged();

		public const string NameOfsex_type = "sex_type";

		private static readonly PropertyChangedEventArgs _sex_typeChangedEventArgs = new PropertyChangedEventArgs(NameOfsex_type);

		private void Onsex_typeChanged()
		{
			OnPropertyChanged(_sex_typeChangedEventArgs);
		}

		#endregion

		#endregion
		#region created_at : DateTime

		private DateTime _created_at;
		/// <summary>
		/// 作成日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, NotNull]
		public  DateTime  created_at
		{
			get { return _created_at; }
			set
			{
				if (_created_at != value)
				{
					Beforecreated_atChanged(value);
					_created_at = value;
					Aftercreated_atChanged();

					Oncreated_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecreated_atChanged(DateTime newValue);
		partial void Aftercreated_atChanged();

		public const string NameOfcreated_at = "created_at";

		private static readonly PropertyChangedEventArgs _created_atChangedEventArgs = new PropertyChangedEventArgs(NameOfcreated_at);

		private void Oncreated_atChanged()
		{
			OnPropertyChanged(_created_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region created_by : int?

		private int? _created_by;
		/// <summary>
		/// 作成者
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, Nullable]
		public  int?  created_by
		{
			get { return _created_by; }
			set
			{
				if (_created_by != value)
				{
					Beforecreated_byChanged(value);
					_created_by = value;
					Aftercreated_byChanged();

					Oncreated_byChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecreated_byChanged(int? newValue);
		partial void Aftercreated_byChanged();

		public const string NameOfcreated_by = "created_by";

		private static readonly PropertyChangedEventArgs _created_byChangedEventArgs = new PropertyChangedEventArgs(NameOfcreated_by);

		private void Oncreated_byChanged()
		{
			OnPropertyChanged(_created_byChangedEventArgs);
		}

		#endregion

		#endregion
		#region modified_at : DateTime

		private DateTime _modified_at;
		/// <summary>
		/// 更新日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, NotNull]
		public  DateTime  modified_at
		{
			get { return _modified_at; }
			set
			{
				if (_modified_at != value)
				{
					Beforemodified_atChanged(value);
					_modified_at = value;
					Aftermodified_atChanged();

					Onmodified_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforemodified_atChanged(DateTime newValue);
		partial void Aftermodified_atChanged();

		public const string NameOfmodified_at = "modified_at";

		private static readonly PropertyChangedEventArgs _modified_atChangedEventArgs = new PropertyChangedEventArgs(NameOfmodified_at);

		private void Onmodified_atChanged()
		{
			OnPropertyChanged(_modified_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region modified_by : int?

		private int? _modified_by;
		/// <summary>
		/// 更新者
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, Nullable]
		public  int?  modified_by
		{
			get { return _modified_by; }
			set
			{
				if (_modified_by != value)
				{
					Beforemodified_byChanged(value);
					_modified_by = value;
					Aftermodified_byChanged();

					Onmodified_byChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforemodified_byChanged(int? newValue);
		partial void Aftermodified_byChanged();

		public const string NameOfmodified_by = "modified_by";

		private static readonly PropertyChangedEventArgs _modified_byChangedEventArgs = new PropertyChangedEventArgs(NameOfmodified_by);

		private void Onmodified_byChanged()
		{
			OnPropertyChanged(_modified_byChangedEventArgs);
		}

		#endregion

		#endregion
		#region removed_at : DateTime?

		private DateTime? _removed_at;
		/// <summary>
		/// 削除日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, Nullable]
		public  DateTime?  removed_at
		{
			get { return _removed_at; }
			set
			{
				if (_removed_at != value)
				{
					Beforeremoved_atChanged(value);
					_removed_at = value;
					Afterremoved_atChanged();

					Onremoved_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeremoved_atChanged(DateTime? newValue);
		partial void Afterremoved_atChanged();

		public const string NameOfremoved_at = "removed_at";

		private static readonly PropertyChangedEventArgs _removed_atChangedEventArgs = new PropertyChangedEventArgs(NameOfremoved_at);

		private void Onremoved_atChanged()
		{
			OnPropertyChanged(_removed_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region row_version : byte[]

		private byte[] _row_version;
		/// <summary>
		/// 版
		/// </summary>
		[Column(DbType="timestamp", DataType=DataType.Timestamp, SkipOnInsert=true, SkipOnUpdate=true), DataMember, Nullable]
		public  byte[]  row_version
		{
			get { return _row_version; }
			set
			{
				if (_row_version != value)
				{
					Beforerow_versionChanged(value);
					_row_version = value;
					Afterrow_versionChanged();

					Onrow_versionChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforerow_versionChanged(byte[] newValue);
		partial void Afterrow_versionChanged();

		public const string NameOfrow_version = "row_version";

		private static readonly PropertyChangedEventArgs _row_versionChangedEventArgs = new PropertyChangedEventArgs(NameOfrow_version);

		private void Onrow_versionChanged()
		{
			OnPropertyChanged(_row_versionChangedEventArgs);
		}

		#endregion

		#endregion

		#region enum用アクセスラッパー
		/// <summary>
		/// user_typeのenumラッパー
		/// </summary>
		[ColumnAlias("user_type")]
		public UserType UserType
		{
			get => (UserType)user_type;
			set => user_type = value.Val();
		}
		#endregion

		#region Constructor

		public User()
		{
			#region フィールド初期化
			uid = default(int);
			user_type = 6;
			user_no = "";
			sex_type = null;
			created_at = DateTime.UtcNow;
			created_by = null;
			modified_at = DateTime.UtcNow;
			modified_by = null;
			removed_at = null;
			row_version = default(byte[]);
			#endregion
		}

		#endregion

		#region Association

		#region SexType : sex_type (FK_User_SexType)

		private SexType _SexType;
		/// <summary>
		/// FK_User_SexType
		/// </summary>
		[Association(ThisKey="sex_type", OtherKey="sex_type_id", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_User_SexType", BackReferenceName="User"), DataMember]
		public  SexType  SexType
		{
			get { return _SexType; }
			set
			{
				if (_SexType != value)
				{
					BeforeSexTypeChanged(value);
					_SexType = value;
					AfterSexTypeChanged();

					OnSexTypeChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeSexTypeChanged(SexType newValue);
		partial void AfterSexTypeChanged ();

		public const string NameOfSexType = "SexType";

		private static readonly PropertyChangedEventArgs _SexTypeChangedEventArgs = new PropertyChangedEventArgs(NameOfSexType);

		private void OnSexTypeChanged()
		{
			OnPropertyChanged(_SexTypeChangedEventArgs);
		}

		#endregion

		#endregion
		#region IEnumerable<Account> : user_no to Account : user_no (FK_User_Account)

		private IEnumerable<Account> _AccountList;
		/// <summary>
		/// FK_User_Account_BackReference
		/// </summary>
		[Association(ThisKey="user_no", OtherKey="user_no", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true), DataMember]
		public  IEnumerable<Account>  AccountList
		{
			get { return _AccountList; }
			set
			{
				if (_AccountList != value)
				{
					BeforeAccountListChanged(value);
					_AccountList = value;
					AfterAccountListChanged();

					OnAccountListChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeAccountListChanged(IEnumerable<Account> newValue);
		partial void AfterAccountListChanged ();

		public const string NameOfAccountList = "AccountList";

		private static readonly PropertyChangedEventArgs _AccountListChangedEventArgs = new PropertyChangedEventArgs(NameOfAccountList);

		private void OnAccountListChanged()
		{
			OnPropertyChanged(_AccountListChangedEventArgs);
		}

		#endregion

		#endregion
		#region IEnumerable<PersonName> : user_type,user_no to PersonName : user_type,generic_user_no (FK_User_Name)

		private IEnumerable<PersonName> _NameList;
		/// <summary>
		/// FK_User_Name_BackReference
		/// </summary>
		[Association(ThisKey="user_type,user_no", OtherKey="user_type,generic_user_no", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true), DataMember]
		public  IEnumerable<PersonName>  NameList
		{
			get { return _NameList; }
			set
			{
				if (_NameList != value)
				{
					BeforeNameListChanged(value);
					_NameList = value;
					AfterNameListChanged();

					OnNameListChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeNameListChanged(IEnumerable<PersonName> newValue);
		partial void AfterNameListChanged ();

		public const string NameOfNameList = "NameList";

		private static readonly PropertyChangedEventArgs _NameListChangedEventArgs = new PropertyChangedEventArgs(NameOfNameList);

		private void OnNameListChanged()
		{
			OnPropertyChanged(_NameListChangedEventArgs);
		}

		#endregion

		#endregion
		#region IEnumerable<Address> : user_type,user_no to Address : user_type,generic_user_no (FK_User_Address)

		private IEnumerable<Address> _AddressList;
		/// <summary>
		/// FK_User_Address_BackReference
		/// </summary>
		[Association(ThisKey="user_type,user_no", OtherKey="user_type,generic_user_no", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true), DataMember]
		public  IEnumerable<Address>  AddressList
		{
			get { return _AddressList; }
			set
			{
				if (_AddressList != value)
				{
					BeforeAddressListChanged(value);
					_AddressList = value;
					AfterAddressListChanged();

					OnAddressListChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeAddressListChanged(IEnumerable<Address> newValue);
		partial void AfterAddressListChanged ();

		public const string NameOfAddressList = "AddressList";

		private static readonly PropertyChangedEventArgs _AddressListChangedEventArgs = new PropertyChangedEventArgs(NameOfAddressList);

		private void OnAddressListChanged()
		{
			OnPropertyChanged(_AddressListChangedEventArgs);
		}

		#endregion

		#endregion
		#region IEnumerable<Contact> : user_type,user_no to Contact : user_type,generic_user_no (FK_User_Contact)

		private IEnumerable<Contact> _ContactList;
		/// <summary>
		/// FK_User_Contact_BackReference
		/// </summary>
		[Association(ThisKey="user_type,user_no", OtherKey="user_type,generic_user_no", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true), DataMember]
		public  IEnumerable<Contact>  ContactList
		{
			get { return _ContactList; }
			set
			{
				if (_ContactList != value)
				{
					BeforeContactListChanged(value);
					_ContactList = value;
					AfterContactListChanged();

					OnContactListChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeContactListChanged(IEnumerable<Contact> newValue);
		partial void AfterContactListChanged ();

		public const string NameOfContactList = "ContactList";

		private static readonly PropertyChangedEventArgs _ContactListChangedEventArgs = new PropertyChangedEventArgs(NameOfContactList);

		private void OnContactListChanged()
		{
			OnPropertyChanged(_ContactListChangedEventArgs);
		}

		#endregion

		#endregion

		#endregion

		#region INotifyPropertyChanged support

		[field : NonSerialized]
		public virtual event PropertyChangedEventHandler PropertyChanged;

		protected void OnPropertyChanged(string propertyName)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		protected void OnPropertyChanged(PropertyChangedEventArgs arg)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, arg);
			}
		}

		#endregion

	}
	#region 他ユーザ条件
	/// <summary>
	/// 他ユーザ条件
	/// </summary>
	[DataContract]
	public partial class UserCondition : UserConditionBase
	{
	}

	/// <summary>
	/// 他ユーザ条件ベース
	/// </summary>
	[DataContract]
	public class UserConditionBase : ConditionBase<User>
	{
		#region properties
		#region uid
		/// <summary>
		/// uid_eqと等しい
		/// </summary>
		[DataMember] public int? uid_eq { get; set; }
		/// <summary>
		/// uid_neと等しくない
		/// </summary>
		[DataMember] public int? uid_ne { get; set; }
		/// <summary>
		/// uid_ltより小さい
		/// </summary>
		[DataMember] public int? uid_lt { get; set; }
		/// <summary>
		/// uid_gtより大きい
		/// </summary>
		[DataMember] public int? uid_gt { get; set; }
		/// <summary>
		/// uid_le以下
		/// </summary>
		[DataMember] public int? uid_le { get; set; }
		/// <summary>
		/// uid_ge以上
		/// </summary>
		[DataMember] public int? uid_ge { get; set; }
		/// <summary>
		/// uid_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> uid_in { get; set; }
		/// <summary>
		/// uid_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> uid_ni { get; set; }
		/// <summary>
		/// uid_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? uid_between { get; set; }
		#endregion
		#region user_type (UserType)
		private int? _user_type_eq;
		/// <summary>
		/// UserType_eqと等しい
		/// </summary>
		[DataMember] public UserType? UserType_eq
		{
			get => _user_type_eq?.ToUserType();
			set => _user_type_eq = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _user_type_ne;
		/// <summary>
		/// UserType_neと等しくない
		/// </summary>
		[DataMember] public UserType? UserType_ne
		{
			get => _user_type_ne?.ToUserType();
			set => _user_type_ne = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _user_type_lt;
		/// <summary>
		/// UserType_ltより小さい
		/// </summary>
		[DataMember] public UserType? UserType_lt
		{
			get => _user_type_lt?.ToUserType();
			set => _user_type_lt = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _user_type_gt;
		/// <summary>
		/// UserType_gtより大きい
		/// </summary>
		[DataMember] public UserType? UserType_gt
		{
			get => _user_type_gt?.ToUserType();
			set => _user_type_gt = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _user_type_le;
		/// <summary>
		/// UserType_le以下
		/// </summary>
		[DataMember] public UserType? UserType_le
		{
			get => _user_type_le?.ToUserType();
			set => _user_type_le = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _user_type_ge;
		/// <summary>
		/// UserType_ge以上
		/// </summary>
		[DataMember] public UserType? UserType_ge
		{
			get => _user_type_ge?.ToUserType();
			set => _user_type_ge = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private IEnumerable<int> _user_type_in;
		/// <summary>
		/// UserType_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<UserType> UserType_in
		{
			get => _user_type_in?.Select(_ => _.ToUserType().Value) ?? Enumerable.Empty<UserType>();
			set => _user_type_in = value.Select(_ => _.Val());
		}
		private IEnumerable<int> _user_type_ni;
		/// <summary>
		/// UserType_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<UserType> UserType_ni
		{
			get => _user_type_ni?.Select(_ => _.ToUserType().Value) ?? Enumerable.Empty<UserType>();
			set => _user_type_ni = value.Select(_ => _.Val());
		}
		private (int low, int high)? _user_type_between;
		/// <summary>
		/// UserType_betweenの範囲内にある
		/// </summary>
		[DataMember] public (UserType low, UserType high)? UserType_between
		{
			get => _user_type_between.HasValue ? (_user_type_between.Value.low.ToUserType().Value, _user_type_between.Value.high.ToUserType().Value) : ((UserType, UserType)?)null;
			set => _user_type_between = value.HasValue ? (value.Value.low.Val(), value.Value.high.Val()) : ((int, int)?)null;
		}
		#endregion
		#region user_no
		/// <summary>
		/// user_no_eqと等しい
		/// </summary>
		[DataMember] public string user_no_eq { get; set; }
		/// <summary>
		/// user_no_neと等しくない
		/// </summary>
		[DataMember] public string user_no_ne { get; set; }
		/// <summary>
		/// user_no_ltより小さい
		/// </summary>
		[DataMember] public string user_no_lt { get; set; }
		/// <summary>
		/// user_no_gtより大きい
		/// </summary>
		[DataMember] public string user_no_gt { get; set; }
		/// <summary>
		/// user_no_le以下
		/// </summary>
		[DataMember] public string user_no_le { get; set; }
		/// <summary>
		/// user_no_ge以上
		/// </summary>
		[DataMember] public string user_no_ge { get; set; }
		/// <summary>
		/// user_no_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> user_no_in { get; set; }
		/// <summary>
		/// user_no_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> user_no_ni { get; set; }
		/// <summary>
		/// user_no_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? user_no_between { get; set; }
		/// <summary>
		/// user_no_likeと部分一致する
		/// </summary>
		[DataMember] public string user_no_like { get; set; }
		#endregion
		#region sex_type
		/// <summary>
		/// sex_type_eqと等しい
		/// </summary>
		[DataMember] public int? sex_type_eq { get; set; }
		/// <summary>
		/// sex_type_neと等しくない
		/// </summary>
		[DataMember] public int? sex_type_ne { get; set; }
		/// <summary>
		/// sex_type_ltより小さい
		/// </summary>
		[DataMember] public int? sex_type_lt { get; set; }
		/// <summary>
		/// sex_type_gtより大きい
		/// </summary>
		[DataMember] public int? sex_type_gt { get; set; }
		/// <summary>
		/// sex_type_le以下
		/// </summary>
		[DataMember] public int? sex_type_le { get; set; }
		/// <summary>
		/// sex_type_ge以上
		/// </summary>
		[DataMember] public int? sex_type_ge { get; set; }
		/// <summary>
		/// sex_type_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> sex_type_in { get; set; }
		/// <summary>
		/// sex_type_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> sex_type_ni { get; set; }
		/// <summary>
		/// sex_type_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? sex_type_between { get; set; }
		/// <summary>
		/// sex_typeがNULLか
		/// </summary>
		[DataMember] public bool sex_type_isnull { get; set; } =  false ;
		/// <summary>
		/// sex_typeがNULLではないか
		/// </summary>
		[DataMember] public bool sex_type_isnotnull { get; set; } = false;
		#endregion
		#region created_at
		/// <summary>
		/// created_at_eqと等しい
		/// </summary>
		[DataMember] public DateTime? created_at_eq { get; set; }
		/// <summary>
		/// created_at_neと等しくない
		/// </summary>
		[DataMember] public DateTime? created_at_ne { get; set; }
		/// <summary>
		/// created_at_ltより小さい
		/// </summary>
		[DataMember] public DateTime? created_at_lt { get; set; }
		/// <summary>
		/// created_at_gtより大きい
		/// </summary>
		[DataMember] public DateTime? created_at_gt { get; set; }
		/// <summary>
		/// created_at_le以下
		/// </summary>
		[DataMember] public DateTime? created_at_le { get; set; }
		/// <summary>
		/// created_at_ge以上
		/// </summary>
		[DataMember] public DateTime? created_at_ge { get; set; }
		/// <summary>
		/// created_at_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> created_at_in { get; set; }
		/// <summary>
		/// created_at_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> created_at_ni { get; set; }
		/// <summary>
		/// created_at_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? created_at_between { get; set; }
		#endregion
		#region created_by
		/// <summary>
		/// created_by_eqと等しい
		/// </summary>
		[DataMember] public int? created_by_eq { get; set; }
		/// <summary>
		/// created_by_neと等しくない
		/// </summary>
		[DataMember] public int? created_by_ne { get; set; }
		/// <summary>
		/// created_by_ltより小さい
		/// </summary>
		[DataMember] public int? created_by_lt { get; set; }
		/// <summary>
		/// created_by_gtより大きい
		/// </summary>
		[DataMember] public int? created_by_gt { get; set; }
		/// <summary>
		/// created_by_le以下
		/// </summary>
		[DataMember] public int? created_by_le { get; set; }
		/// <summary>
		/// created_by_ge以上
		/// </summary>
		[DataMember] public int? created_by_ge { get; set; }
		/// <summary>
		/// created_by_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> created_by_in { get; set; }
		/// <summary>
		/// created_by_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> created_by_ni { get; set; }
		/// <summary>
		/// created_by_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? created_by_between { get; set; }
		/// <summary>
		/// created_byがNULLか
		/// </summary>
		[DataMember] public bool created_by_isnull { get; set; } =  false ;
		/// <summary>
		/// created_byがNULLではないか
		/// </summary>
		[DataMember] public bool created_by_isnotnull { get; set; } = false;
		#endregion
		#region modified_at
		/// <summary>
		/// modified_at_eqと等しい
		/// </summary>
		[DataMember] public DateTime? modified_at_eq { get; set; }
		/// <summary>
		/// modified_at_neと等しくない
		/// </summary>
		[DataMember] public DateTime? modified_at_ne { get; set; }
		/// <summary>
		/// modified_at_ltより小さい
		/// </summary>
		[DataMember] public DateTime? modified_at_lt { get; set; }
		/// <summary>
		/// modified_at_gtより大きい
		/// </summary>
		[DataMember] public DateTime? modified_at_gt { get; set; }
		/// <summary>
		/// modified_at_le以下
		/// </summary>
		[DataMember] public DateTime? modified_at_le { get; set; }
		/// <summary>
		/// modified_at_ge以上
		/// </summary>
		[DataMember] public DateTime? modified_at_ge { get; set; }
		/// <summary>
		/// modified_at_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> modified_at_in { get; set; }
		/// <summary>
		/// modified_at_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> modified_at_ni { get; set; }
		/// <summary>
		/// modified_at_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? modified_at_between { get; set; }
		#endregion
		#region modified_by
		/// <summary>
		/// modified_by_eqと等しい
		/// </summary>
		[DataMember] public int? modified_by_eq { get; set; }
		/// <summary>
		/// modified_by_neと等しくない
		/// </summary>
		[DataMember] public int? modified_by_ne { get; set; }
		/// <summary>
		/// modified_by_ltより小さい
		/// </summary>
		[DataMember] public int? modified_by_lt { get; set; }
		/// <summary>
		/// modified_by_gtより大きい
		/// </summary>
		[DataMember] public int? modified_by_gt { get; set; }
		/// <summary>
		/// modified_by_le以下
		/// </summary>
		[DataMember] public int? modified_by_le { get; set; }
		/// <summary>
		/// modified_by_ge以上
		/// </summary>
		[DataMember] public int? modified_by_ge { get; set; }
		/// <summary>
		/// modified_by_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> modified_by_in { get; set; }
		/// <summary>
		/// modified_by_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> modified_by_ni { get; set; }
		/// <summary>
		/// modified_by_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? modified_by_between { get; set; }
		/// <summary>
		/// modified_byがNULLか
		/// </summary>
		[DataMember] public bool modified_by_isnull { get; set; } =  false ;
		/// <summary>
		/// modified_byがNULLではないか
		/// </summary>
		[DataMember] public bool modified_by_isnotnull { get; set; } = false;
		#endregion
		#region removed_at
		/// <summary>
		/// removed_at_eqと等しい
		/// </summary>
		[DataMember] public DateTime? removed_at_eq { get; set; }
		/// <summary>
		/// removed_at_neと等しくない
		/// </summary>
		[DataMember] public DateTime? removed_at_ne { get; set; }
		/// <summary>
		/// removed_at_ltより小さい
		/// </summary>
		[DataMember] public DateTime? removed_at_lt { get; set; }
		/// <summary>
		/// removed_at_gtより大きい
		/// </summary>
		[DataMember] public DateTime? removed_at_gt { get; set; }
		/// <summary>
		/// removed_at_le以下
		/// </summary>
		[DataMember] public DateTime? removed_at_le { get; set; }
		/// <summary>
		/// removed_at_ge以上
		/// </summary>
		[DataMember] public DateTime? removed_at_ge { get; set; }
		/// <summary>
		/// removed_at_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> removed_at_in { get; set; }
		/// <summary>
		/// removed_at_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> removed_at_ni { get; set; }
		/// <summary>
		/// removed_at_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? removed_at_between { get; set; }
		/// <summary>
		/// removed_atがNULLか
		/// </summary>
		[DataMember] public bool removed_at_isnull { get; set; } =  true ;
		/// <summary>
		/// removed_atがNULLではないか
		/// </summary>
		[DataMember] public bool removed_at_isnotnull { get; set; } = false;
		#endregion
		#region row_version
		/// <summary>
		/// row_version_eqと等しい
		/// </summary>
		[DataMember] public byte[] row_version_eq { get; set; }
		/// <summary>
		/// row_version_neと等しくない
		/// </summary>
		[DataMember] public byte[] row_version_ne { get; set; }
		/// <summary>
		/// row_versionがNULLか
		/// </summary>
		[DataMember] public bool row_version_isnull { get; set; } =  false ;
		/// <summary>
		/// row_versionがNULLではないか
		/// </summary>
		[DataMember] public bool row_version_isnotnull { get; set; } = false;
		#endregion
		#endregion

		#region override
		override public Expression<Func<User, bool>> CreatePredicate()
		{
			var predicate = base.CreatePredicate();

			#region uid
			if (uid_eq != null) predicate = predicate.And(_ => _.uid == uid_eq);
			if (uid_ne != null) predicate = predicate.And(_ => _.uid != uid_ne);
			if (uid_lt != null) predicate = predicate.And(_ => _.uid < uid_lt);
			if (uid_gt != null) predicate = predicate.And(_ => _.uid > uid_gt);
			if (uid_le != null) predicate = predicate.And(_ => _.uid <= uid_le);
			if (uid_ge != null) predicate = predicate.And(_ => _.uid >= uid_ge);
			if (uid_in != null) predicate = predicate.And(_ => uid_in.Contains(_.uid));
			if (uid_ni != null) predicate = predicate.And(_ => !uid_ni.Contains(_.uid));
			#endregion
			#region user_type
			if (_user_type_eq != null) predicate = predicate.And(_ => _.user_type == _user_type_eq);
			if (_user_type_ne != null) predicate = predicate.And(_ => _.user_type != _user_type_ne);
			if (_user_type_lt != null) predicate = predicate.And(_ => _.user_type < _user_type_lt);
			if (_user_type_gt != null) predicate = predicate.And(_ => _.user_type > _user_type_gt);
			if (_user_type_le != null) predicate = predicate.And(_ => _.user_type <= _user_type_le);
			if (_user_type_ge != null) predicate = predicate.And(_ => _.user_type >= _user_type_ge);
			if (_user_type_in != null) predicate = predicate.And(_ => _user_type_in.Contains(_.user_type));
			if (_user_type_ni != null) predicate = predicate.And(_ => !_user_type_ni.Contains(_.user_type));
			#endregion
			#region user_no
			if (user_no_eq != null) predicate = predicate.And(_ => _.user_no == user_no_eq);
			if (user_no_ne != null) predicate = predicate.And(_ => _.user_no != user_no_ne);
			if (user_no_lt != null) predicate = predicate.And(_ => user_no_lt.CompareTo(_.user_no) > 0);
			if (user_no_gt != null) predicate = predicate.And(_ => user_no_gt.CompareTo(_.user_no) < 0);
			if (user_no_le != null) predicate = predicate.And(_ => user_no_le.CompareTo(_.user_no) >= 0);
			if (user_no_ge != null) predicate = predicate.And(_ => user_no_ge.CompareTo(_.user_no) <= 0);
			if (user_no_in != null) predicate = predicate.And(_ => user_no_in.Contains(_.user_no));
			if (user_no_ni != null) predicate = predicate.And(_ => !user_no_ni.Contains(_.user_no));
			#endregion
			#region sex_type
			if (sex_type_eq != null) predicate = predicate.And(_ => _.sex_type == sex_type_eq);
			if (sex_type_ne != null) predicate = predicate.And(_ => _.sex_type != sex_type_ne);
			if (sex_type_lt != null) predicate = predicate.And(_ => _.sex_type < sex_type_lt);
			if (sex_type_gt != null) predicate = predicate.And(_ => _.sex_type > sex_type_gt);
			if (sex_type_le != null) predicate = predicate.And(_ => _.sex_type <= sex_type_le);
			if (sex_type_ge != null) predicate = predicate.And(_ => _.sex_type >= sex_type_ge);
			if (sex_type_in != null) predicate = predicate.And(_ => sex_type_in.Contains(_.sex_type.Value));
			if (sex_type_ni != null) predicate = predicate.And(_ => !sex_type_ni.Contains(_.sex_type.Value));
			if (sex_type_isnull) predicate = predicate.And(_ => _.sex_type == null);
			if (sex_type_isnotnull) predicate = predicate.And(_ => _.sex_type != null);
			#endregion
			#region created_at
			if (created_at_eq != null) predicate = predicate.And(_ => _.created_at == created_at_eq);
			if (created_at_ne != null) predicate = predicate.And(_ => _.created_at != created_at_ne);
			if (created_at_lt != null) predicate = predicate.And(_ => _.created_at < created_at_lt);
			if (created_at_gt != null) predicate = predicate.And(_ => _.created_at > created_at_gt);
			if (created_at_le != null) predicate = predicate.And(_ => _.created_at <= created_at_le);
			if (created_at_ge != null) predicate = predicate.And(_ => _.created_at >= created_at_ge);
			if (created_at_in != null) predicate = predicate.And(_ => created_at_in.Contains(_.created_at));
			if (created_at_ni != null) predicate = predicate.And(_ => !created_at_ni.Contains(_.created_at));
			#endregion
			#region created_by
			if (created_by_eq != null) predicate = predicate.And(_ => _.created_by == created_by_eq);
			if (created_by_ne != null) predicate = predicate.And(_ => _.created_by != created_by_ne);
			if (created_by_lt != null) predicate = predicate.And(_ => _.created_by < created_by_lt);
			if (created_by_gt != null) predicate = predicate.And(_ => _.created_by > created_by_gt);
			if (created_by_le != null) predicate = predicate.And(_ => _.created_by <= created_by_le);
			if (created_by_ge != null) predicate = predicate.And(_ => _.created_by >= created_by_ge);
			if (created_by_in != null) predicate = predicate.And(_ => created_by_in.Contains(_.created_by.Value));
			if (created_by_ni != null) predicate = predicate.And(_ => !created_by_ni.Contains(_.created_by.Value));
			if (created_by_isnull) predicate = predicate.And(_ => _.created_by == null);
			if (created_by_isnotnull) predicate = predicate.And(_ => _.created_by != null);
			#endregion
			#region modified_at
			if (modified_at_eq != null) predicate = predicate.And(_ => _.modified_at == modified_at_eq);
			if (modified_at_ne != null) predicate = predicate.And(_ => _.modified_at != modified_at_ne);
			if (modified_at_lt != null) predicate = predicate.And(_ => _.modified_at < modified_at_lt);
			if (modified_at_gt != null) predicate = predicate.And(_ => _.modified_at > modified_at_gt);
			if (modified_at_le != null) predicate = predicate.And(_ => _.modified_at <= modified_at_le);
			if (modified_at_ge != null) predicate = predicate.And(_ => _.modified_at >= modified_at_ge);
			if (modified_at_in != null) predicate = predicate.And(_ => modified_at_in.Contains(_.modified_at));
			if (modified_at_ni != null) predicate = predicate.And(_ => !modified_at_ni.Contains(_.modified_at));
			#endregion
			#region modified_by
			if (modified_by_eq != null) predicate = predicate.And(_ => _.modified_by == modified_by_eq);
			if (modified_by_ne != null) predicate = predicate.And(_ => _.modified_by != modified_by_ne);
			if (modified_by_lt != null) predicate = predicate.And(_ => _.modified_by < modified_by_lt);
			if (modified_by_gt != null) predicate = predicate.And(_ => _.modified_by > modified_by_gt);
			if (modified_by_le != null) predicate = predicate.And(_ => _.modified_by <= modified_by_le);
			if (modified_by_ge != null) predicate = predicate.And(_ => _.modified_by >= modified_by_ge);
			if (modified_by_in != null) predicate = predicate.And(_ => modified_by_in.Contains(_.modified_by.Value));
			if (modified_by_ni != null) predicate = predicate.And(_ => !modified_by_ni.Contains(_.modified_by.Value));
			if (modified_by_isnull) predicate = predicate.And(_ => _.modified_by == null);
			if (modified_by_isnotnull) predicate = predicate.And(_ => _.modified_by != null);
			#endregion
			#region removed_at
			if (removed_at_eq != null) predicate = predicate.And(_ => _.removed_at == removed_at_eq);
			if (removed_at_ne != null) predicate = predicate.And(_ => _.removed_at != removed_at_ne);
			if (removed_at_lt != null) predicate = predicate.And(_ => _.removed_at < removed_at_lt);
			if (removed_at_gt != null) predicate = predicate.And(_ => _.removed_at > removed_at_gt);
			if (removed_at_le != null) predicate = predicate.And(_ => _.removed_at <= removed_at_le);
			if (removed_at_ge != null) predicate = predicate.And(_ => _.removed_at >= removed_at_ge);
			if (removed_at_in != null) predicate = predicate.And(_ => removed_at_in.Contains(_.removed_at.Value));
			if (removed_at_ni != null) predicate = predicate.And(_ => !removed_at_ni.Contains(_.removed_at.Value));
			if (removed_at_isnull) predicate = predicate.And(_ => _.removed_at == null);
			if (removed_at_isnotnull) predicate = predicate.And(_ => _.removed_at != null);
			#endregion
			#region row_version
			if (row_version_eq != null) predicate = predicate.And(_ => _.row_version == row_version_eq);
			if (row_version_ne != null) predicate = predicate.And(_ => _.row_version != row_version_ne);
			if (row_version_isnull) predicate = predicate.And(_ => _.row_version == null);
			if (row_version_isnotnull) predicate = predicate.And(_ => _.row_version != null);
			#endregion

			return predicate;
		}
		#endregion
	}
	#endregion
	#endregion
	#region 性別区分
	/// <summary>
	/// 性別区分
	/// </summary>
	[Table(Schema="Master", Name="SexType"), DataContract]
	public partial class SexType : TableBase<SexType>, INotifyPropertyChanged
	{
		#region uid : int

		private int _uid;
		/// <summary>
		/// ユニークID
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull, Identity]
		public  int  uid
		{
			get { return _uid; }
			set
			{
				if (_uid != value)
				{
					BeforeuidChanged(value);
					_uid = value;
					AfteruidChanged();

					OnuidChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeuidChanged(int newValue);
		partial void AfteruidChanged();

		public const string NameOfuid = "uid";

		private static readonly PropertyChangedEventArgs _uidChangedEventArgs = new PropertyChangedEventArgs(NameOfuid);

		private void OnuidChanged()
		{
			OnPropertyChanged(_uidChangedEventArgs);
		}

		#endregion

		#endregion
		#region sex_type_id : int

		private int _sex_type_id;
		/// <summary>
		/// 性別区分ID
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull, PrimaryKey(Order = 1), System.ComponentModel.DataAnnotations.Required]
		public  int  sex_type_id
		{
			get { return _sex_type_id; }
			set
			{
				if (_sex_type_id != value)
				{
					Beforesex_type_idChanged(value);
					_sex_type_id = value;
					Aftersex_type_idChanged();

					Onsex_type_idChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforesex_type_idChanged(int newValue);
		partial void Aftersex_type_idChanged();

		public const string NameOfsex_type_id = "sex_type_id";

		private static readonly PropertyChangedEventArgs _sex_type_idChangedEventArgs = new PropertyChangedEventArgs(NameOfsex_type_id);

		private void Onsex_type_idChanged()
		{
			OnPropertyChanged(_sex_type_idChangedEventArgs);
		}

		#endregion

		#endregion
		#region name : string

		private string _name;
		/// <summary>
		/// 名称
		/// </summary>
		[Column(DbType="nvarchar(10)", DataType=DataType.NVarChar, Length=10), DataMember, NotNull, System.ComponentModel.DataAnnotations.Required]
		public  string  name
		{
			get { return _name; }
			set
			{
				if (_name != value)
				{
					BeforenameChanged(value);
					_name = value;
					AfternameChanged();

					OnnameChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforenameChanged(string newValue);
		partial void AfternameChanged();

		public const string NameOfname = "name";

		private static readonly PropertyChangedEventArgs _nameChangedEventArgs = new PropertyChangedEventArgs(NameOfname);

		private void OnnameChanged()
		{
			OnPropertyChanged(_nameChangedEventArgs);
		}

		#endregion

		#endregion
		#region gender_type : int?

		private int? _gender_type;
		/// <summary>
		/// 公的性別区分
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, Nullable, System.ComponentModel.DataAnnotations.Required]
		public  int?  gender_type
		{
			get { return _gender_type; }
			set
			{
				if (_gender_type != value)
				{
					Beforegender_typeChanged(value);
					_gender_type = value;
					Aftergender_typeChanged();

					Ongender_typeChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforegender_typeChanged(int? newValue);
		partial void Aftergender_typeChanged();

		public const string NameOfgender_type = "gender_type";

		private static readonly PropertyChangedEventArgs _gender_typeChangedEventArgs = new PropertyChangedEventArgs(NameOfgender_type);

		private void Ongender_typeChanged()
		{
			OnPropertyChanged(_gender_typeChangedEventArgs);
		}

		#endregion

		#endregion
		#region description : string

		private string _description;
		/// <summary>
		/// 説明
		/// </summary>
		[Column(DbType="nvarchar(64)", DataType=DataType.NVarChar, Length=64), DataMember, NotNull]
		public  string  description
		{
			get { return _description; }
			set
			{
				if (_description != value)
				{
					BeforedescriptionChanged(value);
					_description = value;
					AfterdescriptionChanged();

					OndescriptionChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforedescriptionChanged(string newValue);
		partial void AfterdescriptionChanged();

		public const string NameOfdescription = "description";

		private static readonly PropertyChangedEventArgs _descriptionChangedEventArgs = new PropertyChangedEventArgs(NameOfdescription);

		private void OndescriptionChanged()
		{
			OnPropertyChanged(_descriptionChangedEventArgs);
		}

		#endregion

		#endregion
		#region display_order : int

		private int _display_order;
		/// <summary>
		/// 表示順
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull, System.ComponentModel.DataAnnotations.Required]
		public  int  display_order
		{
			get { return _display_order; }
			set
			{
				if (_display_order != value)
				{
					Beforedisplay_orderChanged(value);
					_display_order = value;
					Afterdisplay_orderChanged();

					Ondisplay_orderChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforedisplay_orderChanged(int newValue);
		partial void Afterdisplay_orderChanged();

		public const string NameOfdisplay_order = "display_order";

		private static readonly PropertyChangedEventArgs _display_orderChangedEventArgs = new PropertyChangedEventArgs(NameOfdisplay_order);

		private void Ondisplay_orderChanged()
		{
			OnPropertyChanged(_display_orderChangedEventArgs);
		}

		#endregion

		#endregion
		#region created_at : DateTime

		private DateTime _created_at;
		/// <summary>
		/// 作成日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, NotNull]
		public  DateTime  created_at
		{
			get { return _created_at; }
			set
			{
				if (_created_at != value)
				{
					Beforecreated_atChanged(value);
					_created_at = value;
					Aftercreated_atChanged();

					Oncreated_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecreated_atChanged(DateTime newValue);
		partial void Aftercreated_atChanged();

		public const string NameOfcreated_at = "created_at";

		private static readonly PropertyChangedEventArgs _created_atChangedEventArgs = new PropertyChangedEventArgs(NameOfcreated_at);

		private void Oncreated_atChanged()
		{
			OnPropertyChanged(_created_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region created_by : int?

		private int? _created_by;
		/// <summary>
		/// 作成者
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, Nullable]
		public  int?  created_by
		{
			get { return _created_by; }
			set
			{
				if (_created_by != value)
				{
					Beforecreated_byChanged(value);
					_created_by = value;
					Aftercreated_byChanged();

					Oncreated_byChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecreated_byChanged(int? newValue);
		partial void Aftercreated_byChanged();

		public const string NameOfcreated_by = "created_by";

		private static readonly PropertyChangedEventArgs _created_byChangedEventArgs = new PropertyChangedEventArgs(NameOfcreated_by);

		private void Oncreated_byChanged()
		{
			OnPropertyChanged(_created_byChangedEventArgs);
		}

		#endregion

		#endregion
		#region modified_at : DateTime

		private DateTime _modified_at;
		/// <summary>
		/// 更新日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, NotNull]
		public  DateTime  modified_at
		{
			get { return _modified_at; }
			set
			{
				if (_modified_at != value)
				{
					Beforemodified_atChanged(value);
					_modified_at = value;
					Aftermodified_atChanged();

					Onmodified_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforemodified_atChanged(DateTime newValue);
		partial void Aftermodified_atChanged();

		public const string NameOfmodified_at = "modified_at";

		private static readonly PropertyChangedEventArgs _modified_atChangedEventArgs = new PropertyChangedEventArgs(NameOfmodified_at);

		private void Onmodified_atChanged()
		{
			OnPropertyChanged(_modified_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region modified_by : int?

		private int? _modified_by;
		/// <summary>
		/// 更新者
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, Nullable]
		public  int?  modified_by
		{
			get { return _modified_by; }
			set
			{
				if (_modified_by != value)
				{
					Beforemodified_byChanged(value);
					_modified_by = value;
					Aftermodified_byChanged();

					Onmodified_byChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforemodified_byChanged(int? newValue);
		partial void Aftermodified_byChanged();

		public const string NameOfmodified_by = "modified_by";

		private static readonly PropertyChangedEventArgs _modified_byChangedEventArgs = new PropertyChangedEventArgs(NameOfmodified_by);

		private void Onmodified_byChanged()
		{
			OnPropertyChanged(_modified_byChangedEventArgs);
		}

		#endregion

		#endregion
		#region removed_at : DateTime?

		private DateTime? _removed_at;
		/// <summary>
		/// 削除日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, Nullable]
		public  DateTime?  removed_at
		{
			get { return _removed_at; }
			set
			{
				if (_removed_at != value)
				{
					Beforeremoved_atChanged(value);
					_removed_at = value;
					Afterremoved_atChanged();

					Onremoved_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeremoved_atChanged(DateTime? newValue);
		partial void Afterremoved_atChanged();

		public const string NameOfremoved_at = "removed_at";

		private static readonly PropertyChangedEventArgs _removed_atChangedEventArgs = new PropertyChangedEventArgs(NameOfremoved_at);

		private void Onremoved_atChanged()
		{
			OnPropertyChanged(_removed_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region row_version : byte[]

		private byte[] _row_version;
		/// <summary>
		/// 版
		/// </summary>
		[Column(DbType="timestamp", DataType=DataType.Timestamp, SkipOnInsert=true, SkipOnUpdate=true), DataMember, Nullable]
		public  byte[]  row_version
		{
			get { return _row_version; }
			set
			{
				if (_row_version != value)
				{
					Beforerow_versionChanged(value);
					_row_version = value;
					Afterrow_versionChanged();

					Onrow_versionChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforerow_versionChanged(byte[] newValue);
		partial void Afterrow_versionChanged();

		public const string NameOfrow_version = "row_version";

		private static readonly PropertyChangedEventArgs _row_versionChangedEventArgs = new PropertyChangedEventArgs(NameOfrow_version);

		private void Onrow_versionChanged()
		{
			OnPropertyChanged(_row_versionChangedEventArgs);
		}

		#endregion

		#endregion

		#region enum用アクセスラッパー
		/// <summary>
		/// gender_typeのenumラッパー
		/// </summary>
		[ColumnAlias("gender_type")]
		public Gender? GenderType
		{
			get => (Gender?)gender_type;
			set => gender_type = value?.Val();
		}
		#endregion

		#region Constructor

		public SexType()
		{
			#region フィールド初期化
			uid = default(int);
			sex_type_id = 0;
			name = "";
			gender_type = 1;
			description = "";
			display_order = 0;
			created_at = DateTime.UtcNow;
			created_by = null;
			modified_at = DateTime.UtcNow;
			modified_by = null;
			removed_at = null;
			row_version = default(byte[]);
			#endregion
		}

		#endregion

		#region Association


		#endregion

		#region INotifyPropertyChanged support

		[field : NonSerialized]
		public virtual event PropertyChangedEventHandler PropertyChanged;

		protected void OnPropertyChanged(string propertyName)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		protected void OnPropertyChanged(PropertyChangedEventArgs arg)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, arg);
			}
		}

		#endregion

	}
	#region 性別区分条件
	/// <summary>
	/// 性別区分条件
	/// </summary>
	[DataContract]
	public partial class SexTypeCondition : SexTypeConditionBase
	{
	}

	/// <summary>
	/// 性別区分条件ベース
	/// </summary>
	[DataContract]
	public class SexTypeConditionBase : ConditionBase<SexType>
	{
		#region properties
		#region uid
		/// <summary>
		/// uid_eqと等しい
		/// </summary>
		[DataMember] public int? uid_eq { get; set; }
		/// <summary>
		/// uid_neと等しくない
		/// </summary>
		[DataMember] public int? uid_ne { get; set; }
		/// <summary>
		/// uid_ltより小さい
		/// </summary>
		[DataMember] public int? uid_lt { get; set; }
		/// <summary>
		/// uid_gtより大きい
		/// </summary>
		[DataMember] public int? uid_gt { get; set; }
		/// <summary>
		/// uid_le以下
		/// </summary>
		[DataMember] public int? uid_le { get; set; }
		/// <summary>
		/// uid_ge以上
		/// </summary>
		[DataMember] public int? uid_ge { get; set; }
		/// <summary>
		/// uid_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> uid_in { get; set; }
		/// <summary>
		/// uid_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> uid_ni { get; set; }
		/// <summary>
		/// uid_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? uid_between { get; set; }
		#endregion
		#region sex_type_id
		/// <summary>
		/// sex_type_id_eqと等しい
		/// </summary>
		[DataMember] public int? sex_type_id_eq { get; set; }
		/// <summary>
		/// sex_type_id_neと等しくない
		/// </summary>
		[DataMember] public int? sex_type_id_ne { get; set; }
		/// <summary>
		/// sex_type_id_ltより小さい
		/// </summary>
		[DataMember] public int? sex_type_id_lt { get; set; }
		/// <summary>
		/// sex_type_id_gtより大きい
		/// </summary>
		[DataMember] public int? sex_type_id_gt { get; set; }
		/// <summary>
		/// sex_type_id_le以下
		/// </summary>
		[DataMember] public int? sex_type_id_le { get; set; }
		/// <summary>
		/// sex_type_id_ge以上
		/// </summary>
		[DataMember] public int? sex_type_id_ge { get; set; }
		/// <summary>
		/// sex_type_id_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> sex_type_id_in { get; set; }
		/// <summary>
		/// sex_type_id_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> sex_type_id_ni { get; set; }
		/// <summary>
		/// sex_type_id_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? sex_type_id_between { get; set; }
		#endregion
		#region name
		/// <summary>
		/// name_eqと等しい
		/// </summary>
		[DataMember] public string name_eq { get; set; }
		/// <summary>
		/// name_neと等しくない
		/// </summary>
		[DataMember] public string name_ne { get; set; }
		/// <summary>
		/// name_ltより小さい
		/// </summary>
		[DataMember] public string name_lt { get; set; }
		/// <summary>
		/// name_gtより大きい
		/// </summary>
		[DataMember] public string name_gt { get; set; }
		/// <summary>
		/// name_le以下
		/// </summary>
		[DataMember] public string name_le { get; set; }
		/// <summary>
		/// name_ge以上
		/// </summary>
		[DataMember] public string name_ge { get; set; }
		/// <summary>
		/// name_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> name_in { get; set; }
		/// <summary>
		/// name_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> name_ni { get; set; }
		/// <summary>
		/// name_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? name_between { get; set; }
		/// <summary>
		/// name_likeと部分一致する
		/// </summary>
		[DataMember] public string name_like { get; set; }
		#endregion
		#region gender_type (GenderType)
		private int? _gender_type_eq;
		/// <summary>
		/// GenderType_eqと等しい
		/// </summary>
		[DataMember] public Gender? GenderType_eq
		{
			get => _gender_type_eq?.ToGender();
			set => _gender_type_eq = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _gender_type_ne;
		/// <summary>
		/// GenderType_neと等しくない
		/// </summary>
		[DataMember] public Gender? GenderType_ne
		{
			get => _gender_type_ne?.ToGender();
			set => _gender_type_ne = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _gender_type_lt;
		/// <summary>
		/// GenderType_ltより小さい
		/// </summary>
		[DataMember] public Gender? GenderType_lt
		{
			get => _gender_type_lt?.ToGender();
			set => _gender_type_lt = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _gender_type_gt;
		/// <summary>
		/// GenderType_gtより大きい
		/// </summary>
		[DataMember] public Gender? GenderType_gt
		{
			get => _gender_type_gt?.ToGender();
			set => _gender_type_gt = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _gender_type_le;
		/// <summary>
		/// GenderType_le以下
		/// </summary>
		[DataMember] public Gender? GenderType_le
		{
			get => _gender_type_le?.ToGender();
			set => _gender_type_le = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _gender_type_ge;
		/// <summary>
		/// GenderType_ge以上
		/// </summary>
		[DataMember] public Gender? GenderType_ge
		{
			get => _gender_type_ge?.ToGender();
			set => _gender_type_ge = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private IEnumerable<int> _gender_type_in;
		/// <summary>
		/// GenderType_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<Gender> GenderType_in
		{
			get => _gender_type_in?.Select(_ => _.ToGender().Value) ?? Enumerable.Empty<Gender>();
			set => _gender_type_in = value.Select(_ => _.Val());
		}
		private IEnumerable<int> _gender_type_ni;
		/// <summary>
		/// GenderType_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<Gender> GenderType_ni
		{
			get => _gender_type_ni?.Select(_ => _.ToGender().Value) ?? Enumerable.Empty<Gender>();
			set => _gender_type_ni = value.Select(_ => _.Val());
		}
		private (int low, int high)? _gender_type_between;
		/// <summary>
		/// GenderType_betweenの範囲内にある
		/// </summary>
		[DataMember] public (Gender low, Gender high)? GenderType_between
		{
			get => _gender_type_between.HasValue ? (_gender_type_between.Value.low.ToGender().Value, _gender_type_between.Value.high.ToGender().Value) : ((Gender, Gender)?)null;
			set => _gender_type_between = value.HasValue ? (value.Value.low.Val(), value.Value.high.Val()) : ((int, int)?)null;
		}
		private bool _gender_type_isnull { get; set; } =  false ;
		/// <summary>
		/// GenderTypeがNULLか
		/// </summary>
		[DataMember] public bool GenderType_isnull
		{
			get => _gender_type_isnull;
			set => _gender_type_isnull = value;
		}
		private bool _gender_type_isnotnull { get; set; } = false;
		/// <summary>
		/// GenderTypeがNULLではないか
		/// </summary>
		[DataMember] public bool GenderType_isnotnull
		{
			get => _gender_type_isnotnull;
			set => _gender_type_isnotnull = value;
		}
		#endregion
		#region description
		/// <summary>
		/// description_eqと等しい
		/// </summary>
		[DataMember] public string description_eq { get; set; }
		/// <summary>
		/// description_neと等しくない
		/// </summary>
		[DataMember] public string description_ne { get; set; }
		/// <summary>
		/// description_ltより小さい
		/// </summary>
		[DataMember] public string description_lt { get; set; }
		/// <summary>
		/// description_gtより大きい
		/// </summary>
		[DataMember] public string description_gt { get; set; }
		/// <summary>
		/// description_le以下
		/// </summary>
		[DataMember] public string description_le { get; set; }
		/// <summary>
		/// description_ge以上
		/// </summary>
		[DataMember] public string description_ge { get; set; }
		/// <summary>
		/// description_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> description_in { get; set; }
		/// <summary>
		/// description_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> description_ni { get; set; }
		/// <summary>
		/// description_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? description_between { get; set; }
		/// <summary>
		/// description_likeと部分一致する
		/// </summary>
		[DataMember] public string description_like { get; set; }
		#endregion
		#region display_order
		/// <summary>
		/// display_order_eqと等しい
		/// </summary>
		[DataMember] public int? display_order_eq { get; set; }
		/// <summary>
		/// display_order_neと等しくない
		/// </summary>
		[DataMember] public int? display_order_ne { get; set; }
		/// <summary>
		/// display_order_ltより小さい
		/// </summary>
		[DataMember] public int? display_order_lt { get; set; }
		/// <summary>
		/// display_order_gtより大きい
		/// </summary>
		[DataMember] public int? display_order_gt { get; set; }
		/// <summary>
		/// display_order_le以下
		/// </summary>
		[DataMember] public int? display_order_le { get; set; }
		/// <summary>
		/// display_order_ge以上
		/// </summary>
		[DataMember] public int? display_order_ge { get; set; }
		/// <summary>
		/// display_order_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> display_order_in { get; set; }
		/// <summary>
		/// display_order_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> display_order_ni { get; set; }
		/// <summary>
		/// display_order_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? display_order_between { get; set; }
		#endregion
		#region created_at
		/// <summary>
		/// created_at_eqと等しい
		/// </summary>
		[DataMember] public DateTime? created_at_eq { get; set; }
		/// <summary>
		/// created_at_neと等しくない
		/// </summary>
		[DataMember] public DateTime? created_at_ne { get; set; }
		/// <summary>
		/// created_at_ltより小さい
		/// </summary>
		[DataMember] public DateTime? created_at_lt { get; set; }
		/// <summary>
		/// created_at_gtより大きい
		/// </summary>
		[DataMember] public DateTime? created_at_gt { get; set; }
		/// <summary>
		/// created_at_le以下
		/// </summary>
		[DataMember] public DateTime? created_at_le { get; set; }
		/// <summary>
		/// created_at_ge以上
		/// </summary>
		[DataMember] public DateTime? created_at_ge { get; set; }
		/// <summary>
		/// created_at_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> created_at_in { get; set; }
		/// <summary>
		/// created_at_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> created_at_ni { get; set; }
		/// <summary>
		/// created_at_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? created_at_between { get; set; }
		#endregion
		#region created_by
		/// <summary>
		/// created_by_eqと等しい
		/// </summary>
		[DataMember] public int? created_by_eq { get; set; }
		/// <summary>
		/// created_by_neと等しくない
		/// </summary>
		[DataMember] public int? created_by_ne { get; set; }
		/// <summary>
		/// created_by_ltより小さい
		/// </summary>
		[DataMember] public int? created_by_lt { get; set; }
		/// <summary>
		/// created_by_gtより大きい
		/// </summary>
		[DataMember] public int? created_by_gt { get; set; }
		/// <summary>
		/// created_by_le以下
		/// </summary>
		[DataMember] public int? created_by_le { get; set; }
		/// <summary>
		/// created_by_ge以上
		/// </summary>
		[DataMember] public int? created_by_ge { get; set; }
		/// <summary>
		/// created_by_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> created_by_in { get; set; }
		/// <summary>
		/// created_by_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> created_by_ni { get; set; }
		/// <summary>
		/// created_by_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? created_by_between { get; set; }
		/// <summary>
		/// created_byがNULLか
		/// </summary>
		[DataMember] public bool created_by_isnull { get; set; } =  false ;
		/// <summary>
		/// created_byがNULLではないか
		/// </summary>
		[DataMember] public bool created_by_isnotnull { get; set; } = false;
		#endregion
		#region modified_at
		/// <summary>
		/// modified_at_eqと等しい
		/// </summary>
		[DataMember] public DateTime? modified_at_eq { get; set; }
		/// <summary>
		/// modified_at_neと等しくない
		/// </summary>
		[DataMember] public DateTime? modified_at_ne { get; set; }
		/// <summary>
		/// modified_at_ltより小さい
		/// </summary>
		[DataMember] public DateTime? modified_at_lt { get; set; }
		/// <summary>
		/// modified_at_gtより大きい
		/// </summary>
		[DataMember] public DateTime? modified_at_gt { get; set; }
		/// <summary>
		/// modified_at_le以下
		/// </summary>
		[DataMember] public DateTime? modified_at_le { get; set; }
		/// <summary>
		/// modified_at_ge以上
		/// </summary>
		[DataMember] public DateTime? modified_at_ge { get; set; }
		/// <summary>
		/// modified_at_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> modified_at_in { get; set; }
		/// <summary>
		/// modified_at_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> modified_at_ni { get; set; }
		/// <summary>
		/// modified_at_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? modified_at_between { get; set; }
		#endregion
		#region modified_by
		/// <summary>
		/// modified_by_eqと等しい
		/// </summary>
		[DataMember] public int? modified_by_eq { get; set; }
		/// <summary>
		/// modified_by_neと等しくない
		/// </summary>
		[DataMember] public int? modified_by_ne { get; set; }
		/// <summary>
		/// modified_by_ltより小さい
		/// </summary>
		[DataMember] public int? modified_by_lt { get; set; }
		/// <summary>
		/// modified_by_gtより大きい
		/// </summary>
		[DataMember] public int? modified_by_gt { get; set; }
		/// <summary>
		/// modified_by_le以下
		/// </summary>
		[DataMember] public int? modified_by_le { get; set; }
		/// <summary>
		/// modified_by_ge以上
		/// </summary>
		[DataMember] public int? modified_by_ge { get; set; }
		/// <summary>
		/// modified_by_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> modified_by_in { get; set; }
		/// <summary>
		/// modified_by_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> modified_by_ni { get; set; }
		/// <summary>
		/// modified_by_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? modified_by_between { get; set; }
		/// <summary>
		/// modified_byがNULLか
		/// </summary>
		[DataMember] public bool modified_by_isnull { get; set; } =  false ;
		/// <summary>
		/// modified_byがNULLではないか
		/// </summary>
		[DataMember] public bool modified_by_isnotnull { get; set; } = false;
		#endregion
		#region removed_at
		/// <summary>
		/// removed_at_eqと等しい
		/// </summary>
		[DataMember] public DateTime? removed_at_eq { get; set; }
		/// <summary>
		/// removed_at_neと等しくない
		/// </summary>
		[DataMember] public DateTime? removed_at_ne { get; set; }
		/// <summary>
		/// removed_at_ltより小さい
		/// </summary>
		[DataMember] public DateTime? removed_at_lt { get; set; }
		/// <summary>
		/// removed_at_gtより大きい
		/// </summary>
		[DataMember] public DateTime? removed_at_gt { get; set; }
		/// <summary>
		/// removed_at_le以下
		/// </summary>
		[DataMember] public DateTime? removed_at_le { get; set; }
		/// <summary>
		/// removed_at_ge以上
		/// </summary>
		[DataMember] public DateTime? removed_at_ge { get; set; }
		/// <summary>
		/// removed_at_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> removed_at_in { get; set; }
		/// <summary>
		/// removed_at_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> removed_at_ni { get; set; }
		/// <summary>
		/// removed_at_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? removed_at_between { get; set; }
		/// <summary>
		/// removed_atがNULLか
		/// </summary>
		[DataMember] public bool removed_at_isnull { get; set; } =  true ;
		/// <summary>
		/// removed_atがNULLではないか
		/// </summary>
		[DataMember] public bool removed_at_isnotnull { get; set; } = false;
		#endregion
		#region row_version
		/// <summary>
		/// row_version_eqと等しい
		/// </summary>
		[DataMember] public byte[] row_version_eq { get; set; }
		/// <summary>
		/// row_version_neと等しくない
		/// </summary>
		[DataMember] public byte[] row_version_ne { get; set; }
		/// <summary>
		/// row_versionがNULLか
		/// </summary>
		[DataMember] public bool row_version_isnull { get; set; } =  false ;
		/// <summary>
		/// row_versionがNULLではないか
		/// </summary>
		[DataMember] public bool row_version_isnotnull { get; set; } = false;
		#endregion
		#endregion

		#region override
		override public Expression<Func<SexType, bool>> CreatePredicate()
		{
			var predicate = base.CreatePredicate();

			#region uid
			if (uid_eq != null) predicate = predicate.And(_ => _.uid == uid_eq);
			if (uid_ne != null) predicate = predicate.And(_ => _.uid != uid_ne);
			if (uid_lt != null) predicate = predicate.And(_ => _.uid < uid_lt);
			if (uid_gt != null) predicate = predicate.And(_ => _.uid > uid_gt);
			if (uid_le != null) predicate = predicate.And(_ => _.uid <= uid_le);
			if (uid_ge != null) predicate = predicate.And(_ => _.uid >= uid_ge);
			if (uid_in != null) predicate = predicate.And(_ => uid_in.Contains(_.uid));
			if (uid_ni != null) predicate = predicate.And(_ => !uid_ni.Contains(_.uid));
			#endregion
			#region sex_type_id
			if (sex_type_id_eq != null) predicate = predicate.And(_ => _.sex_type_id == sex_type_id_eq);
			if (sex_type_id_ne != null) predicate = predicate.And(_ => _.sex_type_id != sex_type_id_ne);
			if (sex_type_id_lt != null) predicate = predicate.And(_ => _.sex_type_id < sex_type_id_lt);
			if (sex_type_id_gt != null) predicate = predicate.And(_ => _.sex_type_id > sex_type_id_gt);
			if (sex_type_id_le != null) predicate = predicate.And(_ => _.sex_type_id <= sex_type_id_le);
			if (sex_type_id_ge != null) predicate = predicate.And(_ => _.sex_type_id >= sex_type_id_ge);
			if (sex_type_id_in != null) predicate = predicate.And(_ => sex_type_id_in.Contains(_.sex_type_id));
			if (sex_type_id_ni != null) predicate = predicate.And(_ => !sex_type_id_ni.Contains(_.sex_type_id));
			#endregion
			#region name
			if (name_eq != null) predicate = predicate.And(_ => _.name == name_eq);
			if (name_ne != null) predicate = predicate.And(_ => _.name != name_ne);
			if (name_lt != null) predicate = predicate.And(_ => name_lt.CompareTo(_.name) > 0);
			if (name_gt != null) predicate = predicate.And(_ => name_gt.CompareTo(_.name) < 0);
			if (name_le != null) predicate = predicate.And(_ => name_le.CompareTo(_.name) >= 0);
			if (name_ge != null) predicate = predicate.And(_ => name_ge.CompareTo(_.name) <= 0);
			if (name_in != null) predicate = predicate.And(_ => name_in.Contains(_.name));
			if (name_ni != null) predicate = predicate.And(_ => !name_ni.Contains(_.name));
			#endregion
			#region gender_type
			if (_gender_type_eq != null) predicate = predicate.And(_ => _.gender_type == _gender_type_eq);
			if (_gender_type_ne != null) predicate = predicate.And(_ => _.gender_type != _gender_type_ne);
			if (_gender_type_lt != null) predicate = predicate.And(_ => _.gender_type < _gender_type_lt);
			if (_gender_type_gt != null) predicate = predicate.And(_ => _.gender_type > _gender_type_gt);
			if (_gender_type_le != null) predicate = predicate.And(_ => _.gender_type <= _gender_type_le);
			if (_gender_type_ge != null) predicate = predicate.And(_ => _.gender_type >= _gender_type_ge);
			if (_gender_type_in != null) predicate = predicate.And(_ => _gender_type_in.Contains(_.gender_type.Value));
			if (_gender_type_ni != null) predicate = predicate.And(_ => !_gender_type_ni.Contains(_.gender_type.Value));
			if (_gender_type_isnull) predicate = predicate.And(_ => _.gender_type == null);
			if (_gender_type_isnotnull) predicate = predicate.And(_ => _.gender_type != null);
			#endregion
			#region description
			if (description_eq != null) predicate = predicate.And(_ => _.description == description_eq);
			if (description_ne != null) predicate = predicate.And(_ => _.description != description_ne);
			if (description_lt != null) predicate = predicate.And(_ => description_lt.CompareTo(_.description) > 0);
			if (description_gt != null) predicate = predicate.And(_ => description_gt.CompareTo(_.description) < 0);
			if (description_le != null) predicate = predicate.And(_ => description_le.CompareTo(_.description) >= 0);
			if (description_ge != null) predicate = predicate.And(_ => description_ge.CompareTo(_.description) <= 0);
			if (description_in != null) predicate = predicate.And(_ => description_in.Contains(_.description));
			if (description_ni != null) predicate = predicate.And(_ => !description_ni.Contains(_.description));
			#endregion
			#region display_order
			if (display_order_eq != null) predicate = predicate.And(_ => _.display_order == display_order_eq);
			if (display_order_ne != null) predicate = predicate.And(_ => _.display_order != display_order_ne);
			if (display_order_lt != null) predicate = predicate.And(_ => _.display_order < display_order_lt);
			if (display_order_gt != null) predicate = predicate.And(_ => _.display_order > display_order_gt);
			if (display_order_le != null) predicate = predicate.And(_ => _.display_order <= display_order_le);
			if (display_order_ge != null) predicate = predicate.And(_ => _.display_order >= display_order_ge);
			if (display_order_in != null) predicate = predicate.And(_ => display_order_in.Contains(_.display_order));
			if (display_order_ni != null) predicate = predicate.And(_ => !display_order_ni.Contains(_.display_order));
			#endregion
			#region created_at
			if (created_at_eq != null) predicate = predicate.And(_ => _.created_at == created_at_eq);
			if (created_at_ne != null) predicate = predicate.And(_ => _.created_at != created_at_ne);
			if (created_at_lt != null) predicate = predicate.And(_ => _.created_at < created_at_lt);
			if (created_at_gt != null) predicate = predicate.And(_ => _.created_at > created_at_gt);
			if (created_at_le != null) predicate = predicate.And(_ => _.created_at <= created_at_le);
			if (created_at_ge != null) predicate = predicate.And(_ => _.created_at >= created_at_ge);
			if (created_at_in != null) predicate = predicate.And(_ => created_at_in.Contains(_.created_at));
			if (created_at_ni != null) predicate = predicate.And(_ => !created_at_ni.Contains(_.created_at));
			#endregion
			#region created_by
			if (created_by_eq != null) predicate = predicate.And(_ => _.created_by == created_by_eq);
			if (created_by_ne != null) predicate = predicate.And(_ => _.created_by != created_by_ne);
			if (created_by_lt != null) predicate = predicate.And(_ => _.created_by < created_by_lt);
			if (created_by_gt != null) predicate = predicate.And(_ => _.created_by > created_by_gt);
			if (created_by_le != null) predicate = predicate.And(_ => _.created_by <= created_by_le);
			if (created_by_ge != null) predicate = predicate.And(_ => _.created_by >= created_by_ge);
			if (created_by_in != null) predicate = predicate.And(_ => created_by_in.Contains(_.created_by.Value));
			if (created_by_ni != null) predicate = predicate.And(_ => !created_by_ni.Contains(_.created_by.Value));
			if (created_by_isnull) predicate = predicate.And(_ => _.created_by == null);
			if (created_by_isnotnull) predicate = predicate.And(_ => _.created_by != null);
			#endregion
			#region modified_at
			if (modified_at_eq != null) predicate = predicate.And(_ => _.modified_at == modified_at_eq);
			if (modified_at_ne != null) predicate = predicate.And(_ => _.modified_at != modified_at_ne);
			if (modified_at_lt != null) predicate = predicate.And(_ => _.modified_at < modified_at_lt);
			if (modified_at_gt != null) predicate = predicate.And(_ => _.modified_at > modified_at_gt);
			if (modified_at_le != null) predicate = predicate.And(_ => _.modified_at <= modified_at_le);
			if (modified_at_ge != null) predicate = predicate.And(_ => _.modified_at >= modified_at_ge);
			if (modified_at_in != null) predicate = predicate.And(_ => modified_at_in.Contains(_.modified_at));
			if (modified_at_ni != null) predicate = predicate.And(_ => !modified_at_ni.Contains(_.modified_at));
			#endregion
			#region modified_by
			if (modified_by_eq != null) predicate = predicate.And(_ => _.modified_by == modified_by_eq);
			if (modified_by_ne != null) predicate = predicate.And(_ => _.modified_by != modified_by_ne);
			if (modified_by_lt != null) predicate = predicate.And(_ => _.modified_by < modified_by_lt);
			if (modified_by_gt != null) predicate = predicate.And(_ => _.modified_by > modified_by_gt);
			if (modified_by_le != null) predicate = predicate.And(_ => _.modified_by <= modified_by_le);
			if (modified_by_ge != null) predicate = predicate.And(_ => _.modified_by >= modified_by_ge);
			if (modified_by_in != null) predicate = predicate.And(_ => modified_by_in.Contains(_.modified_by.Value));
			if (modified_by_ni != null) predicate = predicate.And(_ => !modified_by_ni.Contains(_.modified_by.Value));
			if (modified_by_isnull) predicate = predicate.And(_ => _.modified_by == null);
			if (modified_by_isnotnull) predicate = predicate.And(_ => _.modified_by != null);
			#endregion
			#region removed_at
			if (removed_at_eq != null) predicate = predicate.And(_ => _.removed_at == removed_at_eq);
			if (removed_at_ne != null) predicate = predicate.And(_ => _.removed_at != removed_at_ne);
			if (removed_at_lt != null) predicate = predicate.And(_ => _.removed_at < removed_at_lt);
			if (removed_at_gt != null) predicate = predicate.And(_ => _.removed_at > removed_at_gt);
			if (removed_at_le != null) predicate = predicate.And(_ => _.removed_at <= removed_at_le);
			if (removed_at_ge != null) predicate = predicate.And(_ => _.removed_at >= removed_at_ge);
			if (removed_at_in != null) predicate = predicate.And(_ => removed_at_in.Contains(_.removed_at.Value));
			if (removed_at_ni != null) predicate = predicate.And(_ => !removed_at_ni.Contains(_.removed_at.Value));
			if (removed_at_isnull) predicate = predicate.And(_ => _.removed_at == null);
			if (removed_at_isnotnull) predicate = predicate.And(_ => _.removed_at != null);
			#endregion
			#region row_version
			if (row_version_eq != null) predicate = predicate.And(_ => _.row_version == row_version_eq);
			if (row_version_ne != null) predicate = predicate.And(_ => _.row_version != row_version_ne);
			if (row_version_isnull) predicate = predicate.And(_ => _.row_version == null);
			if (row_version_isnotnull) predicate = predicate.And(_ => _.row_version != null);
			#endregion

			return predicate;
		}
		#endregion
	}
	#endregion
	#endregion
	#region 勤務形態種別
	/// <summary>
	/// 勤務形態種別
	/// </summary>
	[Table(Schema="Master", Name="WorkStyleType"), DataContract]
	public partial class WorkStyleType : TableBase<WorkStyleType>, INotifyPropertyChanged
	{
		#region uid : int

		private int _uid;
		/// <summary>
		/// ユニークID
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull, Identity]
		public  int  uid
		{
			get { return _uid; }
			set
			{
				if (_uid != value)
				{
					BeforeuidChanged(value);
					_uid = value;
					AfteruidChanged();

					OnuidChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeuidChanged(int newValue);
		partial void AfteruidChanged();

		public const string NameOfuid = "uid";

		private static readonly PropertyChangedEventArgs _uidChangedEventArgs = new PropertyChangedEventArgs(NameOfuid);

		private void OnuidChanged()
		{
			OnPropertyChanged(_uidChangedEventArgs);
		}

		#endregion

		#endregion
		#region work_style_type_id : int

		private int _work_style_type_id;
		/// <summary>
		/// 勤務形態種別ID
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull, PrimaryKey(Order = 1), System.ComponentModel.DataAnnotations.Required]
		public  int  work_style_type_id
		{
			get { return _work_style_type_id; }
			set
			{
				if (_work_style_type_id != value)
				{
					Beforework_style_type_idChanged(value);
					_work_style_type_id = value;
					Afterwork_style_type_idChanged();

					Onwork_style_type_idChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforework_style_type_idChanged(int newValue);
		partial void Afterwork_style_type_idChanged();

		public const string NameOfwork_style_type_id = "work_style_type_id";

		private static readonly PropertyChangedEventArgs _work_style_type_idChangedEventArgs = new PropertyChangedEventArgs(NameOfwork_style_type_id);

		private void Onwork_style_type_idChanged()
		{
			OnPropertyChanged(_work_style_type_idChangedEventArgs);
		}

		#endregion

		#endregion
		#region name : string

		private string _name;
		/// <summary>
		/// 名称
		/// </summary>
		[Column(DbType="nvarchar(10)", DataType=DataType.NVarChar, Length=10), DataMember, NotNull, System.ComponentModel.DataAnnotations.Required]
		public  string  name
		{
			get { return _name; }
			set
			{
				if (_name != value)
				{
					BeforenameChanged(value);
					_name = value;
					AfternameChanged();

					OnnameChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforenameChanged(string newValue);
		partial void AfternameChanged();

		public const string NameOfname = "name";

		private static readonly PropertyChangedEventArgs _nameChangedEventArgs = new PropertyChangedEventArgs(NameOfname);

		private void OnnameChanged()
		{
			OnPropertyChanged(_nameChangedEventArgs);
		}

		#endregion

		#endregion
		#region description : string

		private string _description;
		/// <summary>
		/// 説明
		/// </summary>
		[Column(DbType="nvarchar(64)", DataType=DataType.NVarChar, Length=64), DataMember, NotNull]
		public  string  description
		{
			get { return _description; }
			set
			{
				if (_description != value)
				{
					BeforedescriptionChanged(value);
					_description = value;
					AfterdescriptionChanged();

					OndescriptionChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforedescriptionChanged(string newValue);
		partial void AfterdescriptionChanged();

		public const string NameOfdescription = "description";

		private static readonly PropertyChangedEventArgs _descriptionChangedEventArgs = new PropertyChangedEventArgs(NameOfdescription);

		private void OndescriptionChanged()
		{
			OnPropertyChanged(_descriptionChangedEventArgs);
		}

		#endregion

		#endregion
		#region display_order : int

		private int _display_order;
		/// <summary>
		/// 表示順
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull, System.ComponentModel.DataAnnotations.Required]
		public  int  display_order
		{
			get { return _display_order; }
			set
			{
				if (_display_order != value)
				{
					Beforedisplay_orderChanged(value);
					_display_order = value;
					Afterdisplay_orderChanged();

					Ondisplay_orderChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforedisplay_orderChanged(int newValue);
		partial void Afterdisplay_orderChanged();

		public const string NameOfdisplay_order = "display_order";

		private static readonly PropertyChangedEventArgs _display_orderChangedEventArgs = new PropertyChangedEventArgs(NameOfdisplay_order);

		private void Ondisplay_orderChanged()
		{
			OnPropertyChanged(_display_orderChangedEventArgs);
		}

		#endregion

		#endregion
		#region created_at : DateTime

		private DateTime _created_at;
		/// <summary>
		/// 作成日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, NotNull]
		public  DateTime  created_at
		{
			get { return _created_at; }
			set
			{
				if (_created_at != value)
				{
					Beforecreated_atChanged(value);
					_created_at = value;
					Aftercreated_atChanged();

					Oncreated_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecreated_atChanged(DateTime newValue);
		partial void Aftercreated_atChanged();

		public const string NameOfcreated_at = "created_at";

		private static readonly PropertyChangedEventArgs _created_atChangedEventArgs = new PropertyChangedEventArgs(NameOfcreated_at);

		private void Oncreated_atChanged()
		{
			OnPropertyChanged(_created_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region created_by : int?

		private int? _created_by;
		/// <summary>
		/// 作成者
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, Nullable]
		public  int?  created_by
		{
			get { return _created_by; }
			set
			{
				if (_created_by != value)
				{
					Beforecreated_byChanged(value);
					_created_by = value;
					Aftercreated_byChanged();

					Oncreated_byChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecreated_byChanged(int? newValue);
		partial void Aftercreated_byChanged();

		public const string NameOfcreated_by = "created_by";

		private static readonly PropertyChangedEventArgs _created_byChangedEventArgs = new PropertyChangedEventArgs(NameOfcreated_by);

		private void Oncreated_byChanged()
		{
			OnPropertyChanged(_created_byChangedEventArgs);
		}

		#endregion

		#endregion
		#region modified_at : DateTime

		private DateTime _modified_at;
		/// <summary>
		/// 更新日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, NotNull]
		public  DateTime  modified_at
		{
			get { return _modified_at; }
			set
			{
				if (_modified_at != value)
				{
					Beforemodified_atChanged(value);
					_modified_at = value;
					Aftermodified_atChanged();

					Onmodified_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforemodified_atChanged(DateTime newValue);
		partial void Aftermodified_atChanged();

		public const string NameOfmodified_at = "modified_at";

		private static readonly PropertyChangedEventArgs _modified_atChangedEventArgs = new PropertyChangedEventArgs(NameOfmodified_at);

		private void Onmodified_atChanged()
		{
			OnPropertyChanged(_modified_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region modified_by : int?

		private int? _modified_by;
		/// <summary>
		/// 更新者
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, Nullable]
		public  int?  modified_by
		{
			get { return _modified_by; }
			set
			{
				if (_modified_by != value)
				{
					Beforemodified_byChanged(value);
					_modified_by = value;
					Aftermodified_byChanged();

					Onmodified_byChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforemodified_byChanged(int? newValue);
		partial void Aftermodified_byChanged();

		public const string NameOfmodified_by = "modified_by";

		private static readonly PropertyChangedEventArgs _modified_byChangedEventArgs = new PropertyChangedEventArgs(NameOfmodified_by);

		private void Onmodified_byChanged()
		{
			OnPropertyChanged(_modified_byChangedEventArgs);
		}

		#endregion

		#endregion
		#region removed_at : DateTime?

		private DateTime? _removed_at;
		/// <summary>
		/// 削除日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, Nullable]
		public  DateTime?  removed_at
		{
			get { return _removed_at; }
			set
			{
				if (_removed_at != value)
				{
					Beforeremoved_atChanged(value);
					_removed_at = value;
					Afterremoved_atChanged();

					Onremoved_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeremoved_atChanged(DateTime? newValue);
		partial void Afterremoved_atChanged();

		public const string NameOfremoved_at = "removed_at";

		private static readonly PropertyChangedEventArgs _removed_atChangedEventArgs = new PropertyChangedEventArgs(NameOfremoved_at);

		private void Onremoved_atChanged()
		{
			OnPropertyChanged(_removed_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region row_version : byte[]

		private byte[] _row_version;
		/// <summary>
		/// 版
		/// </summary>
		[Column(DbType="timestamp", DataType=DataType.Timestamp, SkipOnInsert=true, SkipOnUpdate=true), DataMember, Nullable]
		public  byte[]  row_version
		{
			get { return _row_version; }
			set
			{
				if (_row_version != value)
				{
					Beforerow_versionChanged(value);
					_row_version = value;
					Afterrow_versionChanged();

					Onrow_versionChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforerow_versionChanged(byte[] newValue);
		partial void Afterrow_versionChanged();

		public const string NameOfrow_version = "row_version";

		private static readonly PropertyChangedEventArgs _row_versionChangedEventArgs = new PropertyChangedEventArgs(NameOfrow_version);

		private void Onrow_versionChanged()
		{
			OnPropertyChanged(_row_versionChangedEventArgs);
		}

		#endregion

		#endregion

		#region enum用アクセスラッパー
		#endregion

		#region Constructor

		public WorkStyleType()
		{
			#region フィールド初期化
			uid = default(int);
			work_style_type_id = 0;
			name = "";
			description = "";
			display_order = 0;
			created_at = DateTime.UtcNow;
			created_by = null;
			modified_at = DateTime.UtcNow;
			modified_by = null;
			removed_at = null;
			row_version = default(byte[]);
			#endregion
		}

		#endregion

		#region Association


		#endregion

		#region INotifyPropertyChanged support

		[field : NonSerialized]
		public virtual event PropertyChangedEventHandler PropertyChanged;

		protected void OnPropertyChanged(string propertyName)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		protected void OnPropertyChanged(PropertyChangedEventArgs arg)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, arg);
			}
		}

		#endregion

	}
	#region 勤務形態種別条件
	/// <summary>
	/// 勤務形態種別条件
	/// </summary>
	[DataContract]
	public partial class WorkStyleTypeCondition : WorkStyleTypeConditionBase
	{
	}

	/// <summary>
	/// 勤務形態種別条件ベース
	/// </summary>
	[DataContract]
	public class WorkStyleTypeConditionBase : ConditionBase<WorkStyleType>
	{
		#region properties
		#region uid
		/// <summary>
		/// uid_eqと等しい
		/// </summary>
		[DataMember] public int? uid_eq { get; set; }
		/// <summary>
		/// uid_neと等しくない
		/// </summary>
		[DataMember] public int? uid_ne { get; set; }
		/// <summary>
		/// uid_ltより小さい
		/// </summary>
		[DataMember] public int? uid_lt { get; set; }
		/// <summary>
		/// uid_gtより大きい
		/// </summary>
		[DataMember] public int? uid_gt { get; set; }
		/// <summary>
		/// uid_le以下
		/// </summary>
		[DataMember] public int? uid_le { get; set; }
		/// <summary>
		/// uid_ge以上
		/// </summary>
		[DataMember] public int? uid_ge { get; set; }
		/// <summary>
		/// uid_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> uid_in { get; set; }
		/// <summary>
		/// uid_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> uid_ni { get; set; }
		/// <summary>
		/// uid_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? uid_between { get; set; }
		#endregion
		#region work_style_type_id
		/// <summary>
		/// work_style_type_id_eqと等しい
		/// </summary>
		[DataMember] public int? work_style_type_id_eq { get; set; }
		/// <summary>
		/// work_style_type_id_neと等しくない
		/// </summary>
		[DataMember] public int? work_style_type_id_ne { get; set; }
		/// <summary>
		/// work_style_type_id_ltより小さい
		/// </summary>
		[DataMember] public int? work_style_type_id_lt { get; set; }
		/// <summary>
		/// work_style_type_id_gtより大きい
		/// </summary>
		[DataMember] public int? work_style_type_id_gt { get; set; }
		/// <summary>
		/// work_style_type_id_le以下
		/// </summary>
		[DataMember] public int? work_style_type_id_le { get; set; }
		/// <summary>
		/// work_style_type_id_ge以上
		/// </summary>
		[DataMember] public int? work_style_type_id_ge { get; set; }
		/// <summary>
		/// work_style_type_id_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> work_style_type_id_in { get; set; }
		/// <summary>
		/// work_style_type_id_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> work_style_type_id_ni { get; set; }
		/// <summary>
		/// work_style_type_id_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? work_style_type_id_between { get; set; }
		#endregion
		#region name
		/// <summary>
		/// name_eqと等しい
		/// </summary>
		[DataMember] public string name_eq { get; set; }
		/// <summary>
		/// name_neと等しくない
		/// </summary>
		[DataMember] public string name_ne { get; set; }
		/// <summary>
		/// name_ltより小さい
		/// </summary>
		[DataMember] public string name_lt { get; set; }
		/// <summary>
		/// name_gtより大きい
		/// </summary>
		[DataMember] public string name_gt { get; set; }
		/// <summary>
		/// name_le以下
		/// </summary>
		[DataMember] public string name_le { get; set; }
		/// <summary>
		/// name_ge以上
		/// </summary>
		[DataMember] public string name_ge { get; set; }
		/// <summary>
		/// name_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> name_in { get; set; }
		/// <summary>
		/// name_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> name_ni { get; set; }
		/// <summary>
		/// name_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? name_between { get; set; }
		/// <summary>
		/// name_likeと部分一致する
		/// </summary>
		[DataMember] public string name_like { get; set; }
		#endregion
		#region description
		/// <summary>
		/// description_eqと等しい
		/// </summary>
		[DataMember] public string description_eq { get; set; }
		/// <summary>
		/// description_neと等しくない
		/// </summary>
		[DataMember] public string description_ne { get; set; }
		/// <summary>
		/// description_ltより小さい
		/// </summary>
		[DataMember] public string description_lt { get; set; }
		/// <summary>
		/// description_gtより大きい
		/// </summary>
		[DataMember] public string description_gt { get; set; }
		/// <summary>
		/// description_le以下
		/// </summary>
		[DataMember] public string description_le { get; set; }
		/// <summary>
		/// description_ge以上
		/// </summary>
		[DataMember] public string description_ge { get; set; }
		/// <summary>
		/// description_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> description_in { get; set; }
		/// <summary>
		/// description_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> description_ni { get; set; }
		/// <summary>
		/// description_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? description_between { get; set; }
		/// <summary>
		/// description_likeと部分一致する
		/// </summary>
		[DataMember] public string description_like { get; set; }
		#endregion
		#region display_order
		/// <summary>
		/// display_order_eqと等しい
		/// </summary>
		[DataMember] public int? display_order_eq { get; set; }
		/// <summary>
		/// display_order_neと等しくない
		/// </summary>
		[DataMember] public int? display_order_ne { get; set; }
		/// <summary>
		/// display_order_ltより小さい
		/// </summary>
		[DataMember] public int? display_order_lt { get; set; }
		/// <summary>
		/// display_order_gtより大きい
		/// </summary>
		[DataMember] public int? display_order_gt { get; set; }
		/// <summary>
		/// display_order_le以下
		/// </summary>
		[DataMember] public int? display_order_le { get; set; }
		/// <summary>
		/// display_order_ge以上
		/// </summary>
		[DataMember] public int? display_order_ge { get; set; }
		/// <summary>
		/// display_order_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> display_order_in { get; set; }
		/// <summary>
		/// display_order_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> display_order_ni { get; set; }
		/// <summary>
		/// display_order_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? display_order_between { get; set; }
		#endregion
		#region created_at
		/// <summary>
		/// created_at_eqと等しい
		/// </summary>
		[DataMember] public DateTime? created_at_eq { get; set; }
		/// <summary>
		/// created_at_neと等しくない
		/// </summary>
		[DataMember] public DateTime? created_at_ne { get; set; }
		/// <summary>
		/// created_at_ltより小さい
		/// </summary>
		[DataMember] public DateTime? created_at_lt { get; set; }
		/// <summary>
		/// created_at_gtより大きい
		/// </summary>
		[DataMember] public DateTime? created_at_gt { get; set; }
		/// <summary>
		/// created_at_le以下
		/// </summary>
		[DataMember] public DateTime? created_at_le { get; set; }
		/// <summary>
		/// created_at_ge以上
		/// </summary>
		[DataMember] public DateTime? created_at_ge { get; set; }
		/// <summary>
		/// created_at_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> created_at_in { get; set; }
		/// <summary>
		/// created_at_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> created_at_ni { get; set; }
		/// <summary>
		/// created_at_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? created_at_between { get; set; }
		#endregion
		#region created_by
		/// <summary>
		/// created_by_eqと等しい
		/// </summary>
		[DataMember] public int? created_by_eq { get; set; }
		/// <summary>
		/// created_by_neと等しくない
		/// </summary>
		[DataMember] public int? created_by_ne { get; set; }
		/// <summary>
		/// created_by_ltより小さい
		/// </summary>
		[DataMember] public int? created_by_lt { get; set; }
		/// <summary>
		/// created_by_gtより大きい
		/// </summary>
		[DataMember] public int? created_by_gt { get; set; }
		/// <summary>
		/// created_by_le以下
		/// </summary>
		[DataMember] public int? created_by_le { get; set; }
		/// <summary>
		/// created_by_ge以上
		/// </summary>
		[DataMember] public int? created_by_ge { get; set; }
		/// <summary>
		/// created_by_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> created_by_in { get; set; }
		/// <summary>
		/// created_by_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> created_by_ni { get; set; }
		/// <summary>
		/// created_by_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? created_by_between { get; set; }
		/// <summary>
		/// created_byがNULLか
		/// </summary>
		[DataMember] public bool created_by_isnull { get; set; } =  false ;
		/// <summary>
		/// created_byがNULLではないか
		/// </summary>
		[DataMember] public bool created_by_isnotnull { get; set; } = false;
		#endregion
		#region modified_at
		/// <summary>
		/// modified_at_eqと等しい
		/// </summary>
		[DataMember] public DateTime? modified_at_eq { get; set; }
		/// <summary>
		/// modified_at_neと等しくない
		/// </summary>
		[DataMember] public DateTime? modified_at_ne { get; set; }
		/// <summary>
		/// modified_at_ltより小さい
		/// </summary>
		[DataMember] public DateTime? modified_at_lt { get; set; }
		/// <summary>
		/// modified_at_gtより大きい
		/// </summary>
		[DataMember] public DateTime? modified_at_gt { get; set; }
		/// <summary>
		/// modified_at_le以下
		/// </summary>
		[DataMember] public DateTime? modified_at_le { get; set; }
		/// <summary>
		/// modified_at_ge以上
		/// </summary>
		[DataMember] public DateTime? modified_at_ge { get; set; }
		/// <summary>
		/// modified_at_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> modified_at_in { get; set; }
		/// <summary>
		/// modified_at_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> modified_at_ni { get; set; }
		/// <summary>
		/// modified_at_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? modified_at_between { get; set; }
		#endregion
		#region modified_by
		/// <summary>
		/// modified_by_eqと等しい
		/// </summary>
		[DataMember] public int? modified_by_eq { get; set; }
		/// <summary>
		/// modified_by_neと等しくない
		/// </summary>
		[DataMember] public int? modified_by_ne { get; set; }
		/// <summary>
		/// modified_by_ltより小さい
		/// </summary>
		[DataMember] public int? modified_by_lt { get; set; }
		/// <summary>
		/// modified_by_gtより大きい
		/// </summary>
		[DataMember] public int? modified_by_gt { get; set; }
		/// <summary>
		/// modified_by_le以下
		/// </summary>
		[DataMember] public int? modified_by_le { get; set; }
		/// <summary>
		/// modified_by_ge以上
		/// </summary>
		[DataMember] public int? modified_by_ge { get; set; }
		/// <summary>
		/// modified_by_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> modified_by_in { get; set; }
		/// <summary>
		/// modified_by_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> modified_by_ni { get; set; }
		/// <summary>
		/// modified_by_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? modified_by_between { get; set; }
		/// <summary>
		/// modified_byがNULLか
		/// </summary>
		[DataMember] public bool modified_by_isnull { get; set; } =  false ;
		/// <summary>
		/// modified_byがNULLではないか
		/// </summary>
		[DataMember] public bool modified_by_isnotnull { get; set; } = false;
		#endregion
		#region removed_at
		/// <summary>
		/// removed_at_eqと等しい
		/// </summary>
		[DataMember] public DateTime? removed_at_eq { get; set; }
		/// <summary>
		/// removed_at_neと等しくない
		/// </summary>
		[DataMember] public DateTime? removed_at_ne { get; set; }
		/// <summary>
		/// removed_at_ltより小さい
		/// </summary>
		[DataMember] public DateTime? removed_at_lt { get; set; }
		/// <summary>
		/// removed_at_gtより大きい
		/// </summary>
		[DataMember] public DateTime? removed_at_gt { get; set; }
		/// <summary>
		/// removed_at_le以下
		/// </summary>
		[DataMember] public DateTime? removed_at_le { get; set; }
		/// <summary>
		/// removed_at_ge以上
		/// </summary>
		[DataMember] public DateTime? removed_at_ge { get; set; }
		/// <summary>
		/// removed_at_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> removed_at_in { get; set; }
		/// <summary>
		/// removed_at_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> removed_at_ni { get; set; }
		/// <summary>
		/// removed_at_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? removed_at_between { get; set; }
		/// <summary>
		/// removed_atがNULLか
		/// </summary>
		[DataMember] public bool removed_at_isnull { get; set; } =  true ;
		/// <summary>
		/// removed_atがNULLではないか
		/// </summary>
		[DataMember] public bool removed_at_isnotnull { get; set; } = false;
		#endregion
		#region row_version
		/// <summary>
		/// row_version_eqと等しい
		/// </summary>
		[DataMember] public byte[] row_version_eq { get; set; }
		/// <summary>
		/// row_version_neと等しくない
		/// </summary>
		[DataMember] public byte[] row_version_ne { get; set; }
		/// <summary>
		/// row_versionがNULLか
		/// </summary>
		[DataMember] public bool row_version_isnull { get; set; } =  false ;
		/// <summary>
		/// row_versionがNULLではないか
		/// </summary>
		[DataMember] public bool row_version_isnotnull { get; set; } = false;
		#endregion
		#endregion

		#region override
		override public Expression<Func<WorkStyleType, bool>> CreatePredicate()
		{
			var predicate = base.CreatePredicate();

			#region uid
			if (uid_eq != null) predicate = predicate.And(_ => _.uid == uid_eq);
			if (uid_ne != null) predicate = predicate.And(_ => _.uid != uid_ne);
			if (uid_lt != null) predicate = predicate.And(_ => _.uid < uid_lt);
			if (uid_gt != null) predicate = predicate.And(_ => _.uid > uid_gt);
			if (uid_le != null) predicate = predicate.And(_ => _.uid <= uid_le);
			if (uid_ge != null) predicate = predicate.And(_ => _.uid >= uid_ge);
			if (uid_in != null) predicate = predicate.And(_ => uid_in.Contains(_.uid));
			if (uid_ni != null) predicate = predicate.And(_ => !uid_ni.Contains(_.uid));
			#endregion
			#region work_style_type_id
			if (work_style_type_id_eq != null) predicate = predicate.And(_ => _.work_style_type_id == work_style_type_id_eq);
			if (work_style_type_id_ne != null) predicate = predicate.And(_ => _.work_style_type_id != work_style_type_id_ne);
			if (work_style_type_id_lt != null) predicate = predicate.And(_ => _.work_style_type_id < work_style_type_id_lt);
			if (work_style_type_id_gt != null) predicate = predicate.And(_ => _.work_style_type_id > work_style_type_id_gt);
			if (work_style_type_id_le != null) predicate = predicate.And(_ => _.work_style_type_id <= work_style_type_id_le);
			if (work_style_type_id_ge != null) predicate = predicate.And(_ => _.work_style_type_id >= work_style_type_id_ge);
			if (work_style_type_id_in != null) predicate = predicate.And(_ => work_style_type_id_in.Contains(_.work_style_type_id));
			if (work_style_type_id_ni != null) predicate = predicate.And(_ => !work_style_type_id_ni.Contains(_.work_style_type_id));
			#endregion
			#region name
			if (name_eq != null) predicate = predicate.And(_ => _.name == name_eq);
			if (name_ne != null) predicate = predicate.And(_ => _.name != name_ne);
			if (name_lt != null) predicate = predicate.And(_ => name_lt.CompareTo(_.name) > 0);
			if (name_gt != null) predicate = predicate.And(_ => name_gt.CompareTo(_.name) < 0);
			if (name_le != null) predicate = predicate.And(_ => name_le.CompareTo(_.name) >= 0);
			if (name_ge != null) predicate = predicate.And(_ => name_ge.CompareTo(_.name) <= 0);
			if (name_in != null) predicate = predicate.And(_ => name_in.Contains(_.name));
			if (name_ni != null) predicate = predicate.And(_ => !name_ni.Contains(_.name));
			#endregion
			#region description
			if (description_eq != null) predicate = predicate.And(_ => _.description == description_eq);
			if (description_ne != null) predicate = predicate.And(_ => _.description != description_ne);
			if (description_lt != null) predicate = predicate.And(_ => description_lt.CompareTo(_.description) > 0);
			if (description_gt != null) predicate = predicate.And(_ => description_gt.CompareTo(_.description) < 0);
			if (description_le != null) predicate = predicate.And(_ => description_le.CompareTo(_.description) >= 0);
			if (description_ge != null) predicate = predicate.And(_ => description_ge.CompareTo(_.description) <= 0);
			if (description_in != null) predicate = predicate.And(_ => description_in.Contains(_.description));
			if (description_ni != null) predicate = predicate.And(_ => !description_ni.Contains(_.description));
			#endregion
			#region display_order
			if (display_order_eq != null) predicate = predicate.And(_ => _.display_order == display_order_eq);
			if (display_order_ne != null) predicate = predicate.And(_ => _.display_order != display_order_ne);
			if (display_order_lt != null) predicate = predicate.And(_ => _.display_order < display_order_lt);
			if (display_order_gt != null) predicate = predicate.And(_ => _.display_order > display_order_gt);
			if (display_order_le != null) predicate = predicate.And(_ => _.display_order <= display_order_le);
			if (display_order_ge != null) predicate = predicate.And(_ => _.display_order >= display_order_ge);
			if (display_order_in != null) predicate = predicate.And(_ => display_order_in.Contains(_.display_order));
			if (display_order_ni != null) predicate = predicate.And(_ => !display_order_ni.Contains(_.display_order));
			#endregion
			#region created_at
			if (created_at_eq != null) predicate = predicate.And(_ => _.created_at == created_at_eq);
			if (created_at_ne != null) predicate = predicate.And(_ => _.created_at != created_at_ne);
			if (created_at_lt != null) predicate = predicate.And(_ => _.created_at < created_at_lt);
			if (created_at_gt != null) predicate = predicate.And(_ => _.created_at > created_at_gt);
			if (created_at_le != null) predicate = predicate.And(_ => _.created_at <= created_at_le);
			if (created_at_ge != null) predicate = predicate.And(_ => _.created_at >= created_at_ge);
			if (created_at_in != null) predicate = predicate.And(_ => created_at_in.Contains(_.created_at));
			if (created_at_ni != null) predicate = predicate.And(_ => !created_at_ni.Contains(_.created_at));
			#endregion
			#region created_by
			if (created_by_eq != null) predicate = predicate.And(_ => _.created_by == created_by_eq);
			if (created_by_ne != null) predicate = predicate.And(_ => _.created_by != created_by_ne);
			if (created_by_lt != null) predicate = predicate.And(_ => _.created_by < created_by_lt);
			if (created_by_gt != null) predicate = predicate.And(_ => _.created_by > created_by_gt);
			if (created_by_le != null) predicate = predicate.And(_ => _.created_by <= created_by_le);
			if (created_by_ge != null) predicate = predicate.And(_ => _.created_by >= created_by_ge);
			if (created_by_in != null) predicate = predicate.And(_ => created_by_in.Contains(_.created_by.Value));
			if (created_by_ni != null) predicate = predicate.And(_ => !created_by_ni.Contains(_.created_by.Value));
			if (created_by_isnull) predicate = predicate.And(_ => _.created_by == null);
			if (created_by_isnotnull) predicate = predicate.And(_ => _.created_by != null);
			#endregion
			#region modified_at
			if (modified_at_eq != null) predicate = predicate.And(_ => _.modified_at == modified_at_eq);
			if (modified_at_ne != null) predicate = predicate.And(_ => _.modified_at != modified_at_ne);
			if (modified_at_lt != null) predicate = predicate.And(_ => _.modified_at < modified_at_lt);
			if (modified_at_gt != null) predicate = predicate.And(_ => _.modified_at > modified_at_gt);
			if (modified_at_le != null) predicate = predicate.And(_ => _.modified_at <= modified_at_le);
			if (modified_at_ge != null) predicate = predicate.And(_ => _.modified_at >= modified_at_ge);
			if (modified_at_in != null) predicate = predicate.And(_ => modified_at_in.Contains(_.modified_at));
			if (modified_at_ni != null) predicate = predicate.And(_ => !modified_at_ni.Contains(_.modified_at));
			#endregion
			#region modified_by
			if (modified_by_eq != null) predicate = predicate.And(_ => _.modified_by == modified_by_eq);
			if (modified_by_ne != null) predicate = predicate.And(_ => _.modified_by != modified_by_ne);
			if (modified_by_lt != null) predicate = predicate.And(_ => _.modified_by < modified_by_lt);
			if (modified_by_gt != null) predicate = predicate.And(_ => _.modified_by > modified_by_gt);
			if (modified_by_le != null) predicate = predicate.And(_ => _.modified_by <= modified_by_le);
			if (modified_by_ge != null) predicate = predicate.And(_ => _.modified_by >= modified_by_ge);
			if (modified_by_in != null) predicate = predicate.And(_ => modified_by_in.Contains(_.modified_by.Value));
			if (modified_by_ni != null) predicate = predicate.And(_ => !modified_by_ni.Contains(_.modified_by.Value));
			if (modified_by_isnull) predicate = predicate.And(_ => _.modified_by == null);
			if (modified_by_isnotnull) predicate = predicate.And(_ => _.modified_by != null);
			#endregion
			#region removed_at
			if (removed_at_eq != null) predicate = predicate.And(_ => _.removed_at == removed_at_eq);
			if (removed_at_ne != null) predicate = predicate.And(_ => _.removed_at != removed_at_ne);
			if (removed_at_lt != null) predicate = predicate.And(_ => _.removed_at < removed_at_lt);
			if (removed_at_gt != null) predicate = predicate.And(_ => _.removed_at > removed_at_gt);
			if (removed_at_le != null) predicate = predicate.And(_ => _.removed_at <= removed_at_le);
			if (removed_at_ge != null) predicate = predicate.And(_ => _.removed_at >= removed_at_ge);
			if (removed_at_in != null) predicate = predicate.And(_ => removed_at_in.Contains(_.removed_at.Value));
			if (removed_at_ni != null) predicate = predicate.And(_ => !removed_at_ni.Contains(_.removed_at.Value));
			if (removed_at_isnull) predicate = predicate.And(_ => _.removed_at == null);
			if (removed_at_isnotnull) predicate = predicate.And(_ => _.removed_at != null);
			#endregion
			#region row_version
			if (row_version_eq != null) predicate = predicate.And(_ => _.row_version == row_version_eq);
			if (row_version_ne != null) predicate = predicate.And(_ => _.row_version != row_version_ne);
			if (row_version_isnull) predicate = predicate.And(_ => _.row_version == null);
			if (row_version_isnotnull) predicate = predicate.And(_ => _.row_version != null);
			#endregion

			return predicate;
		}
		#endregion
	}
	#endregion
	#endregion
	#region 職階種別
	/// <summary>
	/// 職階種別
	/// </summary>
	[Table(Schema="Master", Name="PositionType"), DataContract]
	public partial class PositionType : TableBase<PositionType>, INotifyPropertyChanged
	{
		#region uid : int

		private int _uid;
		/// <summary>
		/// ユニークID
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull, Identity]
		public  int  uid
		{
			get { return _uid; }
			set
			{
				if (_uid != value)
				{
					BeforeuidChanged(value);
					_uid = value;
					AfteruidChanged();

					OnuidChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeuidChanged(int newValue);
		partial void AfteruidChanged();

		public const string NameOfuid = "uid";

		private static readonly PropertyChangedEventArgs _uidChangedEventArgs = new PropertyChangedEventArgs(NameOfuid);

		private void OnuidChanged()
		{
			OnPropertyChanged(_uidChangedEventArgs);
		}

		#endregion

		#endregion
		#region position_type_id : int

		private int _position_type_id;
		/// <summary>
		/// 職階ID
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull, PrimaryKey(Order = 1), System.ComponentModel.DataAnnotations.Required]
		public  int  position_type_id
		{
			get { return _position_type_id; }
			set
			{
				if (_position_type_id != value)
				{
					Beforeposition_type_idChanged(value);
					_position_type_id = value;
					Afterposition_type_idChanged();

					Onposition_type_idChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeposition_type_idChanged(int newValue);
		partial void Afterposition_type_idChanged();

		public const string NameOfposition_type_id = "position_type_id";

		private static readonly PropertyChangedEventArgs _position_type_idChangedEventArgs = new PropertyChangedEventArgs(NameOfposition_type_id);

		private void Onposition_type_idChanged()
		{
			OnPropertyChanged(_position_type_idChangedEventArgs);
		}

		#endregion

		#endregion
		#region name : string

		private string _name;
		/// <summary>
		/// 名称
		/// </summary>
		[Column(DbType="nvarchar(10)", DataType=DataType.NVarChar, Length=10), DataMember, NotNull, System.ComponentModel.DataAnnotations.Required]
		public  string  name
		{
			get { return _name; }
			set
			{
				if (_name != value)
				{
					BeforenameChanged(value);
					_name = value;
					AfternameChanged();

					OnnameChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforenameChanged(string newValue);
		partial void AfternameChanged();

		public const string NameOfname = "name";

		private static readonly PropertyChangedEventArgs _nameChangedEventArgs = new PropertyChangedEventArgs(NameOfname);

		private void OnnameChanged()
		{
			OnPropertyChanged(_nameChangedEventArgs);
		}

		#endregion

		#endregion
		#region description : string

		private string _description;
		/// <summary>
		/// 説明
		/// </summary>
		[Column(DbType="nvarchar(64)", DataType=DataType.NVarChar, Length=64), DataMember, NotNull]
		public  string  description
		{
			get { return _description; }
			set
			{
				if (_description != value)
				{
					BeforedescriptionChanged(value);
					_description = value;
					AfterdescriptionChanged();

					OndescriptionChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforedescriptionChanged(string newValue);
		partial void AfterdescriptionChanged();

		public const string NameOfdescription = "description";

		private static readonly PropertyChangedEventArgs _descriptionChangedEventArgs = new PropertyChangedEventArgs(NameOfdescription);

		private void OndescriptionChanged()
		{
			OnPropertyChanged(_descriptionChangedEventArgs);
		}

		#endregion

		#endregion
		#region display_order : int

		private int _display_order;
		/// <summary>
		/// 表示順
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull, System.ComponentModel.DataAnnotations.Required]
		public  int  display_order
		{
			get { return _display_order; }
			set
			{
				if (_display_order != value)
				{
					Beforedisplay_orderChanged(value);
					_display_order = value;
					Afterdisplay_orderChanged();

					Ondisplay_orderChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforedisplay_orderChanged(int newValue);
		partial void Afterdisplay_orderChanged();

		public const string NameOfdisplay_order = "display_order";

		private static readonly PropertyChangedEventArgs _display_orderChangedEventArgs = new PropertyChangedEventArgs(NameOfdisplay_order);

		private void Ondisplay_orderChanged()
		{
			OnPropertyChanged(_display_orderChangedEventArgs);
		}

		#endregion

		#endregion
		#region created_at : DateTime

		private DateTime _created_at;
		/// <summary>
		/// 作成日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, NotNull]
		public  DateTime  created_at
		{
			get { return _created_at; }
			set
			{
				if (_created_at != value)
				{
					Beforecreated_atChanged(value);
					_created_at = value;
					Aftercreated_atChanged();

					Oncreated_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecreated_atChanged(DateTime newValue);
		partial void Aftercreated_atChanged();

		public const string NameOfcreated_at = "created_at";

		private static readonly PropertyChangedEventArgs _created_atChangedEventArgs = new PropertyChangedEventArgs(NameOfcreated_at);

		private void Oncreated_atChanged()
		{
			OnPropertyChanged(_created_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region created_by : int?

		private int? _created_by;
		/// <summary>
		/// 作成者
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, Nullable]
		public  int?  created_by
		{
			get { return _created_by; }
			set
			{
				if (_created_by != value)
				{
					Beforecreated_byChanged(value);
					_created_by = value;
					Aftercreated_byChanged();

					Oncreated_byChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecreated_byChanged(int? newValue);
		partial void Aftercreated_byChanged();

		public const string NameOfcreated_by = "created_by";

		private static readonly PropertyChangedEventArgs _created_byChangedEventArgs = new PropertyChangedEventArgs(NameOfcreated_by);

		private void Oncreated_byChanged()
		{
			OnPropertyChanged(_created_byChangedEventArgs);
		}

		#endregion

		#endregion
		#region modified_at : DateTime

		private DateTime _modified_at;
		/// <summary>
		/// 更新日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, NotNull]
		public  DateTime  modified_at
		{
			get { return _modified_at; }
			set
			{
				if (_modified_at != value)
				{
					Beforemodified_atChanged(value);
					_modified_at = value;
					Aftermodified_atChanged();

					Onmodified_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforemodified_atChanged(DateTime newValue);
		partial void Aftermodified_atChanged();

		public const string NameOfmodified_at = "modified_at";

		private static readonly PropertyChangedEventArgs _modified_atChangedEventArgs = new PropertyChangedEventArgs(NameOfmodified_at);

		private void Onmodified_atChanged()
		{
			OnPropertyChanged(_modified_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region modified_by : int?

		private int? _modified_by;
		/// <summary>
		/// 更新者
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, Nullable]
		public  int?  modified_by
		{
			get { return _modified_by; }
			set
			{
				if (_modified_by != value)
				{
					Beforemodified_byChanged(value);
					_modified_by = value;
					Aftermodified_byChanged();

					Onmodified_byChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforemodified_byChanged(int? newValue);
		partial void Aftermodified_byChanged();

		public const string NameOfmodified_by = "modified_by";

		private static readonly PropertyChangedEventArgs _modified_byChangedEventArgs = new PropertyChangedEventArgs(NameOfmodified_by);

		private void Onmodified_byChanged()
		{
			OnPropertyChanged(_modified_byChangedEventArgs);
		}

		#endregion

		#endregion
		#region removed_at : DateTime?

		private DateTime? _removed_at;
		/// <summary>
		/// 削除日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, Nullable]
		public  DateTime?  removed_at
		{
			get { return _removed_at; }
			set
			{
				if (_removed_at != value)
				{
					Beforeremoved_atChanged(value);
					_removed_at = value;
					Afterremoved_atChanged();

					Onremoved_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeremoved_atChanged(DateTime? newValue);
		partial void Afterremoved_atChanged();

		public const string NameOfremoved_at = "removed_at";

		private static readonly PropertyChangedEventArgs _removed_atChangedEventArgs = new PropertyChangedEventArgs(NameOfremoved_at);

		private void Onremoved_atChanged()
		{
			OnPropertyChanged(_removed_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region row_version : byte[]

		private byte[] _row_version;
		/// <summary>
		/// 版
		/// </summary>
		[Column(DbType="timestamp", DataType=DataType.Timestamp, SkipOnInsert=true, SkipOnUpdate=true), DataMember, Nullable]
		public  byte[]  row_version
		{
			get { return _row_version; }
			set
			{
				if (_row_version != value)
				{
					Beforerow_versionChanged(value);
					_row_version = value;
					Afterrow_versionChanged();

					Onrow_versionChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforerow_versionChanged(byte[] newValue);
		partial void Afterrow_versionChanged();

		public const string NameOfrow_version = "row_version";

		private static readonly PropertyChangedEventArgs _row_versionChangedEventArgs = new PropertyChangedEventArgs(NameOfrow_version);

		private void Onrow_versionChanged()
		{
			OnPropertyChanged(_row_versionChangedEventArgs);
		}

		#endregion

		#endregion

		#region enum用アクセスラッパー
		#endregion

		#region Constructor

		public PositionType()
		{
			#region フィールド初期化
			uid = default(int);
			position_type_id = 0;
			name = "";
			description = "";
			display_order = 0;
			created_at = DateTime.UtcNow;
			created_by = null;
			modified_at = DateTime.UtcNow;
			modified_by = null;
			removed_at = null;
			row_version = default(byte[]);
			#endregion
		}

		#endregion

		#region Association


		#endregion

		#region INotifyPropertyChanged support

		[field : NonSerialized]
		public virtual event PropertyChangedEventHandler PropertyChanged;

		protected void OnPropertyChanged(string propertyName)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		protected void OnPropertyChanged(PropertyChangedEventArgs arg)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, arg);
			}
		}

		#endregion

	}
	#region 職階種別条件
	/// <summary>
	/// 職階種別条件
	/// </summary>
	[DataContract]
	public partial class PositionTypeCondition : PositionTypeConditionBase
	{
	}

	/// <summary>
	/// 職階種別条件ベース
	/// </summary>
	[DataContract]
	public class PositionTypeConditionBase : ConditionBase<PositionType>
	{
		#region properties
		#region uid
		/// <summary>
		/// uid_eqと等しい
		/// </summary>
		[DataMember] public int? uid_eq { get; set; }
		/// <summary>
		/// uid_neと等しくない
		/// </summary>
		[DataMember] public int? uid_ne { get; set; }
		/// <summary>
		/// uid_ltより小さい
		/// </summary>
		[DataMember] public int? uid_lt { get; set; }
		/// <summary>
		/// uid_gtより大きい
		/// </summary>
		[DataMember] public int? uid_gt { get; set; }
		/// <summary>
		/// uid_le以下
		/// </summary>
		[DataMember] public int? uid_le { get; set; }
		/// <summary>
		/// uid_ge以上
		/// </summary>
		[DataMember] public int? uid_ge { get; set; }
		/// <summary>
		/// uid_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> uid_in { get; set; }
		/// <summary>
		/// uid_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> uid_ni { get; set; }
		/// <summary>
		/// uid_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? uid_between { get; set; }
		#endregion
		#region position_type_id
		/// <summary>
		/// position_type_id_eqと等しい
		/// </summary>
		[DataMember] public int? position_type_id_eq { get; set; }
		/// <summary>
		/// position_type_id_neと等しくない
		/// </summary>
		[DataMember] public int? position_type_id_ne { get; set; }
		/// <summary>
		/// position_type_id_ltより小さい
		/// </summary>
		[DataMember] public int? position_type_id_lt { get; set; }
		/// <summary>
		/// position_type_id_gtより大きい
		/// </summary>
		[DataMember] public int? position_type_id_gt { get; set; }
		/// <summary>
		/// position_type_id_le以下
		/// </summary>
		[DataMember] public int? position_type_id_le { get; set; }
		/// <summary>
		/// position_type_id_ge以上
		/// </summary>
		[DataMember] public int? position_type_id_ge { get; set; }
		/// <summary>
		/// position_type_id_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> position_type_id_in { get; set; }
		/// <summary>
		/// position_type_id_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> position_type_id_ni { get; set; }
		/// <summary>
		/// position_type_id_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? position_type_id_between { get; set; }
		#endregion
		#region name
		/// <summary>
		/// name_eqと等しい
		/// </summary>
		[DataMember] public string name_eq { get; set; }
		/// <summary>
		/// name_neと等しくない
		/// </summary>
		[DataMember] public string name_ne { get; set; }
		/// <summary>
		/// name_ltより小さい
		/// </summary>
		[DataMember] public string name_lt { get; set; }
		/// <summary>
		/// name_gtより大きい
		/// </summary>
		[DataMember] public string name_gt { get; set; }
		/// <summary>
		/// name_le以下
		/// </summary>
		[DataMember] public string name_le { get; set; }
		/// <summary>
		/// name_ge以上
		/// </summary>
		[DataMember] public string name_ge { get; set; }
		/// <summary>
		/// name_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> name_in { get; set; }
		/// <summary>
		/// name_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> name_ni { get; set; }
		/// <summary>
		/// name_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? name_between { get; set; }
		/// <summary>
		/// name_likeと部分一致する
		/// </summary>
		[DataMember] public string name_like { get; set; }
		#endregion
		#region description
		/// <summary>
		/// description_eqと等しい
		/// </summary>
		[DataMember] public string description_eq { get; set; }
		/// <summary>
		/// description_neと等しくない
		/// </summary>
		[DataMember] public string description_ne { get; set; }
		/// <summary>
		/// description_ltより小さい
		/// </summary>
		[DataMember] public string description_lt { get; set; }
		/// <summary>
		/// description_gtより大きい
		/// </summary>
		[DataMember] public string description_gt { get; set; }
		/// <summary>
		/// description_le以下
		/// </summary>
		[DataMember] public string description_le { get; set; }
		/// <summary>
		/// description_ge以上
		/// </summary>
		[DataMember] public string description_ge { get; set; }
		/// <summary>
		/// description_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> description_in { get; set; }
		/// <summary>
		/// description_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> description_ni { get; set; }
		/// <summary>
		/// description_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? description_between { get; set; }
		/// <summary>
		/// description_likeと部分一致する
		/// </summary>
		[DataMember] public string description_like { get; set; }
		#endregion
		#region display_order
		/// <summary>
		/// display_order_eqと等しい
		/// </summary>
		[DataMember] public int? display_order_eq { get; set; }
		/// <summary>
		/// display_order_neと等しくない
		/// </summary>
		[DataMember] public int? display_order_ne { get; set; }
		/// <summary>
		/// display_order_ltより小さい
		/// </summary>
		[DataMember] public int? display_order_lt { get; set; }
		/// <summary>
		/// display_order_gtより大きい
		/// </summary>
		[DataMember] public int? display_order_gt { get; set; }
		/// <summary>
		/// display_order_le以下
		/// </summary>
		[DataMember] public int? display_order_le { get; set; }
		/// <summary>
		/// display_order_ge以上
		/// </summary>
		[DataMember] public int? display_order_ge { get; set; }
		/// <summary>
		/// display_order_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> display_order_in { get; set; }
		/// <summary>
		/// display_order_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> display_order_ni { get; set; }
		/// <summary>
		/// display_order_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? display_order_between { get; set; }
		#endregion
		#region created_at
		/// <summary>
		/// created_at_eqと等しい
		/// </summary>
		[DataMember] public DateTime? created_at_eq { get; set; }
		/// <summary>
		/// created_at_neと等しくない
		/// </summary>
		[DataMember] public DateTime? created_at_ne { get; set; }
		/// <summary>
		/// created_at_ltより小さい
		/// </summary>
		[DataMember] public DateTime? created_at_lt { get; set; }
		/// <summary>
		/// created_at_gtより大きい
		/// </summary>
		[DataMember] public DateTime? created_at_gt { get; set; }
		/// <summary>
		/// created_at_le以下
		/// </summary>
		[DataMember] public DateTime? created_at_le { get; set; }
		/// <summary>
		/// created_at_ge以上
		/// </summary>
		[DataMember] public DateTime? created_at_ge { get; set; }
		/// <summary>
		/// created_at_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> created_at_in { get; set; }
		/// <summary>
		/// created_at_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> created_at_ni { get; set; }
		/// <summary>
		/// created_at_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? created_at_between { get; set; }
		#endregion
		#region created_by
		/// <summary>
		/// created_by_eqと等しい
		/// </summary>
		[DataMember] public int? created_by_eq { get; set; }
		/// <summary>
		/// created_by_neと等しくない
		/// </summary>
		[DataMember] public int? created_by_ne { get; set; }
		/// <summary>
		/// created_by_ltより小さい
		/// </summary>
		[DataMember] public int? created_by_lt { get; set; }
		/// <summary>
		/// created_by_gtより大きい
		/// </summary>
		[DataMember] public int? created_by_gt { get; set; }
		/// <summary>
		/// created_by_le以下
		/// </summary>
		[DataMember] public int? created_by_le { get; set; }
		/// <summary>
		/// created_by_ge以上
		/// </summary>
		[DataMember] public int? created_by_ge { get; set; }
		/// <summary>
		/// created_by_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> created_by_in { get; set; }
		/// <summary>
		/// created_by_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> created_by_ni { get; set; }
		/// <summary>
		/// created_by_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? created_by_between { get; set; }
		/// <summary>
		/// created_byがNULLか
		/// </summary>
		[DataMember] public bool created_by_isnull { get; set; } =  false ;
		/// <summary>
		/// created_byがNULLではないか
		/// </summary>
		[DataMember] public bool created_by_isnotnull { get; set; } = false;
		#endregion
		#region modified_at
		/// <summary>
		/// modified_at_eqと等しい
		/// </summary>
		[DataMember] public DateTime? modified_at_eq { get; set; }
		/// <summary>
		/// modified_at_neと等しくない
		/// </summary>
		[DataMember] public DateTime? modified_at_ne { get; set; }
		/// <summary>
		/// modified_at_ltより小さい
		/// </summary>
		[DataMember] public DateTime? modified_at_lt { get; set; }
		/// <summary>
		/// modified_at_gtより大きい
		/// </summary>
		[DataMember] public DateTime? modified_at_gt { get; set; }
		/// <summary>
		/// modified_at_le以下
		/// </summary>
		[DataMember] public DateTime? modified_at_le { get; set; }
		/// <summary>
		/// modified_at_ge以上
		/// </summary>
		[DataMember] public DateTime? modified_at_ge { get; set; }
		/// <summary>
		/// modified_at_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> modified_at_in { get; set; }
		/// <summary>
		/// modified_at_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> modified_at_ni { get; set; }
		/// <summary>
		/// modified_at_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? modified_at_between { get; set; }
		#endregion
		#region modified_by
		/// <summary>
		/// modified_by_eqと等しい
		/// </summary>
		[DataMember] public int? modified_by_eq { get; set; }
		/// <summary>
		/// modified_by_neと等しくない
		/// </summary>
		[DataMember] public int? modified_by_ne { get; set; }
		/// <summary>
		/// modified_by_ltより小さい
		/// </summary>
		[DataMember] public int? modified_by_lt { get; set; }
		/// <summary>
		/// modified_by_gtより大きい
		/// </summary>
		[DataMember] public int? modified_by_gt { get; set; }
		/// <summary>
		/// modified_by_le以下
		/// </summary>
		[DataMember] public int? modified_by_le { get; set; }
		/// <summary>
		/// modified_by_ge以上
		/// </summary>
		[DataMember] public int? modified_by_ge { get; set; }
		/// <summary>
		/// modified_by_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> modified_by_in { get; set; }
		/// <summary>
		/// modified_by_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> modified_by_ni { get; set; }
		/// <summary>
		/// modified_by_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? modified_by_between { get; set; }
		/// <summary>
		/// modified_byがNULLか
		/// </summary>
		[DataMember] public bool modified_by_isnull { get; set; } =  false ;
		/// <summary>
		/// modified_byがNULLではないか
		/// </summary>
		[DataMember] public bool modified_by_isnotnull { get; set; } = false;
		#endregion
		#region removed_at
		/// <summary>
		/// removed_at_eqと等しい
		/// </summary>
		[DataMember] public DateTime? removed_at_eq { get; set; }
		/// <summary>
		/// removed_at_neと等しくない
		/// </summary>
		[DataMember] public DateTime? removed_at_ne { get; set; }
		/// <summary>
		/// removed_at_ltより小さい
		/// </summary>
		[DataMember] public DateTime? removed_at_lt { get; set; }
		/// <summary>
		/// removed_at_gtより大きい
		/// </summary>
		[DataMember] public DateTime? removed_at_gt { get; set; }
		/// <summary>
		/// removed_at_le以下
		/// </summary>
		[DataMember] public DateTime? removed_at_le { get; set; }
		/// <summary>
		/// removed_at_ge以上
		/// </summary>
		[DataMember] public DateTime? removed_at_ge { get; set; }
		/// <summary>
		/// removed_at_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> removed_at_in { get; set; }
		/// <summary>
		/// removed_at_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> removed_at_ni { get; set; }
		/// <summary>
		/// removed_at_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? removed_at_between { get; set; }
		/// <summary>
		/// removed_atがNULLか
		/// </summary>
		[DataMember] public bool removed_at_isnull { get; set; } =  true ;
		/// <summary>
		/// removed_atがNULLではないか
		/// </summary>
		[DataMember] public bool removed_at_isnotnull { get; set; } = false;
		#endregion
		#region row_version
		/// <summary>
		/// row_version_eqと等しい
		/// </summary>
		[DataMember] public byte[] row_version_eq { get; set; }
		/// <summary>
		/// row_version_neと等しくない
		/// </summary>
		[DataMember] public byte[] row_version_ne { get; set; }
		/// <summary>
		/// row_versionがNULLか
		/// </summary>
		[DataMember] public bool row_version_isnull { get; set; } =  false ;
		/// <summary>
		/// row_versionがNULLではないか
		/// </summary>
		[DataMember] public bool row_version_isnotnull { get; set; } = false;
		#endregion
		#endregion

		#region override
		override public Expression<Func<PositionType, bool>> CreatePredicate()
		{
			var predicate = base.CreatePredicate();

			#region uid
			if (uid_eq != null) predicate = predicate.And(_ => _.uid == uid_eq);
			if (uid_ne != null) predicate = predicate.And(_ => _.uid != uid_ne);
			if (uid_lt != null) predicate = predicate.And(_ => _.uid < uid_lt);
			if (uid_gt != null) predicate = predicate.And(_ => _.uid > uid_gt);
			if (uid_le != null) predicate = predicate.And(_ => _.uid <= uid_le);
			if (uid_ge != null) predicate = predicate.And(_ => _.uid >= uid_ge);
			if (uid_in != null) predicate = predicate.And(_ => uid_in.Contains(_.uid));
			if (uid_ni != null) predicate = predicate.And(_ => !uid_ni.Contains(_.uid));
			#endregion
			#region position_type_id
			if (position_type_id_eq != null) predicate = predicate.And(_ => _.position_type_id == position_type_id_eq);
			if (position_type_id_ne != null) predicate = predicate.And(_ => _.position_type_id != position_type_id_ne);
			if (position_type_id_lt != null) predicate = predicate.And(_ => _.position_type_id < position_type_id_lt);
			if (position_type_id_gt != null) predicate = predicate.And(_ => _.position_type_id > position_type_id_gt);
			if (position_type_id_le != null) predicate = predicate.And(_ => _.position_type_id <= position_type_id_le);
			if (position_type_id_ge != null) predicate = predicate.And(_ => _.position_type_id >= position_type_id_ge);
			if (position_type_id_in != null) predicate = predicate.And(_ => position_type_id_in.Contains(_.position_type_id));
			if (position_type_id_ni != null) predicate = predicate.And(_ => !position_type_id_ni.Contains(_.position_type_id));
			#endregion
			#region name
			if (name_eq != null) predicate = predicate.And(_ => _.name == name_eq);
			if (name_ne != null) predicate = predicate.And(_ => _.name != name_ne);
			if (name_lt != null) predicate = predicate.And(_ => name_lt.CompareTo(_.name) > 0);
			if (name_gt != null) predicate = predicate.And(_ => name_gt.CompareTo(_.name) < 0);
			if (name_le != null) predicate = predicate.And(_ => name_le.CompareTo(_.name) >= 0);
			if (name_ge != null) predicate = predicate.And(_ => name_ge.CompareTo(_.name) <= 0);
			if (name_in != null) predicate = predicate.And(_ => name_in.Contains(_.name));
			if (name_ni != null) predicate = predicate.And(_ => !name_ni.Contains(_.name));
			#endregion
			#region description
			if (description_eq != null) predicate = predicate.And(_ => _.description == description_eq);
			if (description_ne != null) predicate = predicate.And(_ => _.description != description_ne);
			if (description_lt != null) predicate = predicate.And(_ => description_lt.CompareTo(_.description) > 0);
			if (description_gt != null) predicate = predicate.And(_ => description_gt.CompareTo(_.description) < 0);
			if (description_le != null) predicate = predicate.And(_ => description_le.CompareTo(_.description) >= 0);
			if (description_ge != null) predicate = predicate.And(_ => description_ge.CompareTo(_.description) <= 0);
			if (description_in != null) predicate = predicate.And(_ => description_in.Contains(_.description));
			if (description_ni != null) predicate = predicate.And(_ => !description_ni.Contains(_.description));
			#endregion
			#region display_order
			if (display_order_eq != null) predicate = predicate.And(_ => _.display_order == display_order_eq);
			if (display_order_ne != null) predicate = predicate.And(_ => _.display_order != display_order_ne);
			if (display_order_lt != null) predicate = predicate.And(_ => _.display_order < display_order_lt);
			if (display_order_gt != null) predicate = predicate.And(_ => _.display_order > display_order_gt);
			if (display_order_le != null) predicate = predicate.And(_ => _.display_order <= display_order_le);
			if (display_order_ge != null) predicate = predicate.And(_ => _.display_order >= display_order_ge);
			if (display_order_in != null) predicate = predicate.And(_ => display_order_in.Contains(_.display_order));
			if (display_order_ni != null) predicate = predicate.And(_ => !display_order_ni.Contains(_.display_order));
			#endregion
			#region created_at
			if (created_at_eq != null) predicate = predicate.And(_ => _.created_at == created_at_eq);
			if (created_at_ne != null) predicate = predicate.And(_ => _.created_at != created_at_ne);
			if (created_at_lt != null) predicate = predicate.And(_ => _.created_at < created_at_lt);
			if (created_at_gt != null) predicate = predicate.And(_ => _.created_at > created_at_gt);
			if (created_at_le != null) predicate = predicate.And(_ => _.created_at <= created_at_le);
			if (created_at_ge != null) predicate = predicate.And(_ => _.created_at >= created_at_ge);
			if (created_at_in != null) predicate = predicate.And(_ => created_at_in.Contains(_.created_at));
			if (created_at_ni != null) predicate = predicate.And(_ => !created_at_ni.Contains(_.created_at));
			#endregion
			#region created_by
			if (created_by_eq != null) predicate = predicate.And(_ => _.created_by == created_by_eq);
			if (created_by_ne != null) predicate = predicate.And(_ => _.created_by != created_by_ne);
			if (created_by_lt != null) predicate = predicate.And(_ => _.created_by < created_by_lt);
			if (created_by_gt != null) predicate = predicate.And(_ => _.created_by > created_by_gt);
			if (created_by_le != null) predicate = predicate.And(_ => _.created_by <= created_by_le);
			if (created_by_ge != null) predicate = predicate.And(_ => _.created_by >= created_by_ge);
			if (created_by_in != null) predicate = predicate.And(_ => created_by_in.Contains(_.created_by.Value));
			if (created_by_ni != null) predicate = predicate.And(_ => !created_by_ni.Contains(_.created_by.Value));
			if (created_by_isnull) predicate = predicate.And(_ => _.created_by == null);
			if (created_by_isnotnull) predicate = predicate.And(_ => _.created_by != null);
			#endregion
			#region modified_at
			if (modified_at_eq != null) predicate = predicate.And(_ => _.modified_at == modified_at_eq);
			if (modified_at_ne != null) predicate = predicate.And(_ => _.modified_at != modified_at_ne);
			if (modified_at_lt != null) predicate = predicate.And(_ => _.modified_at < modified_at_lt);
			if (modified_at_gt != null) predicate = predicate.And(_ => _.modified_at > modified_at_gt);
			if (modified_at_le != null) predicate = predicate.And(_ => _.modified_at <= modified_at_le);
			if (modified_at_ge != null) predicate = predicate.And(_ => _.modified_at >= modified_at_ge);
			if (modified_at_in != null) predicate = predicate.And(_ => modified_at_in.Contains(_.modified_at));
			if (modified_at_ni != null) predicate = predicate.And(_ => !modified_at_ni.Contains(_.modified_at));
			#endregion
			#region modified_by
			if (modified_by_eq != null) predicate = predicate.And(_ => _.modified_by == modified_by_eq);
			if (modified_by_ne != null) predicate = predicate.And(_ => _.modified_by != modified_by_ne);
			if (modified_by_lt != null) predicate = predicate.And(_ => _.modified_by < modified_by_lt);
			if (modified_by_gt != null) predicate = predicate.And(_ => _.modified_by > modified_by_gt);
			if (modified_by_le != null) predicate = predicate.And(_ => _.modified_by <= modified_by_le);
			if (modified_by_ge != null) predicate = predicate.And(_ => _.modified_by >= modified_by_ge);
			if (modified_by_in != null) predicate = predicate.And(_ => modified_by_in.Contains(_.modified_by.Value));
			if (modified_by_ni != null) predicate = predicate.And(_ => !modified_by_ni.Contains(_.modified_by.Value));
			if (modified_by_isnull) predicate = predicate.And(_ => _.modified_by == null);
			if (modified_by_isnotnull) predicate = predicate.And(_ => _.modified_by != null);
			#endregion
			#region removed_at
			if (removed_at_eq != null) predicate = predicate.And(_ => _.removed_at == removed_at_eq);
			if (removed_at_ne != null) predicate = predicate.And(_ => _.removed_at != removed_at_ne);
			if (removed_at_lt != null) predicate = predicate.And(_ => _.removed_at < removed_at_lt);
			if (removed_at_gt != null) predicate = predicate.And(_ => _.removed_at > removed_at_gt);
			if (removed_at_le != null) predicate = predicate.And(_ => _.removed_at <= removed_at_le);
			if (removed_at_ge != null) predicate = predicate.And(_ => _.removed_at >= removed_at_ge);
			if (removed_at_in != null) predicate = predicate.And(_ => removed_at_in.Contains(_.removed_at.Value));
			if (removed_at_ni != null) predicate = predicate.And(_ => !removed_at_ni.Contains(_.removed_at.Value));
			if (removed_at_isnull) predicate = predicate.And(_ => _.removed_at == null);
			if (removed_at_isnotnull) predicate = predicate.And(_ => _.removed_at != null);
			#endregion
			#region row_version
			if (row_version_eq != null) predicate = predicate.And(_ => _.row_version == row_version_eq);
			if (row_version_ne != null) predicate = predicate.And(_ => _.row_version != row_version_ne);
			if (row_version_isnull) predicate = predicate.And(_ => _.row_version == null);
			if (row_version_isnotnull) predicate = predicate.And(_ => _.row_version != null);
			#endregion

			return predicate;
		}
		#endregion
	}
	#endregion
	#endregion
	#region 教員資格種別
	/// <summary>
	/// 教員資格種別
	/// </summary>
	[Table(Schema="Master", Name="TeacherLisenceType"), DataContract]
	public partial class TeacherLisenceType : TableBase<TeacherLisenceType>, INotifyPropertyChanged
	{
		#region uid : int

		private int _uid;
		/// <summary>
		/// ユニークID
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull, Identity]
		public  int  uid
		{
			get { return _uid; }
			set
			{
				if (_uid != value)
				{
					BeforeuidChanged(value);
					_uid = value;
					AfteruidChanged();

					OnuidChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeuidChanged(int newValue);
		partial void AfteruidChanged();

		public const string NameOfuid = "uid";

		private static readonly PropertyChangedEventArgs _uidChangedEventArgs = new PropertyChangedEventArgs(NameOfuid);

		private void OnuidChanged()
		{
			OnPropertyChanged(_uidChangedEventArgs);
		}

		#endregion

		#endregion
		#region teacher_lisence_type_id : int

		private int _teacher_lisence_type_id;
		/// <summary>
		/// 教員資格種別ID
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull, PrimaryKey(Order = 1), System.ComponentModel.DataAnnotations.Required]
		public  int  teacher_lisence_type_id
		{
			get { return _teacher_lisence_type_id; }
			set
			{
				if (_teacher_lisence_type_id != value)
				{
					Beforeteacher_lisence_type_idChanged(value);
					_teacher_lisence_type_id = value;
					Afterteacher_lisence_type_idChanged();

					Onteacher_lisence_type_idChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeteacher_lisence_type_idChanged(int newValue);
		partial void Afterteacher_lisence_type_idChanged();

		public const string NameOfteacher_lisence_type_id = "teacher_lisence_type_id";

		private static readonly PropertyChangedEventArgs _teacher_lisence_type_idChangedEventArgs = new PropertyChangedEventArgs(NameOfteacher_lisence_type_id);

		private void Onteacher_lisence_type_idChanged()
		{
			OnPropertyChanged(_teacher_lisence_type_idChangedEventArgs);
		}

		#endregion

		#endregion
		#region name : string

		private string _name;
		/// <summary>
		/// 名称
		/// </summary>
		[Column(DbType="nvarchar(10)", DataType=DataType.NVarChar, Length=10), DataMember, NotNull, System.ComponentModel.DataAnnotations.Required]
		public  string  name
		{
			get { return _name; }
			set
			{
				if (_name != value)
				{
					BeforenameChanged(value);
					_name = value;
					AfternameChanged();

					OnnameChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforenameChanged(string newValue);
		partial void AfternameChanged();

		public const string NameOfname = "name";

		private static readonly PropertyChangedEventArgs _nameChangedEventArgs = new PropertyChangedEventArgs(NameOfname);

		private void OnnameChanged()
		{
			OnPropertyChanged(_nameChangedEventArgs);
		}

		#endregion

		#endregion
		#region rank : int

		private int _rank;
		/// <summary>
		/// ランク
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull, System.ComponentModel.DataAnnotations.Required]
		public  int  rank
		{
			get { return _rank; }
			set
			{
				if (_rank != value)
				{
					BeforerankChanged(value);
					_rank = value;
					AfterrankChanged();

					OnrankChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforerankChanged(int newValue);
		partial void AfterrankChanged();

		public const string NameOfrank = "rank";

		private static readonly PropertyChangedEventArgs _rankChangedEventArgs = new PropertyChangedEventArgs(NameOfrank);

		private void OnrankChanged()
		{
			OnPropertyChanged(_rankChangedEventArgs);
		}

		#endregion

		#endregion
		#region description : string

		private string _description;
		/// <summary>
		/// 説明
		/// </summary>
		[Column(DbType="nvarchar(64)", DataType=DataType.NVarChar, Length=64), DataMember, NotNull]
		public  string  description
		{
			get { return _description; }
			set
			{
				if (_description != value)
				{
					BeforedescriptionChanged(value);
					_description = value;
					AfterdescriptionChanged();

					OndescriptionChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforedescriptionChanged(string newValue);
		partial void AfterdescriptionChanged();

		public const string NameOfdescription = "description";

		private static readonly PropertyChangedEventArgs _descriptionChangedEventArgs = new PropertyChangedEventArgs(NameOfdescription);

		private void OndescriptionChanged()
		{
			OnPropertyChanged(_descriptionChangedEventArgs);
		}

		#endregion

		#endregion
		#region display_order : int

		private int _display_order;
		/// <summary>
		/// 表示順
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull, System.ComponentModel.DataAnnotations.Required]
		public  int  display_order
		{
			get { return _display_order; }
			set
			{
				if (_display_order != value)
				{
					Beforedisplay_orderChanged(value);
					_display_order = value;
					Afterdisplay_orderChanged();

					Ondisplay_orderChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforedisplay_orderChanged(int newValue);
		partial void Afterdisplay_orderChanged();

		public const string NameOfdisplay_order = "display_order";

		private static readonly PropertyChangedEventArgs _display_orderChangedEventArgs = new PropertyChangedEventArgs(NameOfdisplay_order);

		private void Ondisplay_orderChanged()
		{
			OnPropertyChanged(_display_orderChangedEventArgs);
		}

		#endregion

		#endregion
		#region created_at : DateTime

		private DateTime _created_at;
		/// <summary>
		/// 作成日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, NotNull]
		public  DateTime  created_at
		{
			get { return _created_at; }
			set
			{
				if (_created_at != value)
				{
					Beforecreated_atChanged(value);
					_created_at = value;
					Aftercreated_atChanged();

					Oncreated_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecreated_atChanged(DateTime newValue);
		partial void Aftercreated_atChanged();

		public const string NameOfcreated_at = "created_at";

		private static readonly PropertyChangedEventArgs _created_atChangedEventArgs = new PropertyChangedEventArgs(NameOfcreated_at);

		private void Oncreated_atChanged()
		{
			OnPropertyChanged(_created_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region created_by : int?

		private int? _created_by;
		/// <summary>
		/// 作成者
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, Nullable]
		public  int?  created_by
		{
			get { return _created_by; }
			set
			{
				if (_created_by != value)
				{
					Beforecreated_byChanged(value);
					_created_by = value;
					Aftercreated_byChanged();

					Oncreated_byChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecreated_byChanged(int? newValue);
		partial void Aftercreated_byChanged();

		public const string NameOfcreated_by = "created_by";

		private static readonly PropertyChangedEventArgs _created_byChangedEventArgs = new PropertyChangedEventArgs(NameOfcreated_by);

		private void Oncreated_byChanged()
		{
			OnPropertyChanged(_created_byChangedEventArgs);
		}

		#endregion

		#endregion
		#region modified_at : DateTime

		private DateTime _modified_at;
		/// <summary>
		/// 更新日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, NotNull]
		public  DateTime  modified_at
		{
			get { return _modified_at; }
			set
			{
				if (_modified_at != value)
				{
					Beforemodified_atChanged(value);
					_modified_at = value;
					Aftermodified_atChanged();

					Onmodified_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforemodified_atChanged(DateTime newValue);
		partial void Aftermodified_atChanged();

		public const string NameOfmodified_at = "modified_at";

		private static readonly PropertyChangedEventArgs _modified_atChangedEventArgs = new PropertyChangedEventArgs(NameOfmodified_at);

		private void Onmodified_atChanged()
		{
			OnPropertyChanged(_modified_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region modified_by : int?

		private int? _modified_by;
		/// <summary>
		/// 更新者
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, Nullable]
		public  int?  modified_by
		{
			get { return _modified_by; }
			set
			{
				if (_modified_by != value)
				{
					Beforemodified_byChanged(value);
					_modified_by = value;
					Aftermodified_byChanged();

					Onmodified_byChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforemodified_byChanged(int? newValue);
		partial void Aftermodified_byChanged();

		public const string NameOfmodified_by = "modified_by";

		private static readonly PropertyChangedEventArgs _modified_byChangedEventArgs = new PropertyChangedEventArgs(NameOfmodified_by);

		private void Onmodified_byChanged()
		{
			OnPropertyChanged(_modified_byChangedEventArgs);
		}

		#endregion

		#endregion
		#region removed_at : DateTime?

		private DateTime? _removed_at;
		/// <summary>
		/// 削除日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, Nullable]
		public  DateTime?  removed_at
		{
			get { return _removed_at; }
			set
			{
				if (_removed_at != value)
				{
					Beforeremoved_atChanged(value);
					_removed_at = value;
					Afterremoved_atChanged();

					Onremoved_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeremoved_atChanged(DateTime? newValue);
		partial void Afterremoved_atChanged();

		public const string NameOfremoved_at = "removed_at";

		private static readonly PropertyChangedEventArgs _removed_atChangedEventArgs = new PropertyChangedEventArgs(NameOfremoved_at);

		private void Onremoved_atChanged()
		{
			OnPropertyChanged(_removed_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region row_version : byte[]

		private byte[] _row_version;
		/// <summary>
		/// 版
		/// </summary>
		[Column(DbType="timestamp", DataType=DataType.Timestamp, SkipOnInsert=true, SkipOnUpdate=true), DataMember, Nullable]
		public  byte[]  row_version
		{
			get { return _row_version; }
			set
			{
				if (_row_version != value)
				{
					Beforerow_versionChanged(value);
					_row_version = value;
					Afterrow_versionChanged();

					Onrow_versionChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforerow_versionChanged(byte[] newValue);
		partial void Afterrow_versionChanged();

		public const string NameOfrow_version = "row_version";

		private static readonly PropertyChangedEventArgs _row_versionChangedEventArgs = new PropertyChangedEventArgs(NameOfrow_version);

		private void Onrow_versionChanged()
		{
			OnPropertyChanged(_row_versionChangedEventArgs);
		}

		#endregion

		#endregion

		#region enum用アクセスラッパー
		#endregion

		#region Constructor

		public TeacherLisenceType()
		{
			#region フィールド初期化
			uid = default(int);
			teacher_lisence_type_id = 0;
			name = "";
			rank = 0;
			description = "";
			display_order = 0;
			created_at = DateTime.UtcNow;
			created_by = null;
			modified_at = DateTime.UtcNow;
			modified_by = null;
			removed_at = null;
			row_version = default(byte[]);
			#endregion
		}

		#endregion

		#region Association


		#endregion

		#region INotifyPropertyChanged support

		[field : NonSerialized]
		public virtual event PropertyChangedEventHandler PropertyChanged;

		protected void OnPropertyChanged(string propertyName)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		protected void OnPropertyChanged(PropertyChangedEventArgs arg)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, arg);
			}
		}

		#endregion

	}
	#region 教員資格種別条件
	/// <summary>
	/// 教員資格種別条件
	/// </summary>
	[DataContract]
	public partial class TeacherLisenceTypeCondition : TeacherLisenceTypeConditionBase
	{
	}

	/// <summary>
	/// 教員資格種別条件ベース
	/// </summary>
	[DataContract]
	public class TeacherLisenceTypeConditionBase : ConditionBase<TeacherLisenceType>
	{
		#region properties
		#region uid
		/// <summary>
		/// uid_eqと等しい
		/// </summary>
		[DataMember] public int? uid_eq { get; set; }
		/// <summary>
		/// uid_neと等しくない
		/// </summary>
		[DataMember] public int? uid_ne { get; set; }
		/// <summary>
		/// uid_ltより小さい
		/// </summary>
		[DataMember] public int? uid_lt { get; set; }
		/// <summary>
		/// uid_gtより大きい
		/// </summary>
		[DataMember] public int? uid_gt { get; set; }
		/// <summary>
		/// uid_le以下
		/// </summary>
		[DataMember] public int? uid_le { get; set; }
		/// <summary>
		/// uid_ge以上
		/// </summary>
		[DataMember] public int? uid_ge { get; set; }
		/// <summary>
		/// uid_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> uid_in { get; set; }
		/// <summary>
		/// uid_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> uid_ni { get; set; }
		/// <summary>
		/// uid_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? uid_between { get; set; }
		#endregion
		#region teacher_lisence_type_id
		/// <summary>
		/// teacher_lisence_type_id_eqと等しい
		/// </summary>
		[DataMember] public int? teacher_lisence_type_id_eq { get; set; }
		/// <summary>
		/// teacher_lisence_type_id_neと等しくない
		/// </summary>
		[DataMember] public int? teacher_lisence_type_id_ne { get; set; }
		/// <summary>
		/// teacher_lisence_type_id_ltより小さい
		/// </summary>
		[DataMember] public int? teacher_lisence_type_id_lt { get; set; }
		/// <summary>
		/// teacher_lisence_type_id_gtより大きい
		/// </summary>
		[DataMember] public int? teacher_lisence_type_id_gt { get; set; }
		/// <summary>
		/// teacher_lisence_type_id_le以下
		/// </summary>
		[DataMember] public int? teacher_lisence_type_id_le { get; set; }
		/// <summary>
		/// teacher_lisence_type_id_ge以上
		/// </summary>
		[DataMember] public int? teacher_lisence_type_id_ge { get; set; }
		/// <summary>
		/// teacher_lisence_type_id_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> teacher_lisence_type_id_in { get; set; }
		/// <summary>
		/// teacher_lisence_type_id_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> teacher_lisence_type_id_ni { get; set; }
		/// <summary>
		/// teacher_lisence_type_id_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? teacher_lisence_type_id_between { get; set; }
		#endregion
		#region name
		/// <summary>
		/// name_eqと等しい
		/// </summary>
		[DataMember] public string name_eq { get; set; }
		/// <summary>
		/// name_neと等しくない
		/// </summary>
		[DataMember] public string name_ne { get; set; }
		/// <summary>
		/// name_ltより小さい
		/// </summary>
		[DataMember] public string name_lt { get; set; }
		/// <summary>
		/// name_gtより大きい
		/// </summary>
		[DataMember] public string name_gt { get; set; }
		/// <summary>
		/// name_le以下
		/// </summary>
		[DataMember] public string name_le { get; set; }
		/// <summary>
		/// name_ge以上
		/// </summary>
		[DataMember] public string name_ge { get; set; }
		/// <summary>
		/// name_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> name_in { get; set; }
		/// <summary>
		/// name_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> name_ni { get; set; }
		/// <summary>
		/// name_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? name_between { get; set; }
		/// <summary>
		/// name_likeと部分一致する
		/// </summary>
		[DataMember] public string name_like { get; set; }
		#endregion
		#region rank
		/// <summary>
		/// rank_eqと等しい
		/// </summary>
		[DataMember] public int? rank_eq { get; set; }
		/// <summary>
		/// rank_neと等しくない
		/// </summary>
		[DataMember] public int? rank_ne { get; set; }
		/// <summary>
		/// rank_ltより小さい
		/// </summary>
		[DataMember] public int? rank_lt { get; set; }
		/// <summary>
		/// rank_gtより大きい
		/// </summary>
		[DataMember] public int? rank_gt { get; set; }
		/// <summary>
		/// rank_le以下
		/// </summary>
		[DataMember] public int? rank_le { get; set; }
		/// <summary>
		/// rank_ge以上
		/// </summary>
		[DataMember] public int? rank_ge { get; set; }
		/// <summary>
		/// rank_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> rank_in { get; set; }
		/// <summary>
		/// rank_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> rank_ni { get; set; }
		/// <summary>
		/// rank_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? rank_between { get; set; }
		#endregion
		#region description
		/// <summary>
		/// description_eqと等しい
		/// </summary>
		[DataMember] public string description_eq { get; set; }
		/// <summary>
		/// description_neと等しくない
		/// </summary>
		[DataMember] public string description_ne { get; set; }
		/// <summary>
		/// description_ltより小さい
		/// </summary>
		[DataMember] public string description_lt { get; set; }
		/// <summary>
		/// description_gtより大きい
		/// </summary>
		[DataMember] public string description_gt { get; set; }
		/// <summary>
		/// description_le以下
		/// </summary>
		[DataMember] public string description_le { get; set; }
		/// <summary>
		/// description_ge以上
		/// </summary>
		[DataMember] public string description_ge { get; set; }
		/// <summary>
		/// description_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> description_in { get; set; }
		/// <summary>
		/// description_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> description_ni { get; set; }
		/// <summary>
		/// description_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? description_between { get; set; }
		/// <summary>
		/// description_likeと部分一致する
		/// </summary>
		[DataMember] public string description_like { get; set; }
		#endregion
		#region display_order
		/// <summary>
		/// display_order_eqと等しい
		/// </summary>
		[DataMember] public int? display_order_eq { get; set; }
		/// <summary>
		/// display_order_neと等しくない
		/// </summary>
		[DataMember] public int? display_order_ne { get; set; }
		/// <summary>
		/// display_order_ltより小さい
		/// </summary>
		[DataMember] public int? display_order_lt { get; set; }
		/// <summary>
		/// display_order_gtより大きい
		/// </summary>
		[DataMember] public int? display_order_gt { get; set; }
		/// <summary>
		/// display_order_le以下
		/// </summary>
		[DataMember] public int? display_order_le { get; set; }
		/// <summary>
		/// display_order_ge以上
		/// </summary>
		[DataMember] public int? display_order_ge { get; set; }
		/// <summary>
		/// display_order_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> display_order_in { get; set; }
		/// <summary>
		/// display_order_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> display_order_ni { get; set; }
		/// <summary>
		/// display_order_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? display_order_between { get; set; }
		#endregion
		#region created_at
		/// <summary>
		/// created_at_eqと等しい
		/// </summary>
		[DataMember] public DateTime? created_at_eq { get; set; }
		/// <summary>
		/// created_at_neと等しくない
		/// </summary>
		[DataMember] public DateTime? created_at_ne { get; set; }
		/// <summary>
		/// created_at_ltより小さい
		/// </summary>
		[DataMember] public DateTime? created_at_lt { get; set; }
		/// <summary>
		/// created_at_gtより大きい
		/// </summary>
		[DataMember] public DateTime? created_at_gt { get; set; }
		/// <summary>
		/// created_at_le以下
		/// </summary>
		[DataMember] public DateTime? created_at_le { get; set; }
		/// <summary>
		/// created_at_ge以上
		/// </summary>
		[DataMember] public DateTime? created_at_ge { get; set; }
		/// <summary>
		/// created_at_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> created_at_in { get; set; }
		/// <summary>
		/// created_at_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> created_at_ni { get; set; }
		/// <summary>
		/// created_at_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? created_at_between { get; set; }
		#endregion
		#region created_by
		/// <summary>
		/// created_by_eqと等しい
		/// </summary>
		[DataMember] public int? created_by_eq { get; set; }
		/// <summary>
		/// created_by_neと等しくない
		/// </summary>
		[DataMember] public int? created_by_ne { get; set; }
		/// <summary>
		/// created_by_ltより小さい
		/// </summary>
		[DataMember] public int? created_by_lt { get; set; }
		/// <summary>
		/// created_by_gtより大きい
		/// </summary>
		[DataMember] public int? created_by_gt { get; set; }
		/// <summary>
		/// created_by_le以下
		/// </summary>
		[DataMember] public int? created_by_le { get; set; }
		/// <summary>
		/// created_by_ge以上
		/// </summary>
		[DataMember] public int? created_by_ge { get; set; }
		/// <summary>
		/// created_by_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> created_by_in { get; set; }
		/// <summary>
		/// created_by_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> created_by_ni { get; set; }
		/// <summary>
		/// created_by_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? created_by_between { get; set; }
		/// <summary>
		/// created_byがNULLか
		/// </summary>
		[DataMember] public bool created_by_isnull { get; set; } =  false ;
		/// <summary>
		/// created_byがNULLではないか
		/// </summary>
		[DataMember] public bool created_by_isnotnull { get; set; } = false;
		#endregion
		#region modified_at
		/// <summary>
		/// modified_at_eqと等しい
		/// </summary>
		[DataMember] public DateTime? modified_at_eq { get; set; }
		/// <summary>
		/// modified_at_neと等しくない
		/// </summary>
		[DataMember] public DateTime? modified_at_ne { get; set; }
		/// <summary>
		/// modified_at_ltより小さい
		/// </summary>
		[DataMember] public DateTime? modified_at_lt { get; set; }
		/// <summary>
		/// modified_at_gtより大きい
		/// </summary>
		[DataMember] public DateTime? modified_at_gt { get; set; }
		/// <summary>
		/// modified_at_le以下
		/// </summary>
		[DataMember] public DateTime? modified_at_le { get; set; }
		/// <summary>
		/// modified_at_ge以上
		/// </summary>
		[DataMember] public DateTime? modified_at_ge { get; set; }
		/// <summary>
		/// modified_at_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> modified_at_in { get; set; }
		/// <summary>
		/// modified_at_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> modified_at_ni { get; set; }
		/// <summary>
		/// modified_at_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? modified_at_between { get; set; }
		#endregion
		#region modified_by
		/// <summary>
		/// modified_by_eqと等しい
		/// </summary>
		[DataMember] public int? modified_by_eq { get; set; }
		/// <summary>
		/// modified_by_neと等しくない
		/// </summary>
		[DataMember] public int? modified_by_ne { get; set; }
		/// <summary>
		/// modified_by_ltより小さい
		/// </summary>
		[DataMember] public int? modified_by_lt { get; set; }
		/// <summary>
		/// modified_by_gtより大きい
		/// </summary>
		[DataMember] public int? modified_by_gt { get; set; }
		/// <summary>
		/// modified_by_le以下
		/// </summary>
		[DataMember] public int? modified_by_le { get; set; }
		/// <summary>
		/// modified_by_ge以上
		/// </summary>
		[DataMember] public int? modified_by_ge { get; set; }
		/// <summary>
		/// modified_by_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> modified_by_in { get; set; }
		/// <summary>
		/// modified_by_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> modified_by_ni { get; set; }
		/// <summary>
		/// modified_by_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? modified_by_between { get; set; }
		/// <summary>
		/// modified_byがNULLか
		/// </summary>
		[DataMember] public bool modified_by_isnull { get; set; } =  false ;
		/// <summary>
		/// modified_byがNULLではないか
		/// </summary>
		[DataMember] public bool modified_by_isnotnull { get; set; } = false;
		#endregion
		#region removed_at
		/// <summary>
		/// removed_at_eqと等しい
		/// </summary>
		[DataMember] public DateTime? removed_at_eq { get; set; }
		/// <summary>
		/// removed_at_neと等しくない
		/// </summary>
		[DataMember] public DateTime? removed_at_ne { get; set; }
		/// <summary>
		/// removed_at_ltより小さい
		/// </summary>
		[DataMember] public DateTime? removed_at_lt { get; set; }
		/// <summary>
		/// removed_at_gtより大きい
		/// </summary>
		[DataMember] public DateTime? removed_at_gt { get; set; }
		/// <summary>
		/// removed_at_le以下
		/// </summary>
		[DataMember] public DateTime? removed_at_le { get; set; }
		/// <summary>
		/// removed_at_ge以上
		/// </summary>
		[DataMember] public DateTime? removed_at_ge { get; set; }
		/// <summary>
		/// removed_at_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> removed_at_in { get; set; }
		/// <summary>
		/// removed_at_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> removed_at_ni { get; set; }
		/// <summary>
		/// removed_at_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? removed_at_between { get; set; }
		/// <summary>
		/// removed_atがNULLか
		/// </summary>
		[DataMember] public bool removed_at_isnull { get; set; } =  true ;
		/// <summary>
		/// removed_atがNULLではないか
		/// </summary>
		[DataMember] public bool removed_at_isnotnull { get; set; } = false;
		#endregion
		#region row_version
		/// <summary>
		/// row_version_eqと等しい
		/// </summary>
		[DataMember] public byte[] row_version_eq { get; set; }
		/// <summary>
		/// row_version_neと等しくない
		/// </summary>
		[DataMember] public byte[] row_version_ne { get; set; }
		/// <summary>
		/// row_versionがNULLか
		/// </summary>
		[DataMember] public bool row_version_isnull { get; set; } =  false ;
		/// <summary>
		/// row_versionがNULLではないか
		/// </summary>
		[DataMember] public bool row_version_isnotnull { get; set; } = false;
		#endregion
		#endregion

		#region override
		override public Expression<Func<TeacherLisenceType, bool>> CreatePredicate()
		{
			var predicate = base.CreatePredicate();

			#region uid
			if (uid_eq != null) predicate = predicate.And(_ => _.uid == uid_eq);
			if (uid_ne != null) predicate = predicate.And(_ => _.uid != uid_ne);
			if (uid_lt != null) predicate = predicate.And(_ => _.uid < uid_lt);
			if (uid_gt != null) predicate = predicate.And(_ => _.uid > uid_gt);
			if (uid_le != null) predicate = predicate.And(_ => _.uid <= uid_le);
			if (uid_ge != null) predicate = predicate.And(_ => _.uid >= uid_ge);
			if (uid_in != null) predicate = predicate.And(_ => uid_in.Contains(_.uid));
			if (uid_ni != null) predicate = predicate.And(_ => !uid_ni.Contains(_.uid));
			#endregion
			#region teacher_lisence_type_id
			if (teacher_lisence_type_id_eq != null) predicate = predicate.And(_ => _.teacher_lisence_type_id == teacher_lisence_type_id_eq);
			if (teacher_lisence_type_id_ne != null) predicate = predicate.And(_ => _.teacher_lisence_type_id != teacher_lisence_type_id_ne);
			if (teacher_lisence_type_id_lt != null) predicate = predicate.And(_ => _.teacher_lisence_type_id < teacher_lisence_type_id_lt);
			if (teacher_lisence_type_id_gt != null) predicate = predicate.And(_ => _.teacher_lisence_type_id > teacher_lisence_type_id_gt);
			if (teacher_lisence_type_id_le != null) predicate = predicate.And(_ => _.teacher_lisence_type_id <= teacher_lisence_type_id_le);
			if (teacher_lisence_type_id_ge != null) predicate = predicate.And(_ => _.teacher_lisence_type_id >= teacher_lisence_type_id_ge);
			if (teacher_lisence_type_id_in != null) predicate = predicate.And(_ => teacher_lisence_type_id_in.Contains(_.teacher_lisence_type_id));
			if (teacher_lisence_type_id_ni != null) predicate = predicate.And(_ => !teacher_lisence_type_id_ni.Contains(_.teacher_lisence_type_id));
			#endregion
			#region name
			if (name_eq != null) predicate = predicate.And(_ => _.name == name_eq);
			if (name_ne != null) predicate = predicate.And(_ => _.name != name_ne);
			if (name_lt != null) predicate = predicate.And(_ => name_lt.CompareTo(_.name) > 0);
			if (name_gt != null) predicate = predicate.And(_ => name_gt.CompareTo(_.name) < 0);
			if (name_le != null) predicate = predicate.And(_ => name_le.CompareTo(_.name) >= 0);
			if (name_ge != null) predicate = predicate.And(_ => name_ge.CompareTo(_.name) <= 0);
			if (name_in != null) predicate = predicate.And(_ => name_in.Contains(_.name));
			if (name_ni != null) predicate = predicate.And(_ => !name_ni.Contains(_.name));
			#endregion
			#region rank
			if (rank_eq != null) predicate = predicate.And(_ => _.rank == rank_eq);
			if (rank_ne != null) predicate = predicate.And(_ => _.rank != rank_ne);
			if (rank_lt != null) predicate = predicate.And(_ => _.rank < rank_lt);
			if (rank_gt != null) predicate = predicate.And(_ => _.rank > rank_gt);
			if (rank_le != null) predicate = predicate.And(_ => _.rank <= rank_le);
			if (rank_ge != null) predicate = predicate.And(_ => _.rank >= rank_ge);
			if (rank_in != null) predicate = predicate.And(_ => rank_in.Contains(_.rank));
			if (rank_ni != null) predicate = predicate.And(_ => !rank_ni.Contains(_.rank));
			#endregion
			#region description
			if (description_eq != null) predicate = predicate.And(_ => _.description == description_eq);
			if (description_ne != null) predicate = predicate.And(_ => _.description != description_ne);
			if (description_lt != null) predicate = predicate.And(_ => description_lt.CompareTo(_.description) > 0);
			if (description_gt != null) predicate = predicate.And(_ => description_gt.CompareTo(_.description) < 0);
			if (description_le != null) predicate = predicate.And(_ => description_le.CompareTo(_.description) >= 0);
			if (description_ge != null) predicate = predicate.And(_ => description_ge.CompareTo(_.description) <= 0);
			if (description_in != null) predicate = predicate.And(_ => description_in.Contains(_.description));
			if (description_ni != null) predicate = predicate.And(_ => !description_ni.Contains(_.description));
			#endregion
			#region display_order
			if (display_order_eq != null) predicate = predicate.And(_ => _.display_order == display_order_eq);
			if (display_order_ne != null) predicate = predicate.And(_ => _.display_order != display_order_ne);
			if (display_order_lt != null) predicate = predicate.And(_ => _.display_order < display_order_lt);
			if (display_order_gt != null) predicate = predicate.And(_ => _.display_order > display_order_gt);
			if (display_order_le != null) predicate = predicate.And(_ => _.display_order <= display_order_le);
			if (display_order_ge != null) predicate = predicate.And(_ => _.display_order >= display_order_ge);
			if (display_order_in != null) predicate = predicate.And(_ => display_order_in.Contains(_.display_order));
			if (display_order_ni != null) predicate = predicate.And(_ => !display_order_ni.Contains(_.display_order));
			#endregion
			#region created_at
			if (created_at_eq != null) predicate = predicate.And(_ => _.created_at == created_at_eq);
			if (created_at_ne != null) predicate = predicate.And(_ => _.created_at != created_at_ne);
			if (created_at_lt != null) predicate = predicate.And(_ => _.created_at < created_at_lt);
			if (created_at_gt != null) predicate = predicate.And(_ => _.created_at > created_at_gt);
			if (created_at_le != null) predicate = predicate.And(_ => _.created_at <= created_at_le);
			if (created_at_ge != null) predicate = predicate.And(_ => _.created_at >= created_at_ge);
			if (created_at_in != null) predicate = predicate.And(_ => created_at_in.Contains(_.created_at));
			if (created_at_ni != null) predicate = predicate.And(_ => !created_at_ni.Contains(_.created_at));
			#endregion
			#region created_by
			if (created_by_eq != null) predicate = predicate.And(_ => _.created_by == created_by_eq);
			if (created_by_ne != null) predicate = predicate.And(_ => _.created_by != created_by_ne);
			if (created_by_lt != null) predicate = predicate.And(_ => _.created_by < created_by_lt);
			if (created_by_gt != null) predicate = predicate.And(_ => _.created_by > created_by_gt);
			if (created_by_le != null) predicate = predicate.And(_ => _.created_by <= created_by_le);
			if (created_by_ge != null) predicate = predicate.And(_ => _.created_by >= created_by_ge);
			if (created_by_in != null) predicate = predicate.And(_ => created_by_in.Contains(_.created_by.Value));
			if (created_by_ni != null) predicate = predicate.And(_ => !created_by_ni.Contains(_.created_by.Value));
			if (created_by_isnull) predicate = predicate.And(_ => _.created_by == null);
			if (created_by_isnotnull) predicate = predicate.And(_ => _.created_by != null);
			#endregion
			#region modified_at
			if (modified_at_eq != null) predicate = predicate.And(_ => _.modified_at == modified_at_eq);
			if (modified_at_ne != null) predicate = predicate.And(_ => _.modified_at != modified_at_ne);
			if (modified_at_lt != null) predicate = predicate.And(_ => _.modified_at < modified_at_lt);
			if (modified_at_gt != null) predicate = predicate.And(_ => _.modified_at > modified_at_gt);
			if (modified_at_le != null) predicate = predicate.And(_ => _.modified_at <= modified_at_le);
			if (modified_at_ge != null) predicate = predicate.And(_ => _.modified_at >= modified_at_ge);
			if (modified_at_in != null) predicate = predicate.And(_ => modified_at_in.Contains(_.modified_at));
			if (modified_at_ni != null) predicate = predicate.And(_ => !modified_at_ni.Contains(_.modified_at));
			#endregion
			#region modified_by
			if (modified_by_eq != null) predicate = predicate.And(_ => _.modified_by == modified_by_eq);
			if (modified_by_ne != null) predicate = predicate.And(_ => _.modified_by != modified_by_ne);
			if (modified_by_lt != null) predicate = predicate.And(_ => _.modified_by < modified_by_lt);
			if (modified_by_gt != null) predicate = predicate.And(_ => _.modified_by > modified_by_gt);
			if (modified_by_le != null) predicate = predicate.And(_ => _.modified_by <= modified_by_le);
			if (modified_by_ge != null) predicate = predicate.And(_ => _.modified_by >= modified_by_ge);
			if (modified_by_in != null) predicate = predicate.And(_ => modified_by_in.Contains(_.modified_by.Value));
			if (modified_by_ni != null) predicate = predicate.And(_ => !modified_by_ni.Contains(_.modified_by.Value));
			if (modified_by_isnull) predicate = predicate.And(_ => _.modified_by == null);
			if (modified_by_isnotnull) predicate = predicate.And(_ => _.modified_by != null);
			#endregion
			#region removed_at
			if (removed_at_eq != null) predicate = predicate.And(_ => _.removed_at == removed_at_eq);
			if (removed_at_ne != null) predicate = predicate.And(_ => _.removed_at != removed_at_ne);
			if (removed_at_lt != null) predicate = predicate.And(_ => _.removed_at < removed_at_lt);
			if (removed_at_gt != null) predicate = predicate.And(_ => _.removed_at > removed_at_gt);
			if (removed_at_le != null) predicate = predicate.And(_ => _.removed_at <= removed_at_le);
			if (removed_at_ge != null) predicate = predicate.And(_ => _.removed_at >= removed_at_ge);
			if (removed_at_in != null) predicate = predicate.And(_ => removed_at_in.Contains(_.removed_at.Value));
			if (removed_at_ni != null) predicate = predicate.And(_ => !removed_at_ni.Contains(_.removed_at.Value));
			if (removed_at_isnull) predicate = predicate.And(_ => _.removed_at == null);
			if (removed_at_isnotnull) predicate = predicate.And(_ => _.removed_at != null);
			#endregion
			#region row_version
			if (row_version_eq != null) predicate = predicate.And(_ => _.row_version == row_version_eq);
			if (row_version_ne != null) predicate = predicate.And(_ => _.row_version != row_version_ne);
			if (row_version_isnull) predicate = predicate.And(_ => _.row_version == null);
			if (row_version_isnotnull) predicate = predicate.And(_ => _.row_version != null);
			#endregion

			return predicate;
		}
		#endregion
	}
	#endregion
	#endregion
	#region 人名
	/// <summary>
	/// 人名
	/// </summary>
	[Table(Schema="HumanResource", Name="PersonName"), DataContract]
	public partial class PersonName : TableBase<PersonName>, INotifyPropertyChanged
	{
		#region uid : int

		private int _uid;
		/// <summary>
		/// ユニークID
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull, Identity]
		public  int  uid
		{
			get { return _uid; }
			set
			{
				if (_uid != value)
				{
					BeforeuidChanged(value);
					_uid = value;
					AfteruidChanged();

					OnuidChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeuidChanged(int newValue);
		partial void AfteruidChanged();

		public const string NameOfuid = "uid";

		private static readonly PropertyChangedEventArgs _uidChangedEventArgs = new PropertyChangedEventArgs(NameOfuid);

		private void OnuidChanged()
		{
			OnPropertyChanged(_uidChangedEventArgs);
		}

		#endregion

		#endregion
		#region user_type : int

		private int _user_type;
		/// <summary>
		/// 利用者種別
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull, PrimaryKey(Order = 1), System.ComponentModel.DataAnnotations.Required]
		public  int  user_type
		{
			get { return _user_type; }
			set
			{
				if (_user_type != value)
				{
					Beforeuser_typeChanged(value);
					_user_type = value;
					Afteruser_typeChanged();

					Onuser_typeChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeuser_typeChanged(int newValue);
		partial void Afteruser_typeChanged();

		public const string NameOfuser_type = "user_type";

		private static readonly PropertyChangedEventArgs _user_typeChangedEventArgs = new PropertyChangedEventArgs(NameOfuser_type);

		private void Onuser_typeChanged()
		{
			OnPropertyChanged(_user_typeChangedEventArgs);
		}

		#endregion

		#endregion
		#region generic_user_no : string

		private string _generic_user_no;
		/// <summary>
		/// 利用者番号
		/// </summary>
		[Column(DbType="varchar(16)", DataType=DataType.VarChar, Length=16), DataMember, NotNull, PrimaryKey(Order = 2), System.ComponentModel.DataAnnotations.Required]
		public  string  generic_user_no
		{
			get { return _generic_user_no; }
			set
			{
				if (_generic_user_no != value)
				{
					Beforegeneric_user_noChanged(value);
					_generic_user_no = value;
					Aftergeneric_user_noChanged();

					Ongeneric_user_noChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforegeneric_user_noChanged(string newValue);
		partial void Aftergeneric_user_noChanged();

		public const string NameOfgeneric_user_no = "generic_user_no";

		private static readonly PropertyChangedEventArgs _generic_user_noChangedEventArgs = new PropertyChangedEventArgs(NameOfgeneric_user_no);

		private void Ongeneric_user_noChanged()
		{
			OnPropertyChanged(_generic_user_noChangedEventArgs);
		}

		#endregion

		#endregion
		#region seq : int

		private int _seq;
		/// <summary>
		/// 連番
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull, PrimaryKey(Order = 3), System.ComponentModel.DataAnnotations.Required]
		public  int  seq
		{
			get { return _seq; }
			set
			{
				if (_seq != value)
				{
					BeforeseqChanged(value);
					_seq = value;
					AfterseqChanged();

					OnseqChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeseqChanged(int newValue);
		partial void AfterseqChanged();

		public const string NameOfseq = "seq";

		private static readonly PropertyChangedEventArgs _seqChangedEventArgs = new PropertyChangedEventArgs(NameOfseq);

		private void OnseqChanged()
		{
			OnPropertyChanged(_seqChangedEventArgs);
		}

		#endregion

		#endregion
		#region person_name_type_id : int

		private int _person_name_type_id;
		/// <summary>
		/// 人名種別
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull, System.ComponentModel.DataAnnotations.Required]
		public  int  person_name_type_id
		{
			get { return _person_name_type_id; }
			set
			{
				if (_person_name_type_id != value)
				{
					Beforeperson_name_type_idChanged(value);
					_person_name_type_id = value;
					Afterperson_name_type_idChanged();

					Onperson_name_type_idChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeperson_name_type_idChanged(int newValue);
		partial void Afterperson_name_type_idChanged();

		public const string NameOfperson_name_type_id = "person_name_type_id";

		private static readonly PropertyChangedEventArgs _person_name_type_idChangedEventArgs = new PropertyChangedEventArgs(NameOfperson_name_type_id);

		private void Onperson_name_type_idChanged()
		{
			OnPropertyChanged(_person_name_type_idChangedEventArgs);
		}

		#endregion

		#endregion
		#region name : string

		private string _name;
		/// <summary>
		/// 氏名
		/// </summary>
		[Column(DbType="nvarchar(20)", DataType=DataType.NVarChar, Length=20), DataMember, NotNull, System.ComponentModel.DataAnnotations.Required]
		public  string  name
		{
			get { return _name; }
			set
			{
				if (_name != value)
				{
					BeforenameChanged(value);
					_name = value;
					AfternameChanged();

					OnnameChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforenameChanged(string newValue);
		partial void AfternameChanged();

		public const string NameOfname = "name";

		private static readonly PropertyChangedEventArgs _nameChangedEventArgs = new PropertyChangedEventArgs(NameOfname);

		private void OnnameChanged()
		{
			OnPropertyChanged(_nameChangedEventArgs);
		}

		#endregion

		#endregion
		#region kana : string

		private string _kana;
		/// <summary>
		/// かな氏名
		/// </summary>
		[Column(DbType="nvarchar(20)", DataType=DataType.NVarChar, Length=20), DataMember, NotNull]
		public  string  kana
		{
			get { return _kana; }
			set
			{
				if (_kana != value)
				{
					BeforekanaChanged(value);
					_kana = value;
					AfterkanaChanged();

					OnkanaChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforekanaChanged(string newValue);
		partial void AfterkanaChanged();

		public const string NameOfkana = "kana";

		private static readonly PropertyChangedEventArgs _kanaChangedEventArgs = new PropertyChangedEventArgs(NameOfkana);

		private void OnkanaChanged()
		{
			OnPropertyChanged(_kanaChangedEventArgs);
		}

		#endregion

		#endregion
		#region name_abbrev : string

		private string _name_abbrev;
		/// <summary>
		/// 略称
		/// </summary>
		[Column(DbType="nvarchar(4)", DataType=DataType.NVarChar, Length=4), DataMember, NotNull]
		public  string  name_abbrev
		{
			get { return _name_abbrev; }
			set
			{
				if (_name_abbrev != value)
				{
					Beforename_abbrevChanged(value);
					_name_abbrev = value;
					Aftername_abbrevChanged();

					Onname_abbrevChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforename_abbrevChanged(string newValue);
		partial void Aftername_abbrevChanged();

		public const string NameOfname_abbrev = "name_abbrev";

		private static readonly PropertyChangedEventArgs _name_abbrevChangedEventArgs = new PropertyChangedEventArgs(NameOfname_abbrev);

		private void Onname_abbrevChanged()
		{
			OnPropertyChanged(_name_abbrevChangedEventArgs);
		}

		#endregion

		#endregion
		#region name_eng : string

		private string _name_eng;
		/// <summary>
		/// 英字氏名
		/// </summary>
		[Column(DbType="varchar(30)", DataType=DataType.VarChar, Length=30), DataMember, NotNull]
		public  string  name_eng
		{
			get { return _name_eng; }
			set
			{
				if (_name_eng != value)
				{
					Beforename_engChanged(value);
					_name_eng = value;
					Aftername_engChanged();

					Onname_engChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforename_engChanged(string newValue);
		partial void Aftername_engChanged();

		public const string NameOfname_eng = "name_eng";

		private static readonly PropertyChangedEventArgs _name_engChangedEventArgs = new PropertyChangedEventArgs(NameOfname_eng);

		private void Onname_engChanged()
		{
			OnPropertyChanged(_name_engChangedEventArgs);
		}

		#endregion

		#endregion
		#region name_eng_abbrev : string

		private string _name_eng_abbrev;
		/// <summary>
		/// 英字略称
		/// </summary>
		[Column(DbType="varchar(4)", DataType=DataType.VarChar, Length=4), DataMember, NotNull]
		public  string  name_eng_abbrev
		{
			get { return _name_eng_abbrev; }
			set
			{
				if (_name_eng_abbrev != value)
				{
					Beforename_eng_abbrevChanged(value);
					_name_eng_abbrev = value;
					Aftername_eng_abbrevChanged();

					Onname_eng_abbrevChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforename_eng_abbrevChanged(string newValue);
		partial void Aftername_eng_abbrevChanged();

		public const string NameOfname_eng_abbrev = "name_eng_abbrev";

		private static readonly PropertyChangedEventArgs _name_eng_abbrevChangedEventArgs = new PropertyChangedEventArgs(NameOfname_eng_abbrev);

		private void Onname_eng_abbrevChanged()
		{
			OnPropertyChanged(_name_eng_abbrevChangedEventArgs);
		}

		#endregion

		#endregion
		#region created_at : DateTime

		private DateTime _created_at;
		/// <summary>
		/// 作成日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, NotNull]
		public  DateTime  created_at
		{
			get { return _created_at; }
			set
			{
				if (_created_at != value)
				{
					Beforecreated_atChanged(value);
					_created_at = value;
					Aftercreated_atChanged();

					Oncreated_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecreated_atChanged(DateTime newValue);
		partial void Aftercreated_atChanged();

		public const string NameOfcreated_at = "created_at";

		private static readonly PropertyChangedEventArgs _created_atChangedEventArgs = new PropertyChangedEventArgs(NameOfcreated_at);

		private void Oncreated_atChanged()
		{
			OnPropertyChanged(_created_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region created_by : int?

		private int? _created_by;
		/// <summary>
		/// 作成者
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, Nullable]
		public  int?  created_by
		{
			get { return _created_by; }
			set
			{
				if (_created_by != value)
				{
					Beforecreated_byChanged(value);
					_created_by = value;
					Aftercreated_byChanged();

					Oncreated_byChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecreated_byChanged(int? newValue);
		partial void Aftercreated_byChanged();

		public const string NameOfcreated_by = "created_by";

		private static readonly PropertyChangedEventArgs _created_byChangedEventArgs = new PropertyChangedEventArgs(NameOfcreated_by);

		private void Oncreated_byChanged()
		{
			OnPropertyChanged(_created_byChangedEventArgs);
		}

		#endregion

		#endregion
		#region modified_at : DateTime

		private DateTime _modified_at;
		/// <summary>
		/// 更新日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, NotNull]
		public  DateTime  modified_at
		{
			get { return _modified_at; }
			set
			{
				if (_modified_at != value)
				{
					Beforemodified_atChanged(value);
					_modified_at = value;
					Aftermodified_atChanged();

					Onmodified_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforemodified_atChanged(DateTime newValue);
		partial void Aftermodified_atChanged();

		public const string NameOfmodified_at = "modified_at";

		private static readonly PropertyChangedEventArgs _modified_atChangedEventArgs = new PropertyChangedEventArgs(NameOfmodified_at);

		private void Onmodified_atChanged()
		{
			OnPropertyChanged(_modified_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region modified_by : int?

		private int? _modified_by;
		/// <summary>
		/// 更新者
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, Nullable]
		public  int?  modified_by
		{
			get { return _modified_by; }
			set
			{
				if (_modified_by != value)
				{
					Beforemodified_byChanged(value);
					_modified_by = value;
					Aftermodified_byChanged();

					Onmodified_byChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforemodified_byChanged(int? newValue);
		partial void Aftermodified_byChanged();

		public const string NameOfmodified_by = "modified_by";

		private static readonly PropertyChangedEventArgs _modified_byChangedEventArgs = new PropertyChangedEventArgs(NameOfmodified_by);

		private void Onmodified_byChanged()
		{
			OnPropertyChanged(_modified_byChangedEventArgs);
		}

		#endregion

		#endregion
		#region row_version : byte[]

		private byte[] _row_version;
		/// <summary>
		/// 版
		/// </summary>
		[Column(DbType="timestamp", DataType=DataType.Timestamp, SkipOnInsert=true, SkipOnUpdate=true), DataMember, Nullable]
		public  byte[]  row_version
		{
			get { return _row_version; }
			set
			{
				if (_row_version != value)
				{
					Beforerow_versionChanged(value);
					_row_version = value;
					Afterrow_versionChanged();

					Onrow_versionChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforerow_versionChanged(byte[] newValue);
		partial void Afterrow_versionChanged();

		public const string NameOfrow_version = "row_version";

		private static readonly PropertyChangedEventArgs _row_versionChangedEventArgs = new PropertyChangedEventArgs(NameOfrow_version);

		private void Onrow_versionChanged()
		{
			OnPropertyChanged(_row_versionChangedEventArgs);
		}

		#endregion

		#endregion

		#region enum用アクセスラッパー
		/// <summary>
		/// user_typeのenumラッパー
		/// </summary>
		[ColumnAlias("user_type")]
		public UserType UserType
		{
			get => (UserType)user_type;
			set => user_type = value.Val();
		}
		#endregion

		#region Constructor

		public PersonName()
		{
			#region フィールド初期化
			uid = default(int);
			user_type = 99;
			generic_user_no = null;
			seq = 0;
			person_name_type_id = 0;
			name = "";
			kana = "";
			name_abbrev = "";
			name_eng = "";
			name_eng_abbrev = "";
			created_at = DateTime.UtcNow;
			created_by = null;
			modified_at = DateTime.UtcNow;
			modified_by = null;
			row_version = default(byte[]);
			#endregion
		}

		#endregion

		#region Association

		#region PersonNameType : person_name_type_id (FK_PersonName_PersonNameType)

		private PersonNameType _PersonNameType;
		/// <summary>
		/// FK_PersonName_PersonNameType
		/// </summary>
		[Association(ThisKey="person_name_type_id", OtherKey="person_name_type_id", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_PersonName_PersonNameType", BackReferenceName="PersonName"), DataMember]
		public  PersonNameType  PersonNameType
		{
			get { return _PersonNameType; }
			set
			{
				if (_PersonNameType != value)
				{
					BeforePersonNameTypeChanged(value);
					_PersonNameType = value;
					AfterPersonNameTypeChanged();

					OnPersonNameTypeChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforePersonNameTypeChanged(PersonNameType newValue);
		partial void AfterPersonNameTypeChanged ();

		public const string NameOfPersonNameType = "PersonNameType";

		private static readonly PropertyChangedEventArgs _PersonNameTypeChangedEventArgs = new PropertyChangedEventArgs(NameOfPersonNameType);

		private void OnPersonNameTypeChanged()
		{
			OnPropertyChanged(_PersonNameTypeChangedEventArgs);
		}

		#endregion

		#endregion
		#region Staff : user_type,generic_user_no (FK_PersonName_Staff)

		private Staff _Staff;
		/// <summary>
		/// FK_PersonName_Staff
		/// </summary>
		[Association(ThisKey="user_type,generic_user_no", OtherKey="user_type,staff_no", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_PersonName_Staff", BackReferenceName="PersonName"), DataMember]
		public  Staff  Staff
		{
			get { return _Staff; }
			set
			{
				if (_Staff != value)
				{
					BeforeStaffChanged(value);
					_Staff = value;
					AfterStaffChanged();

					OnStaffChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeStaffChanged(Staff newValue);
		partial void AfterStaffChanged ();

		public const string NameOfStaff = "Staff";

		private static readonly PropertyChangedEventArgs _StaffChangedEventArgs = new PropertyChangedEventArgs(NameOfStaff);

		private void OnStaffChanged()
		{
			OnPropertyChanged(_StaffChangedEventArgs);
		}

		#endregion

		#endregion
		#region Teacher : user_type,generic_user_no (FK_PersonName_Teacher)

		private Teacher _Teacher;
		/// <summary>
		/// FK_PersonName_Teacher
		/// </summary>
		[Association(ThisKey="user_type,generic_user_no", OtherKey="user_type,teacher_no", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_PersonName_Teacher", BackReferenceName="PersonName"), DataMember]
		public  Teacher  Teacher
		{
			get { return _Teacher; }
			set
			{
				if (_Teacher != value)
				{
					BeforeTeacherChanged(value);
					_Teacher = value;
					AfterTeacherChanged();

					OnTeacherChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeTeacherChanged(Teacher newValue);
		partial void AfterTeacherChanged ();

		public const string NameOfTeacher = "Teacher";

		private static readonly PropertyChangedEventArgs _TeacherChangedEventArgs = new PropertyChangedEventArgs(NameOfTeacher);

		private void OnTeacherChanged()
		{
			OnPropertyChanged(_TeacherChangedEventArgs);
		}

		#endregion

		#endregion

		#endregion

		#region INotifyPropertyChanged support

		[field : NonSerialized]
		public virtual event PropertyChangedEventHandler PropertyChanged;

		protected void OnPropertyChanged(string propertyName)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		protected void OnPropertyChanged(PropertyChangedEventArgs arg)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, arg);
			}
		}

		#endregion

	}
	#region 人名条件
	/// <summary>
	/// 人名条件
	/// </summary>
	[DataContract]
	public partial class PersonNameCondition : PersonNameConditionBase
	{
	}

	/// <summary>
	/// 人名条件ベース
	/// </summary>
	[DataContract]
	public class PersonNameConditionBase : ConditionBase<PersonName>
	{
		#region properties
		#region uid
		/// <summary>
		/// uid_eqと等しい
		/// </summary>
		[DataMember] public int? uid_eq { get; set; }
		/// <summary>
		/// uid_neと等しくない
		/// </summary>
		[DataMember] public int? uid_ne { get; set; }
		/// <summary>
		/// uid_ltより小さい
		/// </summary>
		[DataMember] public int? uid_lt { get; set; }
		/// <summary>
		/// uid_gtより大きい
		/// </summary>
		[DataMember] public int? uid_gt { get; set; }
		/// <summary>
		/// uid_le以下
		/// </summary>
		[DataMember] public int? uid_le { get; set; }
		/// <summary>
		/// uid_ge以上
		/// </summary>
		[DataMember] public int? uid_ge { get; set; }
		/// <summary>
		/// uid_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> uid_in { get; set; }
		/// <summary>
		/// uid_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> uid_ni { get; set; }
		/// <summary>
		/// uid_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? uid_between { get; set; }
		#endregion
		#region user_type (UserType)
		private int? _user_type_eq;
		/// <summary>
		/// UserType_eqと等しい
		/// </summary>
		[DataMember] public UserType? UserType_eq
		{
			get => _user_type_eq?.ToUserType();
			set => _user_type_eq = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _user_type_ne;
		/// <summary>
		/// UserType_neと等しくない
		/// </summary>
		[DataMember] public UserType? UserType_ne
		{
			get => _user_type_ne?.ToUserType();
			set => _user_type_ne = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _user_type_lt;
		/// <summary>
		/// UserType_ltより小さい
		/// </summary>
		[DataMember] public UserType? UserType_lt
		{
			get => _user_type_lt?.ToUserType();
			set => _user_type_lt = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _user_type_gt;
		/// <summary>
		/// UserType_gtより大きい
		/// </summary>
		[DataMember] public UserType? UserType_gt
		{
			get => _user_type_gt?.ToUserType();
			set => _user_type_gt = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _user_type_le;
		/// <summary>
		/// UserType_le以下
		/// </summary>
		[DataMember] public UserType? UserType_le
		{
			get => _user_type_le?.ToUserType();
			set => _user_type_le = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _user_type_ge;
		/// <summary>
		/// UserType_ge以上
		/// </summary>
		[DataMember] public UserType? UserType_ge
		{
			get => _user_type_ge?.ToUserType();
			set => _user_type_ge = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private IEnumerable<int> _user_type_in;
		/// <summary>
		/// UserType_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<UserType> UserType_in
		{
			get => _user_type_in?.Select(_ => _.ToUserType().Value) ?? Enumerable.Empty<UserType>();
			set => _user_type_in = value.Select(_ => _.Val());
		}
		private IEnumerable<int> _user_type_ni;
		/// <summary>
		/// UserType_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<UserType> UserType_ni
		{
			get => _user_type_ni?.Select(_ => _.ToUserType().Value) ?? Enumerable.Empty<UserType>();
			set => _user_type_ni = value.Select(_ => _.Val());
		}
		private (int low, int high)? _user_type_between;
		/// <summary>
		/// UserType_betweenの範囲内にある
		/// </summary>
		[DataMember] public (UserType low, UserType high)? UserType_between
		{
			get => _user_type_between.HasValue ? (_user_type_between.Value.low.ToUserType().Value, _user_type_between.Value.high.ToUserType().Value) : ((UserType, UserType)?)null;
			set => _user_type_between = value.HasValue ? (value.Value.low.Val(), value.Value.high.Val()) : ((int, int)?)null;
		}
		#endregion
		#region generic_user_no
		/// <summary>
		/// generic_user_no_eqと等しい
		/// </summary>
		[DataMember] public string generic_user_no_eq { get; set; }
		/// <summary>
		/// generic_user_no_neと等しくない
		/// </summary>
		[DataMember] public string generic_user_no_ne { get; set; }
		/// <summary>
		/// generic_user_no_ltより小さい
		/// </summary>
		[DataMember] public string generic_user_no_lt { get; set; }
		/// <summary>
		/// generic_user_no_gtより大きい
		/// </summary>
		[DataMember] public string generic_user_no_gt { get; set; }
		/// <summary>
		/// generic_user_no_le以下
		/// </summary>
		[DataMember] public string generic_user_no_le { get; set; }
		/// <summary>
		/// generic_user_no_ge以上
		/// </summary>
		[DataMember] public string generic_user_no_ge { get; set; }
		/// <summary>
		/// generic_user_no_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> generic_user_no_in { get; set; }
		/// <summary>
		/// generic_user_no_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> generic_user_no_ni { get; set; }
		/// <summary>
		/// generic_user_no_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? generic_user_no_between { get; set; }
		/// <summary>
		/// generic_user_no_likeと部分一致する
		/// </summary>
		[DataMember] public string generic_user_no_like { get; set; }
		#endregion
		#region seq
		/// <summary>
		/// seq_eqと等しい
		/// </summary>
		[DataMember] public int? seq_eq { get; set; }
		/// <summary>
		/// seq_neと等しくない
		/// </summary>
		[DataMember] public int? seq_ne { get; set; }
		/// <summary>
		/// seq_ltより小さい
		/// </summary>
		[DataMember] public int? seq_lt { get; set; }
		/// <summary>
		/// seq_gtより大きい
		/// </summary>
		[DataMember] public int? seq_gt { get; set; }
		/// <summary>
		/// seq_le以下
		/// </summary>
		[DataMember] public int? seq_le { get; set; }
		/// <summary>
		/// seq_ge以上
		/// </summary>
		[DataMember] public int? seq_ge { get; set; }
		/// <summary>
		/// seq_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> seq_in { get; set; }
		/// <summary>
		/// seq_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> seq_ni { get; set; }
		/// <summary>
		/// seq_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? seq_between { get; set; }
		#endregion
		#region person_name_type_id
		/// <summary>
		/// person_name_type_id_eqと等しい
		/// </summary>
		[DataMember] public int? person_name_type_id_eq { get; set; }
		/// <summary>
		/// person_name_type_id_neと等しくない
		/// </summary>
		[DataMember] public int? person_name_type_id_ne { get; set; }
		/// <summary>
		/// person_name_type_id_ltより小さい
		/// </summary>
		[DataMember] public int? person_name_type_id_lt { get; set; }
		/// <summary>
		/// person_name_type_id_gtより大きい
		/// </summary>
		[DataMember] public int? person_name_type_id_gt { get; set; }
		/// <summary>
		/// person_name_type_id_le以下
		/// </summary>
		[DataMember] public int? person_name_type_id_le { get; set; }
		/// <summary>
		/// person_name_type_id_ge以上
		/// </summary>
		[DataMember] public int? person_name_type_id_ge { get; set; }
		/// <summary>
		/// person_name_type_id_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> person_name_type_id_in { get; set; }
		/// <summary>
		/// person_name_type_id_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> person_name_type_id_ni { get; set; }
		/// <summary>
		/// person_name_type_id_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? person_name_type_id_between { get; set; }
		#endregion
		#region name
		/// <summary>
		/// name_eqと等しい
		/// </summary>
		[DataMember] public string name_eq { get; set; }
		/// <summary>
		/// name_neと等しくない
		/// </summary>
		[DataMember] public string name_ne { get; set; }
		/// <summary>
		/// name_ltより小さい
		/// </summary>
		[DataMember] public string name_lt { get; set; }
		/// <summary>
		/// name_gtより大きい
		/// </summary>
		[DataMember] public string name_gt { get; set; }
		/// <summary>
		/// name_le以下
		/// </summary>
		[DataMember] public string name_le { get; set; }
		/// <summary>
		/// name_ge以上
		/// </summary>
		[DataMember] public string name_ge { get; set; }
		/// <summary>
		/// name_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> name_in { get; set; }
		/// <summary>
		/// name_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> name_ni { get; set; }
		/// <summary>
		/// name_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? name_between { get; set; }
		/// <summary>
		/// name_likeと部分一致する
		/// </summary>
		[DataMember] public string name_like { get; set; }
		#endregion
		#region kana
		/// <summary>
		/// kana_eqと等しい
		/// </summary>
		[DataMember] public string kana_eq { get; set; }
		/// <summary>
		/// kana_neと等しくない
		/// </summary>
		[DataMember] public string kana_ne { get; set; }
		/// <summary>
		/// kana_ltより小さい
		/// </summary>
		[DataMember] public string kana_lt { get; set; }
		/// <summary>
		/// kana_gtより大きい
		/// </summary>
		[DataMember] public string kana_gt { get; set; }
		/// <summary>
		/// kana_le以下
		/// </summary>
		[DataMember] public string kana_le { get; set; }
		/// <summary>
		/// kana_ge以上
		/// </summary>
		[DataMember] public string kana_ge { get; set; }
		/// <summary>
		/// kana_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> kana_in { get; set; }
		/// <summary>
		/// kana_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> kana_ni { get; set; }
		/// <summary>
		/// kana_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? kana_between { get; set; }
		/// <summary>
		/// kana_likeと部分一致する
		/// </summary>
		[DataMember] public string kana_like { get; set; }
		#endregion
		#region name_abbrev
		/// <summary>
		/// name_abbrev_eqと等しい
		/// </summary>
		[DataMember] public string name_abbrev_eq { get; set; }
		/// <summary>
		/// name_abbrev_neと等しくない
		/// </summary>
		[DataMember] public string name_abbrev_ne { get; set; }
		/// <summary>
		/// name_abbrev_ltより小さい
		/// </summary>
		[DataMember] public string name_abbrev_lt { get; set; }
		/// <summary>
		/// name_abbrev_gtより大きい
		/// </summary>
		[DataMember] public string name_abbrev_gt { get; set; }
		/// <summary>
		/// name_abbrev_le以下
		/// </summary>
		[DataMember] public string name_abbrev_le { get; set; }
		/// <summary>
		/// name_abbrev_ge以上
		/// </summary>
		[DataMember] public string name_abbrev_ge { get; set; }
		/// <summary>
		/// name_abbrev_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> name_abbrev_in { get; set; }
		/// <summary>
		/// name_abbrev_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> name_abbrev_ni { get; set; }
		/// <summary>
		/// name_abbrev_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? name_abbrev_between { get; set; }
		/// <summary>
		/// name_abbrev_likeと部分一致する
		/// </summary>
		[DataMember] public string name_abbrev_like { get; set; }
		#endregion
		#region name_eng
		/// <summary>
		/// name_eng_eqと等しい
		/// </summary>
		[DataMember] public string name_eng_eq { get; set; }
		/// <summary>
		/// name_eng_neと等しくない
		/// </summary>
		[DataMember] public string name_eng_ne { get; set; }
		/// <summary>
		/// name_eng_ltより小さい
		/// </summary>
		[DataMember] public string name_eng_lt { get; set; }
		/// <summary>
		/// name_eng_gtより大きい
		/// </summary>
		[DataMember] public string name_eng_gt { get; set; }
		/// <summary>
		/// name_eng_le以下
		/// </summary>
		[DataMember] public string name_eng_le { get; set; }
		/// <summary>
		/// name_eng_ge以上
		/// </summary>
		[DataMember] public string name_eng_ge { get; set; }
		/// <summary>
		/// name_eng_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> name_eng_in { get; set; }
		/// <summary>
		/// name_eng_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> name_eng_ni { get; set; }
		/// <summary>
		/// name_eng_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? name_eng_between { get; set; }
		/// <summary>
		/// name_eng_likeと部分一致する
		/// </summary>
		[DataMember] public string name_eng_like { get; set; }
		#endregion
		#region name_eng_abbrev
		/// <summary>
		/// name_eng_abbrev_eqと等しい
		/// </summary>
		[DataMember] public string name_eng_abbrev_eq { get; set; }
		/// <summary>
		/// name_eng_abbrev_neと等しくない
		/// </summary>
		[DataMember] public string name_eng_abbrev_ne { get; set; }
		/// <summary>
		/// name_eng_abbrev_ltより小さい
		/// </summary>
		[DataMember] public string name_eng_abbrev_lt { get; set; }
		/// <summary>
		/// name_eng_abbrev_gtより大きい
		/// </summary>
		[DataMember] public string name_eng_abbrev_gt { get; set; }
		/// <summary>
		/// name_eng_abbrev_le以下
		/// </summary>
		[DataMember] public string name_eng_abbrev_le { get; set; }
		/// <summary>
		/// name_eng_abbrev_ge以上
		/// </summary>
		[DataMember] public string name_eng_abbrev_ge { get; set; }
		/// <summary>
		/// name_eng_abbrev_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> name_eng_abbrev_in { get; set; }
		/// <summary>
		/// name_eng_abbrev_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> name_eng_abbrev_ni { get; set; }
		/// <summary>
		/// name_eng_abbrev_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? name_eng_abbrev_between { get; set; }
		/// <summary>
		/// name_eng_abbrev_likeと部分一致する
		/// </summary>
		[DataMember] public string name_eng_abbrev_like { get; set; }
		#endregion
		#region created_at
		/// <summary>
		/// created_at_eqと等しい
		/// </summary>
		[DataMember] public DateTime? created_at_eq { get; set; }
		/// <summary>
		/// created_at_neと等しくない
		/// </summary>
		[DataMember] public DateTime? created_at_ne { get; set; }
		/// <summary>
		/// created_at_ltより小さい
		/// </summary>
		[DataMember] public DateTime? created_at_lt { get; set; }
		/// <summary>
		/// created_at_gtより大きい
		/// </summary>
		[DataMember] public DateTime? created_at_gt { get; set; }
		/// <summary>
		/// created_at_le以下
		/// </summary>
		[DataMember] public DateTime? created_at_le { get; set; }
		/// <summary>
		/// created_at_ge以上
		/// </summary>
		[DataMember] public DateTime? created_at_ge { get; set; }
		/// <summary>
		/// created_at_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> created_at_in { get; set; }
		/// <summary>
		/// created_at_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> created_at_ni { get; set; }
		/// <summary>
		/// created_at_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? created_at_between { get; set; }
		#endregion
		#region created_by
		/// <summary>
		/// created_by_eqと等しい
		/// </summary>
		[DataMember] public int? created_by_eq { get; set; }
		/// <summary>
		/// created_by_neと等しくない
		/// </summary>
		[DataMember] public int? created_by_ne { get; set; }
		/// <summary>
		/// created_by_ltより小さい
		/// </summary>
		[DataMember] public int? created_by_lt { get; set; }
		/// <summary>
		/// created_by_gtより大きい
		/// </summary>
		[DataMember] public int? created_by_gt { get; set; }
		/// <summary>
		/// created_by_le以下
		/// </summary>
		[DataMember] public int? created_by_le { get; set; }
		/// <summary>
		/// created_by_ge以上
		/// </summary>
		[DataMember] public int? created_by_ge { get; set; }
		/// <summary>
		/// created_by_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> created_by_in { get; set; }
		/// <summary>
		/// created_by_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> created_by_ni { get; set; }
		/// <summary>
		/// created_by_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? created_by_between { get; set; }
		/// <summary>
		/// created_byがNULLか
		/// </summary>
		[DataMember] public bool created_by_isnull { get; set; } =  false ;
		/// <summary>
		/// created_byがNULLではないか
		/// </summary>
		[DataMember] public bool created_by_isnotnull { get; set; } = false;
		#endregion
		#region modified_at
		/// <summary>
		/// modified_at_eqと等しい
		/// </summary>
		[DataMember] public DateTime? modified_at_eq { get; set; }
		/// <summary>
		/// modified_at_neと等しくない
		/// </summary>
		[DataMember] public DateTime? modified_at_ne { get; set; }
		/// <summary>
		/// modified_at_ltより小さい
		/// </summary>
		[DataMember] public DateTime? modified_at_lt { get; set; }
		/// <summary>
		/// modified_at_gtより大きい
		/// </summary>
		[DataMember] public DateTime? modified_at_gt { get; set; }
		/// <summary>
		/// modified_at_le以下
		/// </summary>
		[DataMember] public DateTime? modified_at_le { get; set; }
		/// <summary>
		/// modified_at_ge以上
		/// </summary>
		[DataMember] public DateTime? modified_at_ge { get; set; }
		/// <summary>
		/// modified_at_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> modified_at_in { get; set; }
		/// <summary>
		/// modified_at_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> modified_at_ni { get; set; }
		/// <summary>
		/// modified_at_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? modified_at_between { get; set; }
		#endregion
		#region modified_by
		/// <summary>
		/// modified_by_eqと等しい
		/// </summary>
		[DataMember] public int? modified_by_eq { get; set; }
		/// <summary>
		/// modified_by_neと等しくない
		/// </summary>
		[DataMember] public int? modified_by_ne { get; set; }
		/// <summary>
		/// modified_by_ltより小さい
		/// </summary>
		[DataMember] public int? modified_by_lt { get; set; }
		/// <summary>
		/// modified_by_gtより大きい
		/// </summary>
		[DataMember] public int? modified_by_gt { get; set; }
		/// <summary>
		/// modified_by_le以下
		/// </summary>
		[DataMember] public int? modified_by_le { get; set; }
		/// <summary>
		/// modified_by_ge以上
		/// </summary>
		[DataMember] public int? modified_by_ge { get; set; }
		/// <summary>
		/// modified_by_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> modified_by_in { get; set; }
		/// <summary>
		/// modified_by_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> modified_by_ni { get; set; }
		/// <summary>
		/// modified_by_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? modified_by_between { get; set; }
		/// <summary>
		/// modified_byがNULLか
		/// </summary>
		[DataMember] public bool modified_by_isnull { get; set; } =  false ;
		/// <summary>
		/// modified_byがNULLではないか
		/// </summary>
		[DataMember] public bool modified_by_isnotnull { get; set; } = false;
		#endregion
		#region row_version
		/// <summary>
		/// row_version_eqと等しい
		/// </summary>
		[DataMember] public byte[] row_version_eq { get; set; }
		/// <summary>
		/// row_version_neと等しくない
		/// </summary>
		[DataMember] public byte[] row_version_ne { get; set; }
		/// <summary>
		/// row_versionがNULLか
		/// </summary>
		[DataMember] public bool row_version_isnull { get; set; } =  false ;
		/// <summary>
		/// row_versionがNULLではないか
		/// </summary>
		[DataMember] public bool row_version_isnotnull { get; set; } = false;
		#endregion
		#endregion

		#region override
		override public Expression<Func<PersonName, bool>> CreatePredicate()
		{
			var predicate = base.CreatePredicate();

			#region uid
			if (uid_eq != null) predicate = predicate.And(_ => _.uid == uid_eq);
			if (uid_ne != null) predicate = predicate.And(_ => _.uid != uid_ne);
			if (uid_lt != null) predicate = predicate.And(_ => _.uid < uid_lt);
			if (uid_gt != null) predicate = predicate.And(_ => _.uid > uid_gt);
			if (uid_le != null) predicate = predicate.And(_ => _.uid <= uid_le);
			if (uid_ge != null) predicate = predicate.And(_ => _.uid >= uid_ge);
			if (uid_in != null) predicate = predicate.And(_ => uid_in.Contains(_.uid));
			if (uid_ni != null) predicate = predicate.And(_ => !uid_ni.Contains(_.uid));
			#endregion
			#region user_type
			if (_user_type_eq != null) predicate = predicate.And(_ => _.user_type == _user_type_eq);
			if (_user_type_ne != null) predicate = predicate.And(_ => _.user_type != _user_type_ne);
			if (_user_type_lt != null) predicate = predicate.And(_ => _.user_type < _user_type_lt);
			if (_user_type_gt != null) predicate = predicate.And(_ => _.user_type > _user_type_gt);
			if (_user_type_le != null) predicate = predicate.And(_ => _.user_type <= _user_type_le);
			if (_user_type_ge != null) predicate = predicate.And(_ => _.user_type >= _user_type_ge);
			if (_user_type_in != null) predicate = predicate.And(_ => _user_type_in.Contains(_.user_type));
			if (_user_type_ni != null) predicate = predicate.And(_ => !_user_type_ni.Contains(_.user_type));
			#endregion
			#region generic_user_no
			if (generic_user_no_eq != null) predicate = predicate.And(_ => _.generic_user_no == generic_user_no_eq);
			if (generic_user_no_ne != null) predicate = predicate.And(_ => _.generic_user_no != generic_user_no_ne);
			if (generic_user_no_lt != null) predicate = predicate.And(_ => generic_user_no_lt.CompareTo(_.generic_user_no) > 0);
			if (generic_user_no_gt != null) predicate = predicate.And(_ => generic_user_no_gt.CompareTo(_.generic_user_no) < 0);
			if (generic_user_no_le != null) predicate = predicate.And(_ => generic_user_no_le.CompareTo(_.generic_user_no) >= 0);
			if (generic_user_no_ge != null) predicate = predicate.And(_ => generic_user_no_ge.CompareTo(_.generic_user_no) <= 0);
			if (generic_user_no_in != null) predicate = predicate.And(_ => generic_user_no_in.Contains(_.generic_user_no));
			if (generic_user_no_ni != null) predicate = predicate.And(_ => !generic_user_no_ni.Contains(_.generic_user_no));
			#endregion
			#region seq
			if (seq_eq != null) predicate = predicate.And(_ => _.seq == seq_eq);
			if (seq_ne != null) predicate = predicate.And(_ => _.seq != seq_ne);
			if (seq_lt != null) predicate = predicate.And(_ => _.seq < seq_lt);
			if (seq_gt != null) predicate = predicate.And(_ => _.seq > seq_gt);
			if (seq_le != null) predicate = predicate.And(_ => _.seq <= seq_le);
			if (seq_ge != null) predicate = predicate.And(_ => _.seq >= seq_ge);
			if (seq_in != null) predicate = predicate.And(_ => seq_in.Contains(_.seq));
			if (seq_ni != null) predicate = predicate.And(_ => !seq_ni.Contains(_.seq));
			#endregion
			#region person_name_type_id
			if (person_name_type_id_eq != null) predicate = predicate.And(_ => _.person_name_type_id == person_name_type_id_eq);
			if (person_name_type_id_ne != null) predicate = predicate.And(_ => _.person_name_type_id != person_name_type_id_ne);
			if (person_name_type_id_lt != null) predicate = predicate.And(_ => _.person_name_type_id < person_name_type_id_lt);
			if (person_name_type_id_gt != null) predicate = predicate.And(_ => _.person_name_type_id > person_name_type_id_gt);
			if (person_name_type_id_le != null) predicate = predicate.And(_ => _.person_name_type_id <= person_name_type_id_le);
			if (person_name_type_id_ge != null) predicate = predicate.And(_ => _.person_name_type_id >= person_name_type_id_ge);
			if (person_name_type_id_in != null) predicate = predicate.And(_ => person_name_type_id_in.Contains(_.person_name_type_id));
			if (person_name_type_id_ni != null) predicate = predicate.And(_ => !person_name_type_id_ni.Contains(_.person_name_type_id));
			#endregion
			#region name
			if (name_eq != null) predicate = predicate.And(_ => _.name == name_eq);
			if (name_ne != null) predicate = predicate.And(_ => _.name != name_ne);
			if (name_lt != null) predicate = predicate.And(_ => name_lt.CompareTo(_.name) > 0);
			if (name_gt != null) predicate = predicate.And(_ => name_gt.CompareTo(_.name) < 0);
			if (name_le != null) predicate = predicate.And(_ => name_le.CompareTo(_.name) >= 0);
			if (name_ge != null) predicate = predicate.And(_ => name_ge.CompareTo(_.name) <= 0);
			if (name_in != null) predicate = predicate.And(_ => name_in.Contains(_.name));
			if (name_ni != null) predicate = predicate.And(_ => !name_ni.Contains(_.name));
			#endregion
			#region kana
			if (kana_eq != null) predicate = predicate.And(_ => _.kana == kana_eq);
			if (kana_ne != null) predicate = predicate.And(_ => _.kana != kana_ne);
			if (kana_lt != null) predicate = predicate.And(_ => kana_lt.CompareTo(_.kana) > 0);
			if (kana_gt != null) predicate = predicate.And(_ => kana_gt.CompareTo(_.kana) < 0);
			if (kana_le != null) predicate = predicate.And(_ => kana_le.CompareTo(_.kana) >= 0);
			if (kana_ge != null) predicate = predicate.And(_ => kana_ge.CompareTo(_.kana) <= 0);
			if (kana_in != null) predicate = predicate.And(_ => kana_in.Contains(_.kana));
			if (kana_ni != null) predicate = predicate.And(_ => !kana_ni.Contains(_.kana));
			#endregion
			#region name_abbrev
			if (name_abbrev_eq != null) predicate = predicate.And(_ => _.name_abbrev == name_abbrev_eq);
			if (name_abbrev_ne != null) predicate = predicate.And(_ => _.name_abbrev != name_abbrev_ne);
			if (name_abbrev_lt != null) predicate = predicate.And(_ => name_abbrev_lt.CompareTo(_.name_abbrev) > 0);
			if (name_abbrev_gt != null) predicate = predicate.And(_ => name_abbrev_gt.CompareTo(_.name_abbrev) < 0);
			if (name_abbrev_le != null) predicate = predicate.And(_ => name_abbrev_le.CompareTo(_.name_abbrev) >= 0);
			if (name_abbrev_ge != null) predicate = predicate.And(_ => name_abbrev_ge.CompareTo(_.name_abbrev) <= 0);
			if (name_abbrev_in != null) predicate = predicate.And(_ => name_abbrev_in.Contains(_.name_abbrev));
			if (name_abbrev_ni != null) predicate = predicate.And(_ => !name_abbrev_ni.Contains(_.name_abbrev));
			#endregion
			#region name_eng
			if (name_eng_eq != null) predicate = predicate.And(_ => _.name_eng == name_eng_eq);
			if (name_eng_ne != null) predicate = predicate.And(_ => _.name_eng != name_eng_ne);
			if (name_eng_lt != null) predicate = predicate.And(_ => name_eng_lt.CompareTo(_.name_eng) > 0);
			if (name_eng_gt != null) predicate = predicate.And(_ => name_eng_gt.CompareTo(_.name_eng) < 0);
			if (name_eng_le != null) predicate = predicate.And(_ => name_eng_le.CompareTo(_.name_eng) >= 0);
			if (name_eng_ge != null) predicate = predicate.And(_ => name_eng_ge.CompareTo(_.name_eng) <= 0);
			if (name_eng_in != null) predicate = predicate.And(_ => name_eng_in.Contains(_.name_eng));
			if (name_eng_ni != null) predicate = predicate.And(_ => !name_eng_ni.Contains(_.name_eng));
			#endregion
			#region name_eng_abbrev
			if (name_eng_abbrev_eq != null) predicate = predicate.And(_ => _.name_eng_abbrev == name_eng_abbrev_eq);
			if (name_eng_abbrev_ne != null) predicate = predicate.And(_ => _.name_eng_abbrev != name_eng_abbrev_ne);
			if (name_eng_abbrev_lt != null) predicate = predicate.And(_ => name_eng_abbrev_lt.CompareTo(_.name_eng_abbrev) > 0);
			if (name_eng_abbrev_gt != null) predicate = predicate.And(_ => name_eng_abbrev_gt.CompareTo(_.name_eng_abbrev) < 0);
			if (name_eng_abbrev_le != null) predicate = predicate.And(_ => name_eng_abbrev_le.CompareTo(_.name_eng_abbrev) >= 0);
			if (name_eng_abbrev_ge != null) predicate = predicate.And(_ => name_eng_abbrev_ge.CompareTo(_.name_eng_abbrev) <= 0);
			if (name_eng_abbrev_in != null) predicate = predicate.And(_ => name_eng_abbrev_in.Contains(_.name_eng_abbrev));
			if (name_eng_abbrev_ni != null) predicate = predicate.And(_ => !name_eng_abbrev_ni.Contains(_.name_eng_abbrev));
			#endregion
			#region created_at
			if (created_at_eq != null) predicate = predicate.And(_ => _.created_at == created_at_eq);
			if (created_at_ne != null) predicate = predicate.And(_ => _.created_at != created_at_ne);
			if (created_at_lt != null) predicate = predicate.And(_ => _.created_at < created_at_lt);
			if (created_at_gt != null) predicate = predicate.And(_ => _.created_at > created_at_gt);
			if (created_at_le != null) predicate = predicate.And(_ => _.created_at <= created_at_le);
			if (created_at_ge != null) predicate = predicate.And(_ => _.created_at >= created_at_ge);
			if (created_at_in != null) predicate = predicate.And(_ => created_at_in.Contains(_.created_at));
			if (created_at_ni != null) predicate = predicate.And(_ => !created_at_ni.Contains(_.created_at));
			#endregion
			#region created_by
			if (created_by_eq != null) predicate = predicate.And(_ => _.created_by == created_by_eq);
			if (created_by_ne != null) predicate = predicate.And(_ => _.created_by != created_by_ne);
			if (created_by_lt != null) predicate = predicate.And(_ => _.created_by < created_by_lt);
			if (created_by_gt != null) predicate = predicate.And(_ => _.created_by > created_by_gt);
			if (created_by_le != null) predicate = predicate.And(_ => _.created_by <= created_by_le);
			if (created_by_ge != null) predicate = predicate.And(_ => _.created_by >= created_by_ge);
			if (created_by_in != null) predicate = predicate.And(_ => created_by_in.Contains(_.created_by.Value));
			if (created_by_ni != null) predicate = predicate.And(_ => !created_by_ni.Contains(_.created_by.Value));
			if (created_by_isnull) predicate = predicate.And(_ => _.created_by == null);
			if (created_by_isnotnull) predicate = predicate.And(_ => _.created_by != null);
			#endregion
			#region modified_at
			if (modified_at_eq != null) predicate = predicate.And(_ => _.modified_at == modified_at_eq);
			if (modified_at_ne != null) predicate = predicate.And(_ => _.modified_at != modified_at_ne);
			if (modified_at_lt != null) predicate = predicate.And(_ => _.modified_at < modified_at_lt);
			if (modified_at_gt != null) predicate = predicate.And(_ => _.modified_at > modified_at_gt);
			if (modified_at_le != null) predicate = predicate.And(_ => _.modified_at <= modified_at_le);
			if (modified_at_ge != null) predicate = predicate.And(_ => _.modified_at >= modified_at_ge);
			if (modified_at_in != null) predicate = predicate.And(_ => modified_at_in.Contains(_.modified_at));
			if (modified_at_ni != null) predicate = predicate.And(_ => !modified_at_ni.Contains(_.modified_at));
			#endregion
			#region modified_by
			if (modified_by_eq != null) predicate = predicate.And(_ => _.modified_by == modified_by_eq);
			if (modified_by_ne != null) predicate = predicate.And(_ => _.modified_by != modified_by_ne);
			if (modified_by_lt != null) predicate = predicate.And(_ => _.modified_by < modified_by_lt);
			if (modified_by_gt != null) predicate = predicate.And(_ => _.modified_by > modified_by_gt);
			if (modified_by_le != null) predicate = predicate.And(_ => _.modified_by <= modified_by_le);
			if (modified_by_ge != null) predicate = predicate.And(_ => _.modified_by >= modified_by_ge);
			if (modified_by_in != null) predicate = predicate.And(_ => modified_by_in.Contains(_.modified_by.Value));
			if (modified_by_ni != null) predicate = predicate.And(_ => !modified_by_ni.Contains(_.modified_by.Value));
			if (modified_by_isnull) predicate = predicate.And(_ => _.modified_by == null);
			if (modified_by_isnotnull) predicate = predicate.And(_ => _.modified_by != null);
			#endregion
			#region row_version
			if (row_version_eq != null) predicate = predicate.And(_ => _.row_version == row_version_eq);
			if (row_version_ne != null) predicate = predicate.And(_ => _.row_version != row_version_ne);
			if (row_version_isnull) predicate = predicate.And(_ => _.row_version == null);
			if (row_version_isnotnull) predicate = predicate.And(_ => _.row_version != null);
			#endregion

			return predicate;
		}
		#endregion
	}
	#endregion
	#endregion
	#region 人名種別
	/// <summary>
	/// 人名種別
	/// </summary>
	[Table(Schema="Master", Name="PersonNameType"), DataContract]
	public partial class PersonNameType : TableBase<PersonNameType>, INotifyPropertyChanged
	{
		#region uid : int

		private int _uid;
		/// <summary>
		/// ユニークID
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull, Identity]
		public  int  uid
		{
			get { return _uid; }
			set
			{
				if (_uid != value)
				{
					BeforeuidChanged(value);
					_uid = value;
					AfteruidChanged();

					OnuidChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeuidChanged(int newValue);
		partial void AfteruidChanged();

		public const string NameOfuid = "uid";

		private static readonly PropertyChangedEventArgs _uidChangedEventArgs = new PropertyChangedEventArgs(NameOfuid);

		private void OnuidChanged()
		{
			OnPropertyChanged(_uidChangedEventArgs);
		}

		#endregion

		#endregion
		#region person_name_type_id : int

		private int _person_name_type_id;
		/// <summary>
		/// 人名種別ID
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull, PrimaryKey(Order = 1), System.ComponentModel.DataAnnotations.Required]
		public  int  person_name_type_id
		{
			get { return _person_name_type_id; }
			set
			{
				if (_person_name_type_id != value)
				{
					Beforeperson_name_type_idChanged(value);
					_person_name_type_id = value;
					Afterperson_name_type_idChanged();

					Onperson_name_type_idChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeperson_name_type_idChanged(int newValue);
		partial void Afterperson_name_type_idChanged();

		public const string NameOfperson_name_type_id = "person_name_type_id";

		private static readonly PropertyChangedEventArgs _person_name_type_idChangedEventArgs = new PropertyChangedEventArgs(NameOfperson_name_type_id);

		private void Onperson_name_type_idChanged()
		{
			OnPropertyChanged(_person_name_type_idChangedEventArgs);
		}

		#endregion

		#endregion
		#region name : string

		private string _name;
		/// <summary>
		/// 名称
		/// </summary>
		[Column(DbType="nvarchar(10)", DataType=DataType.NVarChar, Length=10), DataMember, NotNull, System.ComponentModel.DataAnnotations.Required]
		public  string  name
		{
			get { return _name; }
			set
			{
				if (_name != value)
				{
					BeforenameChanged(value);
					_name = value;
					AfternameChanged();

					OnnameChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforenameChanged(string newValue);
		partial void AfternameChanged();

		public const string NameOfname = "name";

		private static readonly PropertyChangedEventArgs _nameChangedEventArgs = new PropertyChangedEventArgs(NameOfname);

		private void OnnameChanged()
		{
			OnPropertyChanged(_nameChangedEventArgs);
		}

		#endregion

		#endregion
		#region description : string

		private string _description;
		/// <summary>
		/// 説明
		/// </summary>
		[Column(DbType="nvarchar(64)", DataType=DataType.NVarChar, Length=64), DataMember, NotNull]
		public  string  description
		{
			get { return _description; }
			set
			{
				if (_description != value)
				{
					BeforedescriptionChanged(value);
					_description = value;
					AfterdescriptionChanged();

					OndescriptionChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforedescriptionChanged(string newValue);
		partial void AfterdescriptionChanged();

		public const string NameOfdescription = "description";

		private static readonly PropertyChangedEventArgs _descriptionChangedEventArgs = new PropertyChangedEventArgs(NameOfdescription);

		private void OndescriptionChanged()
		{
			OnPropertyChanged(_descriptionChangedEventArgs);
		}

		#endregion

		#endregion
		#region display_order : int

		private int _display_order;
		/// <summary>
		/// 表示順
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull, System.ComponentModel.DataAnnotations.Required]
		public  int  display_order
		{
			get { return _display_order; }
			set
			{
				if (_display_order != value)
				{
					Beforedisplay_orderChanged(value);
					_display_order = value;
					Afterdisplay_orderChanged();

					Ondisplay_orderChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforedisplay_orderChanged(int newValue);
		partial void Afterdisplay_orderChanged();

		public const string NameOfdisplay_order = "display_order";

		private static readonly PropertyChangedEventArgs _display_orderChangedEventArgs = new PropertyChangedEventArgs(NameOfdisplay_order);

		private void Ondisplay_orderChanged()
		{
			OnPropertyChanged(_display_orderChangedEventArgs);
		}

		#endregion

		#endregion
		#region created_at : DateTime

		private DateTime _created_at;
		/// <summary>
		/// 作成日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, NotNull]
		public  DateTime  created_at
		{
			get { return _created_at; }
			set
			{
				if (_created_at != value)
				{
					Beforecreated_atChanged(value);
					_created_at = value;
					Aftercreated_atChanged();

					Oncreated_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecreated_atChanged(DateTime newValue);
		partial void Aftercreated_atChanged();

		public const string NameOfcreated_at = "created_at";

		private static readonly PropertyChangedEventArgs _created_atChangedEventArgs = new PropertyChangedEventArgs(NameOfcreated_at);

		private void Oncreated_atChanged()
		{
			OnPropertyChanged(_created_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region created_by : int?

		private int? _created_by;
		/// <summary>
		/// 作成者
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, Nullable]
		public  int?  created_by
		{
			get { return _created_by; }
			set
			{
				if (_created_by != value)
				{
					Beforecreated_byChanged(value);
					_created_by = value;
					Aftercreated_byChanged();

					Oncreated_byChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecreated_byChanged(int? newValue);
		partial void Aftercreated_byChanged();

		public const string NameOfcreated_by = "created_by";

		private static readonly PropertyChangedEventArgs _created_byChangedEventArgs = new PropertyChangedEventArgs(NameOfcreated_by);

		private void Oncreated_byChanged()
		{
			OnPropertyChanged(_created_byChangedEventArgs);
		}

		#endregion

		#endregion
		#region modified_at : DateTime

		private DateTime _modified_at;
		/// <summary>
		/// 更新日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, NotNull]
		public  DateTime  modified_at
		{
			get { return _modified_at; }
			set
			{
				if (_modified_at != value)
				{
					Beforemodified_atChanged(value);
					_modified_at = value;
					Aftermodified_atChanged();

					Onmodified_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforemodified_atChanged(DateTime newValue);
		partial void Aftermodified_atChanged();

		public const string NameOfmodified_at = "modified_at";

		private static readonly PropertyChangedEventArgs _modified_atChangedEventArgs = new PropertyChangedEventArgs(NameOfmodified_at);

		private void Onmodified_atChanged()
		{
			OnPropertyChanged(_modified_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region modified_by : int?

		private int? _modified_by;
		/// <summary>
		/// 更新者
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, Nullable]
		public  int?  modified_by
		{
			get { return _modified_by; }
			set
			{
				if (_modified_by != value)
				{
					Beforemodified_byChanged(value);
					_modified_by = value;
					Aftermodified_byChanged();

					Onmodified_byChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforemodified_byChanged(int? newValue);
		partial void Aftermodified_byChanged();

		public const string NameOfmodified_by = "modified_by";

		private static readonly PropertyChangedEventArgs _modified_byChangedEventArgs = new PropertyChangedEventArgs(NameOfmodified_by);

		private void Onmodified_byChanged()
		{
			OnPropertyChanged(_modified_byChangedEventArgs);
		}

		#endregion

		#endregion
		#region removed_at : DateTime?

		private DateTime? _removed_at;
		/// <summary>
		/// 削除日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, Nullable]
		public  DateTime?  removed_at
		{
			get { return _removed_at; }
			set
			{
				if (_removed_at != value)
				{
					Beforeremoved_atChanged(value);
					_removed_at = value;
					Afterremoved_atChanged();

					Onremoved_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeremoved_atChanged(DateTime? newValue);
		partial void Afterremoved_atChanged();

		public const string NameOfremoved_at = "removed_at";

		private static readonly PropertyChangedEventArgs _removed_atChangedEventArgs = new PropertyChangedEventArgs(NameOfremoved_at);

		private void Onremoved_atChanged()
		{
			OnPropertyChanged(_removed_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region row_version : byte[]

		private byte[] _row_version;
		/// <summary>
		/// 版
		/// </summary>
		[Column(DbType="timestamp", DataType=DataType.Timestamp, SkipOnInsert=true, SkipOnUpdate=true), DataMember, Nullable]
		public  byte[]  row_version
		{
			get { return _row_version; }
			set
			{
				if (_row_version != value)
				{
					Beforerow_versionChanged(value);
					_row_version = value;
					Afterrow_versionChanged();

					Onrow_versionChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforerow_versionChanged(byte[] newValue);
		partial void Afterrow_versionChanged();

		public const string NameOfrow_version = "row_version";

		private static readonly PropertyChangedEventArgs _row_versionChangedEventArgs = new PropertyChangedEventArgs(NameOfrow_version);

		private void Onrow_versionChanged()
		{
			OnPropertyChanged(_row_versionChangedEventArgs);
		}

		#endregion

		#endregion

		#region enum用アクセスラッパー
		#endregion

		#region Constructor

		public PersonNameType()
		{
			#region フィールド初期化
			uid = default(int);
			person_name_type_id = 0;
			name = "";
			description = "";
			display_order = 0;
			created_at = DateTime.UtcNow;
			created_by = null;
			modified_at = DateTime.UtcNow;
			modified_by = null;
			removed_at = null;
			row_version = default(byte[]);
			#endregion
		}

		#endregion

		#region Association


		#endregion

		#region INotifyPropertyChanged support

		[field : NonSerialized]
		public virtual event PropertyChangedEventHandler PropertyChanged;

		protected void OnPropertyChanged(string propertyName)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		protected void OnPropertyChanged(PropertyChangedEventArgs arg)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, arg);
			}
		}

		#endregion

	}
	#region 人名種別条件
	/// <summary>
	/// 人名種別条件
	/// </summary>
	[DataContract]
	public partial class PersonNameTypeCondition : PersonNameTypeConditionBase
	{
	}

	/// <summary>
	/// 人名種別条件ベース
	/// </summary>
	[DataContract]
	public class PersonNameTypeConditionBase : ConditionBase<PersonNameType>
	{
		#region properties
		#region uid
		/// <summary>
		/// uid_eqと等しい
		/// </summary>
		[DataMember] public int? uid_eq { get; set; }
		/// <summary>
		/// uid_neと等しくない
		/// </summary>
		[DataMember] public int? uid_ne { get; set; }
		/// <summary>
		/// uid_ltより小さい
		/// </summary>
		[DataMember] public int? uid_lt { get; set; }
		/// <summary>
		/// uid_gtより大きい
		/// </summary>
		[DataMember] public int? uid_gt { get; set; }
		/// <summary>
		/// uid_le以下
		/// </summary>
		[DataMember] public int? uid_le { get; set; }
		/// <summary>
		/// uid_ge以上
		/// </summary>
		[DataMember] public int? uid_ge { get; set; }
		/// <summary>
		/// uid_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> uid_in { get; set; }
		/// <summary>
		/// uid_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> uid_ni { get; set; }
		/// <summary>
		/// uid_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? uid_between { get; set; }
		#endregion
		#region person_name_type_id
		/// <summary>
		/// person_name_type_id_eqと等しい
		/// </summary>
		[DataMember] public int? person_name_type_id_eq { get; set; }
		/// <summary>
		/// person_name_type_id_neと等しくない
		/// </summary>
		[DataMember] public int? person_name_type_id_ne { get; set; }
		/// <summary>
		/// person_name_type_id_ltより小さい
		/// </summary>
		[DataMember] public int? person_name_type_id_lt { get; set; }
		/// <summary>
		/// person_name_type_id_gtより大きい
		/// </summary>
		[DataMember] public int? person_name_type_id_gt { get; set; }
		/// <summary>
		/// person_name_type_id_le以下
		/// </summary>
		[DataMember] public int? person_name_type_id_le { get; set; }
		/// <summary>
		/// person_name_type_id_ge以上
		/// </summary>
		[DataMember] public int? person_name_type_id_ge { get; set; }
		/// <summary>
		/// person_name_type_id_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> person_name_type_id_in { get; set; }
		/// <summary>
		/// person_name_type_id_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> person_name_type_id_ni { get; set; }
		/// <summary>
		/// person_name_type_id_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? person_name_type_id_between { get; set; }
		#endregion
		#region name
		/// <summary>
		/// name_eqと等しい
		/// </summary>
		[DataMember] public string name_eq { get; set; }
		/// <summary>
		/// name_neと等しくない
		/// </summary>
		[DataMember] public string name_ne { get; set; }
		/// <summary>
		/// name_ltより小さい
		/// </summary>
		[DataMember] public string name_lt { get; set; }
		/// <summary>
		/// name_gtより大きい
		/// </summary>
		[DataMember] public string name_gt { get; set; }
		/// <summary>
		/// name_le以下
		/// </summary>
		[DataMember] public string name_le { get; set; }
		/// <summary>
		/// name_ge以上
		/// </summary>
		[DataMember] public string name_ge { get; set; }
		/// <summary>
		/// name_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> name_in { get; set; }
		/// <summary>
		/// name_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> name_ni { get; set; }
		/// <summary>
		/// name_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? name_between { get; set; }
		/// <summary>
		/// name_likeと部分一致する
		/// </summary>
		[DataMember] public string name_like { get; set; }
		#endregion
		#region description
		/// <summary>
		/// description_eqと等しい
		/// </summary>
		[DataMember] public string description_eq { get; set; }
		/// <summary>
		/// description_neと等しくない
		/// </summary>
		[DataMember] public string description_ne { get; set; }
		/// <summary>
		/// description_ltより小さい
		/// </summary>
		[DataMember] public string description_lt { get; set; }
		/// <summary>
		/// description_gtより大きい
		/// </summary>
		[DataMember] public string description_gt { get; set; }
		/// <summary>
		/// description_le以下
		/// </summary>
		[DataMember] public string description_le { get; set; }
		/// <summary>
		/// description_ge以上
		/// </summary>
		[DataMember] public string description_ge { get; set; }
		/// <summary>
		/// description_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> description_in { get; set; }
		/// <summary>
		/// description_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> description_ni { get; set; }
		/// <summary>
		/// description_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? description_between { get; set; }
		/// <summary>
		/// description_likeと部分一致する
		/// </summary>
		[DataMember] public string description_like { get; set; }
		#endregion
		#region display_order
		/// <summary>
		/// display_order_eqと等しい
		/// </summary>
		[DataMember] public int? display_order_eq { get; set; }
		/// <summary>
		/// display_order_neと等しくない
		/// </summary>
		[DataMember] public int? display_order_ne { get; set; }
		/// <summary>
		/// display_order_ltより小さい
		/// </summary>
		[DataMember] public int? display_order_lt { get; set; }
		/// <summary>
		/// display_order_gtより大きい
		/// </summary>
		[DataMember] public int? display_order_gt { get; set; }
		/// <summary>
		/// display_order_le以下
		/// </summary>
		[DataMember] public int? display_order_le { get; set; }
		/// <summary>
		/// display_order_ge以上
		/// </summary>
		[DataMember] public int? display_order_ge { get; set; }
		/// <summary>
		/// display_order_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> display_order_in { get; set; }
		/// <summary>
		/// display_order_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> display_order_ni { get; set; }
		/// <summary>
		/// display_order_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? display_order_between { get; set; }
		#endregion
		#region created_at
		/// <summary>
		/// created_at_eqと等しい
		/// </summary>
		[DataMember] public DateTime? created_at_eq { get; set; }
		/// <summary>
		/// created_at_neと等しくない
		/// </summary>
		[DataMember] public DateTime? created_at_ne { get; set; }
		/// <summary>
		/// created_at_ltより小さい
		/// </summary>
		[DataMember] public DateTime? created_at_lt { get; set; }
		/// <summary>
		/// created_at_gtより大きい
		/// </summary>
		[DataMember] public DateTime? created_at_gt { get; set; }
		/// <summary>
		/// created_at_le以下
		/// </summary>
		[DataMember] public DateTime? created_at_le { get; set; }
		/// <summary>
		/// created_at_ge以上
		/// </summary>
		[DataMember] public DateTime? created_at_ge { get; set; }
		/// <summary>
		/// created_at_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> created_at_in { get; set; }
		/// <summary>
		/// created_at_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> created_at_ni { get; set; }
		/// <summary>
		/// created_at_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? created_at_between { get; set; }
		#endregion
		#region created_by
		/// <summary>
		/// created_by_eqと等しい
		/// </summary>
		[DataMember] public int? created_by_eq { get; set; }
		/// <summary>
		/// created_by_neと等しくない
		/// </summary>
		[DataMember] public int? created_by_ne { get; set; }
		/// <summary>
		/// created_by_ltより小さい
		/// </summary>
		[DataMember] public int? created_by_lt { get; set; }
		/// <summary>
		/// created_by_gtより大きい
		/// </summary>
		[DataMember] public int? created_by_gt { get; set; }
		/// <summary>
		/// created_by_le以下
		/// </summary>
		[DataMember] public int? created_by_le { get; set; }
		/// <summary>
		/// created_by_ge以上
		/// </summary>
		[DataMember] public int? created_by_ge { get; set; }
		/// <summary>
		/// created_by_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> created_by_in { get; set; }
		/// <summary>
		/// created_by_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> created_by_ni { get; set; }
		/// <summary>
		/// created_by_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? created_by_between { get; set; }
		/// <summary>
		/// created_byがNULLか
		/// </summary>
		[DataMember] public bool created_by_isnull { get; set; } =  false ;
		/// <summary>
		/// created_byがNULLではないか
		/// </summary>
		[DataMember] public bool created_by_isnotnull { get; set; } = false;
		#endregion
		#region modified_at
		/// <summary>
		/// modified_at_eqと等しい
		/// </summary>
		[DataMember] public DateTime? modified_at_eq { get; set; }
		/// <summary>
		/// modified_at_neと等しくない
		/// </summary>
		[DataMember] public DateTime? modified_at_ne { get; set; }
		/// <summary>
		/// modified_at_ltより小さい
		/// </summary>
		[DataMember] public DateTime? modified_at_lt { get; set; }
		/// <summary>
		/// modified_at_gtより大きい
		/// </summary>
		[DataMember] public DateTime? modified_at_gt { get; set; }
		/// <summary>
		/// modified_at_le以下
		/// </summary>
		[DataMember] public DateTime? modified_at_le { get; set; }
		/// <summary>
		/// modified_at_ge以上
		/// </summary>
		[DataMember] public DateTime? modified_at_ge { get; set; }
		/// <summary>
		/// modified_at_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> modified_at_in { get; set; }
		/// <summary>
		/// modified_at_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> modified_at_ni { get; set; }
		/// <summary>
		/// modified_at_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? modified_at_between { get; set; }
		#endregion
		#region modified_by
		/// <summary>
		/// modified_by_eqと等しい
		/// </summary>
		[DataMember] public int? modified_by_eq { get; set; }
		/// <summary>
		/// modified_by_neと等しくない
		/// </summary>
		[DataMember] public int? modified_by_ne { get; set; }
		/// <summary>
		/// modified_by_ltより小さい
		/// </summary>
		[DataMember] public int? modified_by_lt { get; set; }
		/// <summary>
		/// modified_by_gtより大きい
		/// </summary>
		[DataMember] public int? modified_by_gt { get; set; }
		/// <summary>
		/// modified_by_le以下
		/// </summary>
		[DataMember] public int? modified_by_le { get; set; }
		/// <summary>
		/// modified_by_ge以上
		/// </summary>
		[DataMember] public int? modified_by_ge { get; set; }
		/// <summary>
		/// modified_by_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> modified_by_in { get; set; }
		/// <summary>
		/// modified_by_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> modified_by_ni { get; set; }
		/// <summary>
		/// modified_by_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? modified_by_between { get; set; }
		/// <summary>
		/// modified_byがNULLか
		/// </summary>
		[DataMember] public bool modified_by_isnull { get; set; } =  false ;
		/// <summary>
		/// modified_byがNULLではないか
		/// </summary>
		[DataMember] public bool modified_by_isnotnull { get; set; } = false;
		#endregion
		#region removed_at
		/// <summary>
		/// removed_at_eqと等しい
		/// </summary>
		[DataMember] public DateTime? removed_at_eq { get; set; }
		/// <summary>
		/// removed_at_neと等しくない
		/// </summary>
		[DataMember] public DateTime? removed_at_ne { get; set; }
		/// <summary>
		/// removed_at_ltより小さい
		/// </summary>
		[DataMember] public DateTime? removed_at_lt { get; set; }
		/// <summary>
		/// removed_at_gtより大きい
		/// </summary>
		[DataMember] public DateTime? removed_at_gt { get; set; }
		/// <summary>
		/// removed_at_le以下
		/// </summary>
		[DataMember] public DateTime? removed_at_le { get; set; }
		/// <summary>
		/// removed_at_ge以上
		/// </summary>
		[DataMember] public DateTime? removed_at_ge { get; set; }
		/// <summary>
		/// removed_at_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> removed_at_in { get; set; }
		/// <summary>
		/// removed_at_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> removed_at_ni { get; set; }
		/// <summary>
		/// removed_at_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? removed_at_between { get; set; }
		/// <summary>
		/// removed_atがNULLか
		/// </summary>
		[DataMember] public bool removed_at_isnull { get; set; } =  true ;
		/// <summary>
		/// removed_atがNULLではないか
		/// </summary>
		[DataMember] public bool removed_at_isnotnull { get; set; } = false;
		#endregion
		#region row_version
		/// <summary>
		/// row_version_eqと等しい
		/// </summary>
		[DataMember] public byte[] row_version_eq { get; set; }
		/// <summary>
		/// row_version_neと等しくない
		/// </summary>
		[DataMember] public byte[] row_version_ne { get; set; }
		/// <summary>
		/// row_versionがNULLか
		/// </summary>
		[DataMember] public bool row_version_isnull { get; set; } =  false ;
		/// <summary>
		/// row_versionがNULLではないか
		/// </summary>
		[DataMember] public bool row_version_isnotnull { get; set; } = false;
		#endregion
		#endregion

		#region override
		override public Expression<Func<PersonNameType, bool>> CreatePredicate()
		{
			var predicate = base.CreatePredicate();

			#region uid
			if (uid_eq != null) predicate = predicate.And(_ => _.uid == uid_eq);
			if (uid_ne != null) predicate = predicate.And(_ => _.uid != uid_ne);
			if (uid_lt != null) predicate = predicate.And(_ => _.uid < uid_lt);
			if (uid_gt != null) predicate = predicate.And(_ => _.uid > uid_gt);
			if (uid_le != null) predicate = predicate.And(_ => _.uid <= uid_le);
			if (uid_ge != null) predicate = predicate.And(_ => _.uid >= uid_ge);
			if (uid_in != null) predicate = predicate.And(_ => uid_in.Contains(_.uid));
			if (uid_ni != null) predicate = predicate.And(_ => !uid_ni.Contains(_.uid));
			#endregion
			#region person_name_type_id
			if (person_name_type_id_eq != null) predicate = predicate.And(_ => _.person_name_type_id == person_name_type_id_eq);
			if (person_name_type_id_ne != null) predicate = predicate.And(_ => _.person_name_type_id != person_name_type_id_ne);
			if (person_name_type_id_lt != null) predicate = predicate.And(_ => _.person_name_type_id < person_name_type_id_lt);
			if (person_name_type_id_gt != null) predicate = predicate.And(_ => _.person_name_type_id > person_name_type_id_gt);
			if (person_name_type_id_le != null) predicate = predicate.And(_ => _.person_name_type_id <= person_name_type_id_le);
			if (person_name_type_id_ge != null) predicate = predicate.And(_ => _.person_name_type_id >= person_name_type_id_ge);
			if (person_name_type_id_in != null) predicate = predicate.And(_ => person_name_type_id_in.Contains(_.person_name_type_id));
			if (person_name_type_id_ni != null) predicate = predicate.And(_ => !person_name_type_id_ni.Contains(_.person_name_type_id));
			#endregion
			#region name
			if (name_eq != null) predicate = predicate.And(_ => _.name == name_eq);
			if (name_ne != null) predicate = predicate.And(_ => _.name != name_ne);
			if (name_lt != null) predicate = predicate.And(_ => name_lt.CompareTo(_.name) > 0);
			if (name_gt != null) predicate = predicate.And(_ => name_gt.CompareTo(_.name) < 0);
			if (name_le != null) predicate = predicate.And(_ => name_le.CompareTo(_.name) >= 0);
			if (name_ge != null) predicate = predicate.And(_ => name_ge.CompareTo(_.name) <= 0);
			if (name_in != null) predicate = predicate.And(_ => name_in.Contains(_.name));
			if (name_ni != null) predicate = predicate.And(_ => !name_ni.Contains(_.name));
			#endregion
			#region description
			if (description_eq != null) predicate = predicate.And(_ => _.description == description_eq);
			if (description_ne != null) predicate = predicate.And(_ => _.description != description_ne);
			if (description_lt != null) predicate = predicate.And(_ => description_lt.CompareTo(_.description) > 0);
			if (description_gt != null) predicate = predicate.And(_ => description_gt.CompareTo(_.description) < 0);
			if (description_le != null) predicate = predicate.And(_ => description_le.CompareTo(_.description) >= 0);
			if (description_ge != null) predicate = predicate.And(_ => description_ge.CompareTo(_.description) <= 0);
			if (description_in != null) predicate = predicate.And(_ => description_in.Contains(_.description));
			if (description_ni != null) predicate = predicate.And(_ => !description_ni.Contains(_.description));
			#endregion
			#region display_order
			if (display_order_eq != null) predicate = predicate.And(_ => _.display_order == display_order_eq);
			if (display_order_ne != null) predicate = predicate.And(_ => _.display_order != display_order_ne);
			if (display_order_lt != null) predicate = predicate.And(_ => _.display_order < display_order_lt);
			if (display_order_gt != null) predicate = predicate.And(_ => _.display_order > display_order_gt);
			if (display_order_le != null) predicate = predicate.And(_ => _.display_order <= display_order_le);
			if (display_order_ge != null) predicate = predicate.And(_ => _.display_order >= display_order_ge);
			if (display_order_in != null) predicate = predicate.And(_ => display_order_in.Contains(_.display_order));
			if (display_order_ni != null) predicate = predicate.And(_ => !display_order_ni.Contains(_.display_order));
			#endregion
			#region created_at
			if (created_at_eq != null) predicate = predicate.And(_ => _.created_at == created_at_eq);
			if (created_at_ne != null) predicate = predicate.And(_ => _.created_at != created_at_ne);
			if (created_at_lt != null) predicate = predicate.And(_ => _.created_at < created_at_lt);
			if (created_at_gt != null) predicate = predicate.And(_ => _.created_at > created_at_gt);
			if (created_at_le != null) predicate = predicate.And(_ => _.created_at <= created_at_le);
			if (created_at_ge != null) predicate = predicate.And(_ => _.created_at >= created_at_ge);
			if (created_at_in != null) predicate = predicate.And(_ => created_at_in.Contains(_.created_at));
			if (created_at_ni != null) predicate = predicate.And(_ => !created_at_ni.Contains(_.created_at));
			#endregion
			#region created_by
			if (created_by_eq != null) predicate = predicate.And(_ => _.created_by == created_by_eq);
			if (created_by_ne != null) predicate = predicate.And(_ => _.created_by != created_by_ne);
			if (created_by_lt != null) predicate = predicate.And(_ => _.created_by < created_by_lt);
			if (created_by_gt != null) predicate = predicate.And(_ => _.created_by > created_by_gt);
			if (created_by_le != null) predicate = predicate.And(_ => _.created_by <= created_by_le);
			if (created_by_ge != null) predicate = predicate.And(_ => _.created_by >= created_by_ge);
			if (created_by_in != null) predicate = predicate.And(_ => created_by_in.Contains(_.created_by.Value));
			if (created_by_ni != null) predicate = predicate.And(_ => !created_by_ni.Contains(_.created_by.Value));
			if (created_by_isnull) predicate = predicate.And(_ => _.created_by == null);
			if (created_by_isnotnull) predicate = predicate.And(_ => _.created_by != null);
			#endregion
			#region modified_at
			if (modified_at_eq != null) predicate = predicate.And(_ => _.modified_at == modified_at_eq);
			if (modified_at_ne != null) predicate = predicate.And(_ => _.modified_at != modified_at_ne);
			if (modified_at_lt != null) predicate = predicate.And(_ => _.modified_at < modified_at_lt);
			if (modified_at_gt != null) predicate = predicate.And(_ => _.modified_at > modified_at_gt);
			if (modified_at_le != null) predicate = predicate.And(_ => _.modified_at <= modified_at_le);
			if (modified_at_ge != null) predicate = predicate.And(_ => _.modified_at >= modified_at_ge);
			if (modified_at_in != null) predicate = predicate.And(_ => modified_at_in.Contains(_.modified_at));
			if (modified_at_ni != null) predicate = predicate.And(_ => !modified_at_ni.Contains(_.modified_at));
			#endregion
			#region modified_by
			if (modified_by_eq != null) predicate = predicate.And(_ => _.modified_by == modified_by_eq);
			if (modified_by_ne != null) predicate = predicate.And(_ => _.modified_by != modified_by_ne);
			if (modified_by_lt != null) predicate = predicate.And(_ => _.modified_by < modified_by_lt);
			if (modified_by_gt != null) predicate = predicate.And(_ => _.modified_by > modified_by_gt);
			if (modified_by_le != null) predicate = predicate.And(_ => _.modified_by <= modified_by_le);
			if (modified_by_ge != null) predicate = predicate.And(_ => _.modified_by >= modified_by_ge);
			if (modified_by_in != null) predicate = predicate.And(_ => modified_by_in.Contains(_.modified_by.Value));
			if (modified_by_ni != null) predicate = predicate.And(_ => !modified_by_ni.Contains(_.modified_by.Value));
			if (modified_by_isnull) predicate = predicate.And(_ => _.modified_by == null);
			if (modified_by_isnotnull) predicate = predicate.And(_ => _.modified_by != null);
			#endregion
			#region removed_at
			if (removed_at_eq != null) predicate = predicate.And(_ => _.removed_at == removed_at_eq);
			if (removed_at_ne != null) predicate = predicate.And(_ => _.removed_at != removed_at_ne);
			if (removed_at_lt != null) predicate = predicate.And(_ => _.removed_at < removed_at_lt);
			if (removed_at_gt != null) predicate = predicate.And(_ => _.removed_at > removed_at_gt);
			if (removed_at_le != null) predicate = predicate.And(_ => _.removed_at <= removed_at_le);
			if (removed_at_ge != null) predicate = predicate.And(_ => _.removed_at >= removed_at_ge);
			if (removed_at_in != null) predicate = predicate.And(_ => removed_at_in.Contains(_.removed_at.Value));
			if (removed_at_ni != null) predicate = predicate.And(_ => !removed_at_ni.Contains(_.removed_at.Value));
			if (removed_at_isnull) predicate = predicate.And(_ => _.removed_at == null);
			if (removed_at_isnotnull) predicate = predicate.And(_ => _.removed_at != null);
			#endregion
			#region row_version
			if (row_version_eq != null) predicate = predicate.And(_ => _.row_version == row_version_eq);
			if (row_version_ne != null) predicate = predicate.And(_ => _.row_version != row_version_ne);
			if (row_version_isnull) predicate = predicate.And(_ => _.row_version == null);
			if (row_version_isnotnull) predicate = predicate.And(_ => _.row_version != null);
			#endregion

			return predicate;
		}
		#endregion
	}
	#endregion
	#endregion
	#region 住所
	/// <summary>
	/// 住所
	/// </summary>
	[Table(Schema="Common", Name="Address"), DataContract]
	public partial class Address : TableBase<Address>, INotifyPropertyChanged
	{
		#region uid : int

		private int _uid;
		/// <summary>
		/// ユニークID
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull, Identity]
		public  int  uid
		{
			get { return _uid; }
			set
			{
				if (_uid != value)
				{
					BeforeuidChanged(value);
					_uid = value;
					AfteruidChanged();

					OnuidChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeuidChanged(int newValue);
		partial void AfteruidChanged();

		public const string NameOfuid = "uid";

		private static readonly PropertyChangedEventArgs _uidChangedEventArgs = new PropertyChangedEventArgs(NameOfuid);

		private void OnuidChanged()
		{
			OnPropertyChanged(_uidChangedEventArgs);
		}

		#endregion

		#endregion
		#region user_type : int

		private int _user_type;
		/// <summary>
		/// 利用者種別
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull, PrimaryKey(Order = 1), System.ComponentModel.DataAnnotations.Required]
		public  int  user_type
		{
			get { return _user_type; }
			set
			{
				if (_user_type != value)
				{
					Beforeuser_typeChanged(value);
					_user_type = value;
					Afteruser_typeChanged();

					Onuser_typeChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeuser_typeChanged(int newValue);
		partial void Afteruser_typeChanged();

		public const string NameOfuser_type = "user_type";

		private static readonly PropertyChangedEventArgs _user_typeChangedEventArgs = new PropertyChangedEventArgs(NameOfuser_type);

		private void Onuser_typeChanged()
		{
			OnPropertyChanged(_user_typeChangedEventArgs);
		}

		#endregion

		#endregion
		#region generic_user_no : string

		private string _generic_user_no;
		/// <summary>
		/// 利用者番号
		/// </summary>
		[Column(DbType="varchar(16)", DataType=DataType.VarChar, Length=16), DataMember, NotNull, PrimaryKey(Order = 2), System.ComponentModel.DataAnnotations.Required]
		public  string  generic_user_no
		{
			get { return _generic_user_no; }
			set
			{
				if (_generic_user_no != value)
				{
					Beforegeneric_user_noChanged(value);
					_generic_user_no = value;
					Aftergeneric_user_noChanged();

					Ongeneric_user_noChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforegeneric_user_noChanged(string newValue);
		partial void Aftergeneric_user_noChanged();

		public const string NameOfgeneric_user_no = "generic_user_no";

		private static readonly PropertyChangedEventArgs _generic_user_noChangedEventArgs = new PropertyChangedEventArgs(NameOfgeneric_user_no);

		private void Ongeneric_user_noChanged()
		{
			OnPropertyChanged(_generic_user_noChangedEventArgs);
		}

		#endregion

		#endregion
		#region seq : int

		private int _seq;
		/// <summary>
		/// 連番
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull, PrimaryKey(Order = 3), System.ComponentModel.DataAnnotations.Required]
		public  int  seq
		{
			get { return _seq; }
			set
			{
				if (_seq != value)
				{
					BeforeseqChanged(value);
					_seq = value;
					AfterseqChanged();

					OnseqChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeseqChanged(int newValue);
		partial void AfterseqChanged();

		public const string NameOfseq = "seq";

		private static readonly PropertyChangedEventArgs _seqChangedEventArgs = new PropertyChangedEventArgs(NameOfseq);

		private void OnseqChanged()
		{
			OnPropertyChanged(_seqChangedEventArgs);
		}

		#endregion

		#endregion
		#region address_type_id : int

		private int _address_type_id;
		/// <summary>
		/// 住所種別
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull, System.ComponentModel.DataAnnotations.Required]
		public  int  address_type_id
		{
			get { return _address_type_id; }
			set
			{
				if (_address_type_id != value)
				{
					Beforeaddress_type_idChanged(value);
					_address_type_id = value;
					Afteraddress_type_idChanged();

					Onaddress_type_idChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeaddress_type_idChanged(int newValue);
		partial void Afteraddress_type_idChanged();

		public const string NameOfaddress_type_id = "address_type_id";

		private static readonly PropertyChangedEventArgs _address_type_idChangedEventArgs = new PropertyChangedEventArgs(NameOfaddress_type_id);

		private void Onaddress_type_idChanged()
		{
			OnPropertyChanged(_address_type_idChangedEventArgs);
		}

		#endregion

		#endregion
		#region postal_code : string

		private string _postal_code;
		/// <summary>
		/// 郵便番号
		/// </summary>
		[Column(DbType="varchar(7)", DataType=DataType.VarChar, Length=7), DataMember, NotNull, System.ComponentModel.DataAnnotations.Required]
		public  string  postal_code
		{
			get { return _postal_code; }
			set
			{
				if (_postal_code != value)
				{
					Beforepostal_codeChanged(value);
					_postal_code = value;
					Afterpostal_codeChanged();

					Onpostal_codeChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforepostal_codeChanged(string newValue);
		partial void Afterpostal_codeChanged();

		public const string NameOfpostal_code = "postal_code";

		private static readonly PropertyChangedEventArgs _postal_codeChangedEventArgs = new PropertyChangedEventArgs(NameOfpostal_code);

		private void Onpostal_codeChanged()
		{
			OnPropertyChanged(_postal_codeChangedEventArgs);
		}

		#endregion

		#endregion
		#region prefecture_code : int

		private int _prefecture_code;
		/// <summary>
		/// 都道府県
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull, System.ComponentModel.DataAnnotations.Required]
		public  int  prefecture_code
		{
			get { return _prefecture_code; }
			set
			{
				if (_prefecture_code != value)
				{
					Beforeprefecture_codeChanged(value);
					_prefecture_code = value;
					Afterprefecture_codeChanged();

					Onprefecture_codeChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeprefecture_codeChanged(int newValue);
		partial void Afterprefecture_codeChanged();

		public const string NameOfprefecture_code = "prefecture_code";

		private static readonly PropertyChangedEventArgs _prefecture_codeChangedEventArgs = new PropertyChangedEventArgs(NameOfprefecture_code);

		private void Onprefecture_codeChanged()
		{
			OnPropertyChanged(_prefecture_codeChangedEventArgs);
		}

		#endregion

		#endregion
		#region address1 : string

		private string _address1;
		/// <summary>
		/// 住所1
		/// </summary>
		[Column(DbType="nvarchar(32)", DataType=DataType.NVarChar, Length=32), DataMember, NotNull, System.ComponentModel.DataAnnotations.Required]
		public  string  address1
		{
			get { return _address1; }
			set
			{
				if (_address1 != value)
				{
					Beforeaddress1Changed(value);
					_address1 = value;
					Afteraddress1Changed();

					Onaddress1Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeaddress1Changed(string newValue);
		partial void Afteraddress1Changed();

		public const string NameOfaddress1 = "address1";

		private static readonly PropertyChangedEventArgs _address1ChangedEventArgs = new PropertyChangedEventArgs(NameOfaddress1);

		private void Onaddress1Changed()
		{
			OnPropertyChanged(_address1ChangedEventArgs);
		}

		#endregion

		#endregion
		#region address2 : string

		private string _address2;
		/// <summary>
		/// 住所2
		/// </summary>
		[Column(DbType="nvarchar(32)", DataType=DataType.NVarChar, Length=32), DataMember, NotNull]
		public  string  address2
		{
			get { return _address2; }
			set
			{
				if (_address2 != value)
				{
					Beforeaddress2Changed(value);
					_address2 = value;
					Afteraddress2Changed();

					Onaddress2Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeaddress2Changed(string newValue);
		partial void Afteraddress2Changed();

		public const string NameOfaddress2 = "address2";

		private static readonly PropertyChangedEventArgs _address2ChangedEventArgs = new PropertyChangedEventArgs(NameOfaddress2);

		private void Onaddress2Changed()
		{
			OnPropertyChanged(_address2ChangedEventArgs);
		}

		#endregion

		#endregion
		#region address3 : string

		private string _address3;
		/// <summary>
		/// 住所3
		/// </summary>
		[Column(DbType="nvarchar(32)", DataType=DataType.NVarChar, Length=32), DataMember, NotNull]
		public  string  address3
		{
			get { return _address3; }
			set
			{
				if (_address3 != value)
				{
					Beforeaddress3Changed(value);
					_address3 = value;
					Afteraddress3Changed();

					Onaddress3Changed();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeaddress3Changed(string newValue);
		partial void Afteraddress3Changed();

		public const string NameOfaddress3 = "address3";

		private static readonly PropertyChangedEventArgs _address3ChangedEventArgs = new PropertyChangedEventArgs(NameOfaddress3);

		private void Onaddress3Changed()
		{
			OnPropertyChanged(_address3ChangedEventArgs);
		}

		#endregion

		#endregion
		#region latitude : decimal?

		private decimal? _latitude;
		/// <summary>
		/// 緯度
		/// </summary>
		[Column(DbType="decimal(11,8)", DataType=DataType.Decimal, Precision=11, Scale=8), DataMember, Nullable]
		public  decimal?  latitude
		{
			get { return _latitude; }
			set
			{
				if (_latitude != value)
				{
					BeforelatitudeChanged(value);
					_latitude = value;
					AfterlatitudeChanged();

					OnlatitudeChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforelatitudeChanged(decimal? newValue);
		partial void AfterlatitudeChanged();

		public const string NameOflatitude = "latitude";

		private static readonly PropertyChangedEventArgs _latitudeChangedEventArgs = new PropertyChangedEventArgs(NameOflatitude);

		private void OnlatitudeChanged()
		{
			OnPropertyChanged(_latitudeChangedEventArgs);
		}

		#endregion

		#endregion
		#region longitude : decimal?

		private decimal? _longitude;
		/// <summary>
		/// 経度
		/// </summary>
		[Column(DbType="decimal(11,8)", DataType=DataType.Decimal, Precision=11, Scale=8), DataMember, Nullable]
		public  decimal?  longitude
		{
			get { return _longitude; }
			set
			{
				if (_longitude != value)
				{
					BeforelongitudeChanged(value);
					_longitude = value;
					AfterlongitudeChanged();

					OnlongitudeChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforelongitudeChanged(decimal? newValue);
		partial void AfterlongitudeChanged();

		public const string NameOflongitude = "longitude";

		private static readonly PropertyChangedEventArgs _longitudeChangedEventArgs = new PropertyChangedEventArgs(NameOflongitude);

		private void OnlongitudeChanged()
		{
			OnPropertyChanged(_longitudeChangedEventArgs);
		}

		#endregion

		#endregion
		#region enter_date : DateTime?

		private DateTime? _enter_date;
		/// <summary>
		/// 転入日
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, Nullable]
		public  DateTime?  enter_date
		{
			get { return _enter_date; }
			set
			{
				if (_enter_date != value)
				{
					Beforeenter_dateChanged(value);
					_enter_date = value;
					Afterenter_dateChanged();

					Onenter_dateChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeenter_dateChanged(DateTime? newValue);
		partial void Afterenter_dateChanged();

		public const string NameOfenter_date = "enter_date";

		private static readonly PropertyChangedEventArgs _enter_dateChangedEventArgs = new PropertyChangedEventArgs(NameOfenter_date);

		private void Onenter_dateChanged()
		{
			OnPropertyChanged(_enter_dateChangedEventArgs);
		}

		#endregion

		#endregion
		#region leave_date : DateTime?

		private DateTime? _leave_date;
		/// <summary>
		/// 転出日
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, Nullable]
		public  DateTime?  leave_date
		{
			get { return _leave_date; }
			set
			{
				if (_leave_date != value)
				{
					Beforeleave_dateChanged(value);
					_leave_date = value;
					Afterleave_dateChanged();

					Onleave_dateChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeleave_dateChanged(DateTime? newValue);
		partial void Afterleave_dateChanged();

		public const string NameOfleave_date = "leave_date";

		private static readonly PropertyChangedEventArgs _leave_dateChangedEventArgs = new PropertyChangedEventArgs(NameOfleave_date);

		private void Onleave_dateChanged()
		{
			OnPropertyChanged(_leave_dateChangedEventArgs);
		}

		#endregion

		#endregion
		#region created_at : DateTime

		private DateTime _created_at;
		/// <summary>
		/// 作成日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, NotNull]
		public  DateTime  created_at
		{
			get { return _created_at; }
			set
			{
				if (_created_at != value)
				{
					Beforecreated_atChanged(value);
					_created_at = value;
					Aftercreated_atChanged();

					Oncreated_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecreated_atChanged(DateTime newValue);
		partial void Aftercreated_atChanged();

		public const string NameOfcreated_at = "created_at";

		private static readonly PropertyChangedEventArgs _created_atChangedEventArgs = new PropertyChangedEventArgs(NameOfcreated_at);

		private void Oncreated_atChanged()
		{
			OnPropertyChanged(_created_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region created_by : int?

		private int? _created_by;
		/// <summary>
		/// 作成者
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, Nullable]
		public  int?  created_by
		{
			get { return _created_by; }
			set
			{
				if (_created_by != value)
				{
					Beforecreated_byChanged(value);
					_created_by = value;
					Aftercreated_byChanged();

					Oncreated_byChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecreated_byChanged(int? newValue);
		partial void Aftercreated_byChanged();

		public const string NameOfcreated_by = "created_by";

		private static readonly PropertyChangedEventArgs _created_byChangedEventArgs = new PropertyChangedEventArgs(NameOfcreated_by);

		private void Oncreated_byChanged()
		{
			OnPropertyChanged(_created_byChangedEventArgs);
		}

		#endregion

		#endregion
		#region modified_at : DateTime

		private DateTime _modified_at;
		/// <summary>
		/// 更新日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, NotNull]
		public  DateTime  modified_at
		{
			get { return _modified_at; }
			set
			{
				if (_modified_at != value)
				{
					Beforemodified_atChanged(value);
					_modified_at = value;
					Aftermodified_atChanged();

					Onmodified_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforemodified_atChanged(DateTime newValue);
		partial void Aftermodified_atChanged();

		public const string NameOfmodified_at = "modified_at";

		private static readonly PropertyChangedEventArgs _modified_atChangedEventArgs = new PropertyChangedEventArgs(NameOfmodified_at);

		private void Onmodified_atChanged()
		{
			OnPropertyChanged(_modified_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region modified_by : int?

		private int? _modified_by;
		/// <summary>
		/// 更新者
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, Nullable]
		public  int?  modified_by
		{
			get { return _modified_by; }
			set
			{
				if (_modified_by != value)
				{
					Beforemodified_byChanged(value);
					_modified_by = value;
					Aftermodified_byChanged();

					Onmodified_byChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforemodified_byChanged(int? newValue);
		partial void Aftermodified_byChanged();

		public const string NameOfmodified_by = "modified_by";

		private static readonly PropertyChangedEventArgs _modified_byChangedEventArgs = new PropertyChangedEventArgs(NameOfmodified_by);

		private void Onmodified_byChanged()
		{
			OnPropertyChanged(_modified_byChangedEventArgs);
		}

		#endregion

		#endregion
		#region row_version : byte[]

		private byte[] _row_version;
		/// <summary>
		/// 版
		/// </summary>
		[Column(DbType="timestamp", DataType=DataType.Timestamp, SkipOnInsert=true, SkipOnUpdate=true), DataMember, Nullable]
		public  byte[]  row_version
		{
			get { return _row_version; }
			set
			{
				if (_row_version != value)
				{
					Beforerow_versionChanged(value);
					_row_version = value;
					Afterrow_versionChanged();

					Onrow_versionChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforerow_versionChanged(byte[] newValue);
		partial void Afterrow_versionChanged();

		public const string NameOfrow_version = "row_version";

		private static readonly PropertyChangedEventArgs _row_versionChangedEventArgs = new PropertyChangedEventArgs(NameOfrow_version);

		private void Onrow_versionChanged()
		{
			OnPropertyChanged(_row_versionChangedEventArgs);
		}

		#endregion

		#endregion

		#region enum用アクセスラッパー
		/// <summary>
		/// user_typeのenumラッパー
		/// </summary>
		[ColumnAlias("user_type")]
		public UserType UserType
		{
			get => (UserType)user_type;
			set => user_type = value.Val();
		}
		#endregion

		#region Constructor

		public Address()
		{
			#region フィールド初期化
			uid = default(int);
			user_type = 99;
			generic_user_no = null;
			seq = 0;
			address_type_id = 0;
			postal_code = "";
			prefecture_code = 1;
			address1 = "";
			address2 = "";
			address3 = "";
			latitude = null;
			longitude = null;
			enter_date = null;
			leave_date = null;
			created_at = DateTime.UtcNow;
			created_by = null;
			modified_at = DateTime.UtcNow;
			modified_by = null;
			row_version = default(byte[]);
			#endregion
		}

		#endregion

		#region Association

		#region AddressType : address_type_id (FK_Address_AddressType)

		private AddressType _AddressType;
		/// <summary>
		/// FK_Address_AddressType
		/// </summary>
		[Association(ThisKey="address_type_id", OtherKey="address_type_id", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_Address_AddressType", BackReferenceName="Address"), DataMember]
		public  AddressType  AddressType
		{
			get { return _AddressType; }
			set
			{
				if (_AddressType != value)
				{
					BeforeAddressTypeChanged(value);
					_AddressType = value;
					AfterAddressTypeChanged();

					OnAddressTypeChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeAddressTypeChanged(AddressType newValue);
		partial void AfterAddressTypeChanged ();

		public const string NameOfAddressType = "AddressType";

		private static readonly PropertyChangedEventArgs _AddressTypeChangedEventArgs = new PropertyChangedEventArgs(NameOfAddressType);

		private void OnAddressTypeChanged()
		{
			OnPropertyChanged(_AddressTypeChangedEventArgs);
		}

		#endregion

		#endregion
		#region Staff : user_type,generic_user_no (FK_Address_Staff)

		private Staff _Staff;
		/// <summary>
		/// FK_Address_Staff
		/// </summary>
		[Association(ThisKey="user_type,generic_user_no", OtherKey="user_type,staff_no", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_Address_Staff", BackReferenceName="Address"), DataMember]
		public  Staff  Staff
		{
			get { return _Staff; }
			set
			{
				if (_Staff != value)
				{
					BeforeStaffChanged(value);
					_Staff = value;
					AfterStaffChanged();

					OnStaffChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeStaffChanged(Staff newValue);
		partial void AfterStaffChanged ();

		public const string NameOfStaff = "Staff";

		private static readonly PropertyChangedEventArgs _StaffChangedEventArgs = new PropertyChangedEventArgs(NameOfStaff);

		private void OnStaffChanged()
		{
			OnPropertyChanged(_StaffChangedEventArgs);
		}

		#endregion

		#endregion
		#region Teacher : user_type,generic_user_no (FK_Address_Teacher)

		private Teacher _Teacher;
		/// <summary>
		/// FK_Address_Teacher
		/// </summary>
		[Association(ThisKey="user_type,generic_user_no", OtherKey="user_type,teacher_no", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_Address_Teacher", BackReferenceName="Address"), DataMember]
		public  Teacher  Teacher
		{
			get { return _Teacher; }
			set
			{
				if (_Teacher != value)
				{
					BeforeTeacherChanged(value);
					_Teacher = value;
					AfterTeacherChanged();

					OnTeacherChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeTeacherChanged(Teacher newValue);
		partial void AfterTeacherChanged ();

		public const string NameOfTeacher = "Teacher";

		private static readonly PropertyChangedEventArgs _TeacherChangedEventArgs = new PropertyChangedEventArgs(NameOfTeacher);

		private void OnTeacherChanged()
		{
			OnPropertyChanged(_TeacherChangedEventArgs);
		}

		#endregion

		#endregion

		#endregion

		#region INotifyPropertyChanged support

		[field : NonSerialized]
		public virtual event PropertyChangedEventHandler PropertyChanged;

		protected void OnPropertyChanged(string propertyName)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		protected void OnPropertyChanged(PropertyChangedEventArgs arg)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, arg);
			}
		}

		#endregion

	}
	#region 住所条件
	/// <summary>
	/// 住所条件
	/// </summary>
	[DataContract]
	public partial class AddressCondition : AddressConditionBase
	{
	}

	/// <summary>
	/// 住所条件ベース
	/// </summary>
	[DataContract]
	public class AddressConditionBase : ConditionBase<Address>
	{
		#region properties
		#region uid
		/// <summary>
		/// uid_eqと等しい
		/// </summary>
		[DataMember] public int? uid_eq { get; set; }
		/// <summary>
		/// uid_neと等しくない
		/// </summary>
		[DataMember] public int? uid_ne { get; set; }
		/// <summary>
		/// uid_ltより小さい
		/// </summary>
		[DataMember] public int? uid_lt { get; set; }
		/// <summary>
		/// uid_gtより大きい
		/// </summary>
		[DataMember] public int? uid_gt { get; set; }
		/// <summary>
		/// uid_le以下
		/// </summary>
		[DataMember] public int? uid_le { get; set; }
		/// <summary>
		/// uid_ge以上
		/// </summary>
		[DataMember] public int? uid_ge { get; set; }
		/// <summary>
		/// uid_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> uid_in { get; set; }
		/// <summary>
		/// uid_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> uid_ni { get; set; }
		/// <summary>
		/// uid_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? uid_between { get; set; }
		#endregion
		#region user_type (UserType)
		private int? _user_type_eq;
		/// <summary>
		/// UserType_eqと等しい
		/// </summary>
		[DataMember] public UserType? UserType_eq
		{
			get => _user_type_eq?.ToUserType();
			set => _user_type_eq = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _user_type_ne;
		/// <summary>
		/// UserType_neと等しくない
		/// </summary>
		[DataMember] public UserType? UserType_ne
		{
			get => _user_type_ne?.ToUserType();
			set => _user_type_ne = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _user_type_lt;
		/// <summary>
		/// UserType_ltより小さい
		/// </summary>
		[DataMember] public UserType? UserType_lt
		{
			get => _user_type_lt?.ToUserType();
			set => _user_type_lt = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _user_type_gt;
		/// <summary>
		/// UserType_gtより大きい
		/// </summary>
		[DataMember] public UserType? UserType_gt
		{
			get => _user_type_gt?.ToUserType();
			set => _user_type_gt = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _user_type_le;
		/// <summary>
		/// UserType_le以下
		/// </summary>
		[DataMember] public UserType? UserType_le
		{
			get => _user_type_le?.ToUserType();
			set => _user_type_le = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _user_type_ge;
		/// <summary>
		/// UserType_ge以上
		/// </summary>
		[DataMember] public UserType? UserType_ge
		{
			get => _user_type_ge?.ToUserType();
			set => _user_type_ge = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private IEnumerable<int> _user_type_in;
		/// <summary>
		/// UserType_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<UserType> UserType_in
		{
			get => _user_type_in?.Select(_ => _.ToUserType().Value) ?? Enumerable.Empty<UserType>();
			set => _user_type_in = value.Select(_ => _.Val());
		}
		private IEnumerable<int> _user_type_ni;
		/// <summary>
		/// UserType_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<UserType> UserType_ni
		{
			get => _user_type_ni?.Select(_ => _.ToUserType().Value) ?? Enumerable.Empty<UserType>();
			set => _user_type_ni = value.Select(_ => _.Val());
		}
		private (int low, int high)? _user_type_between;
		/// <summary>
		/// UserType_betweenの範囲内にある
		/// </summary>
		[DataMember] public (UserType low, UserType high)? UserType_between
		{
			get => _user_type_between.HasValue ? (_user_type_between.Value.low.ToUserType().Value, _user_type_between.Value.high.ToUserType().Value) : ((UserType, UserType)?)null;
			set => _user_type_between = value.HasValue ? (value.Value.low.Val(), value.Value.high.Val()) : ((int, int)?)null;
		}
		#endregion
		#region generic_user_no
		/// <summary>
		/// generic_user_no_eqと等しい
		/// </summary>
		[DataMember] public string generic_user_no_eq { get; set; }
		/// <summary>
		/// generic_user_no_neと等しくない
		/// </summary>
		[DataMember] public string generic_user_no_ne { get; set; }
		/// <summary>
		/// generic_user_no_ltより小さい
		/// </summary>
		[DataMember] public string generic_user_no_lt { get; set; }
		/// <summary>
		/// generic_user_no_gtより大きい
		/// </summary>
		[DataMember] public string generic_user_no_gt { get; set; }
		/// <summary>
		/// generic_user_no_le以下
		/// </summary>
		[DataMember] public string generic_user_no_le { get; set; }
		/// <summary>
		/// generic_user_no_ge以上
		/// </summary>
		[DataMember] public string generic_user_no_ge { get; set; }
		/// <summary>
		/// generic_user_no_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> generic_user_no_in { get; set; }
		/// <summary>
		/// generic_user_no_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> generic_user_no_ni { get; set; }
		/// <summary>
		/// generic_user_no_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? generic_user_no_between { get; set; }
		/// <summary>
		/// generic_user_no_likeと部分一致する
		/// </summary>
		[DataMember] public string generic_user_no_like { get; set; }
		#endregion
		#region seq
		/// <summary>
		/// seq_eqと等しい
		/// </summary>
		[DataMember] public int? seq_eq { get; set; }
		/// <summary>
		/// seq_neと等しくない
		/// </summary>
		[DataMember] public int? seq_ne { get; set; }
		/// <summary>
		/// seq_ltより小さい
		/// </summary>
		[DataMember] public int? seq_lt { get; set; }
		/// <summary>
		/// seq_gtより大きい
		/// </summary>
		[DataMember] public int? seq_gt { get; set; }
		/// <summary>
		/// seq_le以下
		/// </summary>
		[DataMember] public int? seq_le { get; set; }
		/// <summary>
		/// seq_ge以上
		/// </summary>
		[DataMember] public int? seq_ge { get; set; }
		/// <summary>
		/// seq_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> seq_in { get; set; }
		/// <summary>
		/// seq_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> seq_ni { get; set; }
		/// <summary>
		/// seq_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? seq_between { get; set; }
		#endregion
		#region address_type_id
		/// <summary>
		/// address_type_id_eqと等しい
		/// </summary>
		[DataMember] public int? address_type_id_eq { get; set; }
		/// <summary>
		/// address_type_id_neと等しくない
		/// </summary>
		[DataMember] public int? address_type_id_ne { get; set; }
		/// <summary>
		/// address_type_id_ltより小さい
		/// </summary>
		[DataMember] public int? address_type_id_lt { get; set; }
		/// <summary>
		/// address_type_id_gtより大きい
		/// </summary>
		[DataMember] public int? address_type_id_gt { get; set; }
		/// <summary>
		/// address_type_id_le以下
		/// </summary>
		[DataMember] public int? address_type_id_le { get; set; }
		/// <summary>
		/// address_type_id_ge以上
		/// </summary>
		[DataMember] public int? address_type_id_ge { get; set; }
		/// <summary>
		/// address_type_id_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> address_type_id_in { get; set; }
		/// <summary>
		/// address_type_id_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> address_type_id_ni { get; set; }
		/// <summary>
		/// address_type_id_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? address_type_id_between { get; set; }
		#endregion
		#region postal_code
		/// <summary>
		/// postal_code_eqと等しい
		/// </summary>
		[DataMember] public string postal_code_eq { get; set; }
		/// <summary>
		/// postal_code_neと等しくない
		/// </summary>
		[DataMember] public string postal_code_ne { get; set; }
		/// <summary>
		/// postal_code_ltより小さい
		/// </summary>
		[DataMember] public string postal_code_lt { get; set; }
		/// <summary>
		/// postal_code_gtより大きい
		/// </summary>
		[DataMember] public string postal_code_gt { get; set; }
		/// <summary>
		/// postal_code_le以下
		/// </summary>
		[DataMember] public string postal_code_le { get; set; }
		/// <summary>
		/// postal_code_ge以上
		/// </summary>
		[DataMember] public string postal_code_ge { get; set; }
		/// <summary>
		/// postal_code_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> postal_code_in { get; set; }
		/// <summary>
		/// postal_code_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> postal_code_ni { get; set; }
		/// <summary>
		/// postal_code_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? postal_code_between { get; set; }
		/// <summary>
		/// postal_code_likeと部分一致する
		/// </summary>
		[DataMember] public string postal_code_like { get; set; }
		#endregion
		#region prefecture_code
		/// <summary>
		/// prefecture_code_eqと等しい
		/// </summary>
		[DataMember] public int? prefecture_code_eq { get; set; }
		/// <summary>
		/// prefecture_code_neと等しくない
		/// </summary>
		[DataMember] public int? prefecture_code_ne { get; set; }
		/// <summary>
		/// prefecture_code_ltより小さい
		/// </summary>
		[DataMember] public int? prefecture_code_lt { get; set; }
		/// <summary>
		/// prefecture_code_gtより大きい
		/// </summary>
		[DataMember] public int? prefecture_code_gt { get; set; }
		/// <summary>
		/// prefecture_code_le以下
		/// </summary>
		[DataMember] public int? prefecture_code_le { get; set; }
		/// <summary>
		/// prefecture_code_ge以上
		/// </summary>
		[DataMember] public int? prefecture_code_ge { get; set; }
		/// <summary>
		/// prefecture_code_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> prefecture_code_in { get; set; }
		/// <summary>
		/// prefecture_code_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> prefecture_code_ni { get; set; }
		/// <summary>
		/// prefecture_code_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? prefecture_code_between { get; set; }
		#endregion
		#region address1
		/// <summary>
		/// address1_eqと等しい
		/// </summary>
		[DataMember] public string address1_eq { get; set; }
		/// <summary>
		/// address1_neと等しくない
		/// </summary>
		[DataMember] public string address1_ne { get; set; }
		/// <summary>
		/// address1_ltより小さい
		/// </summary>
		[DataMember] public string address1_lt { get; set; }
		/// <summary>
		/// address1_gtより大きい
		/// </summary>
		[DataMember] public string address1_gt { get; set; }
		/// <summary>
		/// address1_le以下
		/// </summary>
		[DataMember] public string address1_le { get; set; }
		/// <summary>
		/// address1_ge以上
		/// </summary>
		[DataMember] public string address1_ge { get; set; }
		/// <summary>
		/// address1_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> address1_in { get; set; }
		/// <summary>
		/// address1_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> address1_ni { get; set; }
		/// <summary>
		/// address1_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? address1_between { get; set; }
		/// <summary>
		/// address1_likeと部分一致する
		/// </summary>
		[DataMember] public string address1_like { get; set; }
		#endregion
		#region address2
		/// <summary>
		/// address2_eqと等しい
		/// </summary>
		[DataMember] public string address2_eq { get; set; }
		/// <summary>
		/// address2_neと等しくない
		/// </summary>
		[DataMember] public string address2_ne { get; set; }
		/// <summary>
		/// address2_ltより小さい
		/// </summary>
		[DataMember] public string address2_lt { get; set; }
		/// <summary>
		/// address2_gtより大きい
		/// </summary>
		[DataMember] public string address2_gt { get; set; }
		/// <summary>
		/// address2_le以下
		/// </summary>
		[DataMember] public string address2_le { get; set; }
		/// <summary>
		/// address2_ge以上
		/// </summary>
		[DataMember] public string address2_ge { get; set; }
		/// <summary>
		/// address2_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> address2_in { get; set; }
		/// <summary>
		/// address2_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> address2_ni { get; set; }
		/// <summary>
		/// address2_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? address2_between { get; set; }
		/// <summary>
		/// address2_likeと部分一致する
		/// </summary>
		[DataMember] public string address2_like { get; set; }
		#endregion
		#region address3
		/// <summary>
		/// address3_eqと等しい
		/// </summary>
		[DataMember] public string address3_eq { get; set; }
		/// <summary>
		/// address3_neと等しくない
		/// </summary>
		[DataMember] public string address3_ne { get; set; }
		/// <summary>
		/// address3_ltより小さい
		/// </summary>
		[DataMember] public string address3_lt { get; set; }
		/// <summary>
		/// address3_gtより大きい
		/// </summary>
		[DataMember] public string address3_gt { get; set; }
		/// <summary>
		/// address3_le以下
		/// </summary>
		[DataMember] public string address3_le { get; set; }
		/// <summary>
		/// address3_ge以上
		/// </summary>
		[DataMember] public string address3_ge { get; set; }
		/// <summary>
		/// address3_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> address3_in { get; set; }
		/// <summary>
		/// address3_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> address3_ni { get; set; }
		/// <summary>
		/// address3_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? address3_between { get; set; }
		/// <summary>
		/// address3_likeと部分一致する
		/// </summary>
		[DataMember] public string address3_like { get; set; }
		#endregion
		#region latitude
		/// <summary>
		/// latitude_eqと等しい
		/// </summary>
		[DataMember] public decimal? latitude_eq { get; set; }
		/// <summary>
		/// latitude_neと等しくない
		/// </summary>
		[DataMember] public decimal? latitude_ne { get; set; }
		/// <summary>
		/// latitude_ltより小さい
		/// </summary>
		[DataMember] public decimal? latitude_lt { get; set; }
		/// <summary>
		/// latitude_gtより大きい
		/// </summary>
		[DataMember] public decimal? latitude_gt { get; set; }
		/// <summary>
		/// latitude_le以下
		/// </summary>
		[DataMember] public decimal? latitude_le { get; set; }
		/// <summary>
		/// latitude_ge以上
		/// </summary>
		[DataMember] public decimal? latitude_ge { get; set; }
		/// <summary>
		/// latitude_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<decimal> latitude_in { get; set; }
		/// <summary>
		/// latitude_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<decimal> latitude_ni { get; set; }
		/// <summary>
		/// latitude_betweenの範囲内にある
		/// </summary>
		[DataMember] public (decimal? low, decimal? high)? latitude_between { get; set; }
		/// <summary>
		/// latitudeがNULLか
		/// </summary>
		[DataMember] public bool latitude_isnull { get; set; } =  false ;
		/// <summary>
		/// latitudeがNULLではないか
		/// </summary>
		[DataMember] public bool latitude_isnotnull { get; set; } = false;
		#endregion
		#region longitude
		/// <summary>
		/// longitude_eqと等しい
		/// </summary>
		[DataMember] public decimal? longitude_eq { get; set; }
		/// <summary>
		/// longitude_neと等しくない
		/// </summary>
		[DataMember] public decimal? longitude_ne { get; set; }
		/// <summary>
		/// longitude_ltより小さい
		/// </summary>
		[DataMember] public decimal? longitude_lt { get; set; }
		/// <summary>
		/// longitude_gtより大きい
		/// </summary>
		[DataMember] public decimal? longitude_gt { get; set; }
		/// <summary>
		/// longitude_le以下
		/// </summary>
		[DataMember] public decimal? longitude_le { get; set; }
		/// <summary>
		/// longitude_ge以上
		/// </summary>
		[DataMember] public decimal? longitude_ge { get; set; }
		/// <summary>
		/// longitude_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<decimal> longitude_in { get; set; }
		/// <summary>
		/// longitude_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<decimal> longitude_ni { get; set; }
		/// <summary>
		/// longitude_betweenの範囲内にある
		/// </summary>
		[DataMember] public (decimal? low, decimal? high)? longitude_between { get; set; }
		/// <summary>
		/// longitudeがNULLか
		/// </summary>
		[DataMember] public bool longitude_isnull { get; set; } =  false ;
		/// <summary>
		/// longitudeがNULLではないか
		/// </summary>
		[DataMember] public bool longitude_isnotnull { get; set; } = false;
		#endregion
		#region enter_date
		/// <summary>
		/// enter_date_eqと等しい
		/// </summary>
		[DataMember] public DateTime? enter_date_eq { get; set; }
		/// <summary>
		/// enter_date_neと等しくない
		/// </summary>
		[DataMember] public DateTime? enter_date_ne { get; set; }
		/// <summary>
		/// enter_date_ltより小さい
		/// </summary>
		[DataMember] public DateTime? enter_date_lt { get; set; }
		/// <summary>
		/// enter_date_gtより大きい
		/// </summary>
		[DataMember] public DateTime? enter_date_gt { get; set; }
		/// <summary>
		/// enter_date_le以下
		/// </summary>
		[DataMember] public DateTime? enter_date_le { get; set; }
		/// <summary>
		/// enter_date_ge以上
		/// </summary>
		[DataMember] public DateTime? enter_date_ge { get; set; }
		/// <summary>
		/// enter_date_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> enter_date_in { get; set; }
		/// <summary>
		/// enter_date_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> enter_date_ni { get; set; }
		/// <summary>
		/// enter_date_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? enter_date_between { get; set; }
		/// <summary>
		/// enter_dateがNULLか
		/// </summary>
		[DataMember] public bool enter_date_isnull { get; set; } =  false ;
		/// <summary>
		/// enter_dateがNULLではないか
		/// </summary>
		[DataMember] public bool enter_date_isnotnull { get; set; } = false;
		#endregion
		#region leave_date
		/// <summary>
		/// leave_date_eqと等しい
		/// </summary>
		[DataMember] public DateTime? leave_date_eq { get; set; }
		/// <summary>
		/// leave_date_neと等しくない
		/// </summary>
		[DataMember] public DateTime? leave_date_ne { get; set; }
		/// <summary>
		/// leave_date_ltより小さい
		/// </summary>
		[DataMember] public DateTime? leave_date_lt { get; set; }
		/// <summary>
		/// leave_date_gtより大きい
		/// </summary>
		[DataMember] public DateTime? leave_date_gt { get; set; }
		/// <summary>
		/// leave_date_le以下
		/// </summary>
		[DataMember] public DateTime? leave_date_le { get; set; }
		/// <summary>
		/// leave_date_ge以上
		/// </summary>
		[DataMember] public DateTime? leave_date_ge { get; set; }
		/// <summary>
		/// leave_date_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> leave_date_in { get; set; }
		/// <summary>
		/// leave_date_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> leave_date_ni { get; set; }
		/// <summary>
		/// leave_date_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? leave_date_between { get; set; }
		/// <summary>
		/// leave_dateがNULLか
		/// </summary>
		[DataMember] public bool leave_date_isnull { get; set; } =  false ;
		/// <summary>
		/// leave_dateがNULLではないか
		/// </summary>
		[DataMember] public bool leave_date_isnotnull { get; set; } = false;
		#endregion
		#region created_at
		/// <summary>
		/// created_at_eqと等しい
		/// </summary>
		[DataMember] public DateTime? created_at_eq { get; set; }
		/// <summary>
		/// created_at_neと等しくない
		/// </summary>
		[DataMember] public DateTime? created_at_ne { get; set; }
		/// <summary>
		/// created_at_ltより小さい
		/// </summary>
		[DataMember] public DateTime? created_at_lt { get; set; }
		/// <summary>
		/// created_at_gtより大きい
		/// </summary>
		[DataMember] public DateTime? created_at_gt { get; set; }
		/// <summary>
		/// created_at_le以下
		/// </summary>
		[DataMember] public DateTime? created_at_le { get; set; }
		/// <summary>
		/// created_at_ge以上
		/// </summary>
		[DataMember] public DateTime? created_at_ge { get; set; }
		/// <summary>
		/// created_at_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> created_at_in { get; set; }
		/// <summary>
		/// created_at_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> created_at_ni { get; set; }
		/// <summary>
		/// created_at_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? created_at_between { get; set; }
		#endregion
		#region created_by
		/// <summary>
		/// created_by_eqと等しい
		/// </summary>
		[DataMember] public int? created_by_eq { get; set; }
		/// <summary>
		/// created_by_neと等しくない
		/// </summary>
		[DataMember] public int? created_by_ne { get; set; }
		/// <summary>
		/// created_by_ltより小さい
		/// </summary>
		[DataMember] public int? created_by_lt { get; set; }
		/// <summary>
		/// created_by_gtより大きい
		/// </summary>
		[DataMember] public int? created_by_gt { get; set; }
		/// <summary>
		/// created_by_le以下
		/// </summary>
		[DataMember] public int? created_by_le { get; set; }
		/// <summary>
		/// created_by_ge以上
		/// </summary>
		[DataMember] public int? created_by_ge { get; set; }
		/// <summary>
		/// created_by_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> created_by_in { get; set; }
		/// <summary>
		/// created_by_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> created_by_ni { get; set; }
		/// <summary>
		/// created_by_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? created_by_between { get; set; }
		/// <summary>
		/// created_byがNULLか
		/// </summary>
		[DataMember] public bool created_by_isnull { get; set; } =  false ;
		/// <summary>
		/// created_byがNULLではないか
		/// </summary>
		[DataMember] public bool created_by_isnotnull { get; set; } = false;
		#endregion
		#region modified_at
		/// <summary>
		/// modified_at_eqと等しい
		/// </summary>
		[DataMember] public DateTime? modified_at_eq { get; set; }
		/// <summary>
		/// modified_at_neと等しくない
		/// </summary>
		[DataMember] public DateTime? modified_at_ne { get; set; }
		/// <summary>
		/// modified_at_ltより小さい
		/// </summary>
		[DataMember] public DateTime? modified_at_lt { get; set; }
		/// <summary>
		/// modified_at_gtより大きい
		/// </summary>
		[DataMember] public DateTime? modified_at_gt { get; set; }
		/// <summary>
		/// modified_at_le以下
		/// </summary>
		[DataMember] public DateTime? modified_at_le { get; set; }
		/// <summary>
		/// modified_at_ge以上
		/// </summary>
		[DataMember] public DateTime? modified_at_ge { get; set; }
		/// <summary>
		/// modified_at_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> modified_at_in { get; set; }
		/// <summary>
		/// modified_at_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> modified_at_ni { get; set; }
		/// <summary>
		/// modified_at_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? modified_at_between { get; set; }
		#endregion
		#region modified_by
		/// <summary>
		/// modified_by_eqと等しい
		/// </summary>
		[DataMember] public int? modified_by_eq { get; set; }
		/// <summary>
		/// modified_by_neと等しくない
		/// </summary>
		[DataMember] public int? modified_by_ne { get; set; }
		/// <summary>
		/// modified_by_ltより小さい
		/// </summary>
		[DataMember] public int? modified_by_lt { get; set; }
		/// <summary>
		/// modified_by_gtより大きい
		/// </summary>
		[DataMember] public int? modified_by_gt { get; set; }
		/// <summary>
		/// modified_by_le以下
		/// </summary>
		[DataMember] public int? modified_by_le { get; set; }
		/// <summary>
		/// modified_by_ge以上
		/// </summary>
		[DataMember] public int? modified_by_ge { get; set; }
		/// <summary>
		/// modified_by_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> modified_by_in { get; set; }
		/// <summary>
		/// modified_by_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> modified_by_ni { get; set; }
		/// <summary>
		/// modified_by_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? modified_by_between { get; set; }
		/// <summary>
		/// modified_byがNULLか
		/// </summary>
		[DataMember] public bool modified_by_isnull { get; set; } =  false ;
		/// <summary>
		/// modified_byがNULLではないか
		/// </summary>
		[DataMember] public bool modified_by_isnotnull { get; set; } = false;
		#endregion
		#region row_version
		/// <summary>
		/// row_version_eqと等しい
		/// </summary>
		[DataMember] public byte[] row_version_eq { get; set; }
		/// <summary>
		/// row_version_neと等しくない
		/// </summary>
		[DataMember] public byte[] row_version_ne { get; set; }
		/// <summary>
		/// row_versionがNULLか
		/// </summary>
		[DataMember] public bool row_version_isnull { get; set; } =  false ;
		/// <summary>
		/// row_versionがNULLではないか
		/// </summary>
		[DataMember] public bool row_version_isnotnull { get; set; } = false;
		#endregion
		#endregion

		#region override
		override public Expression<Func<Address, bool>> CreatePredicate()
		{
			var predicate = base.CreatePredicate();

			#region uid
			if (uid_eq != null) predicate = predicate.And(_ => _.uid == uid_eq);
			if (uid_ne != null) predicate = predicate.And(_ => _.uid != uid_ne);
			if (uid_lt != null) predicate = predicate.And(_ => _.uid < uid_lt);
			if (uid_gt != null) predicate = predicate.And(_ => _.uid > uid_gt);
			if (uid_le != null) predicate = predicate.And(_ => _.uid <= uid_le);
			if (uid_ge != null) predicate = predicate.And(_ => _.uid >= uid_ge);
			if (uid_in != null) predicate = predicate.And(_ => uid_in.Contains(_.uid));
			if (uid_ni != null) predicate = predicate.And(_ => !uid_ni.Contains(_.uid));
			#endregion
			#region user_type
			if (_user_type_eq != null) predicate = predicate.And(_ => _.user_type == _user_type_eq);
			if (_user_type_ne != null) predicate = predicate.And(_ => _.user_type != _user_type_ne);
			if (_user_type_lt != null) predicate = predicate.And(_ => _.user_type < _user_type_lt);
			if (_user_type_gt != null) predicate = predicate.And(_ => _.user_type > _user_type_gt);
			if (_user_type_le != null) predicate = predicate.And(_ => _.user_type <= _user_type_le);
			if (_user_type_ge != null) predicate = predicate.And(_ => _.user_type >= _user_type_ge);
			if (_user_type_in != null) predicate = predicate.And(_ => _user_type_in.Contains(_.user_type));
			if (_user_type_ni != null) predicate = predicate.And(_ => !_user_type_ni.Contains(_.user_type));
			#endregion
			#region generic_user_no
			if (generic_user_no_eq != null) predicate = predicate.And(_ => _.generic_user_no == generic_user_no_eq);
			if (generic_user_no_ne != null) predicate = predicate.And(_ => _.generic_user_no != generic_user_no_ne);
			if (generic_user_no_lt != null) predicate = predicate.And(_ => generic_user_no_lt.CompareTo(_.generic_user_no) > 0);
			if (generic_user_no_gt != null) predicate = predicate.And(_ => generic_user_no_gt.CompareTo(_.generic_user_no) < 0);
			if (generic_user_no_le != null) predicate = predicate.And(_ => generic_user_no_le.CompareTo(_.generic_user_no) >= 0);
			if (generic_user_no_ge != null) predicate = predicate.And(_ => generic_user_no_ge.CompareTo(_.generic_user_no) <= 0);
			if (generic_user_no_in != null) predicate = predicate.And(_ => generic_user_no_in.Contains(_.generic_user_no));
			if (generic_user_no_ni != null) predicate = predicate.And(_ => !generic_user_no_ni.Contains(_.generic_user_no));
			#endregion
			#region seq
			if (seq_eq != null) predicate = predicate.And(_ => _.seq == seq_eq);
			if (seq_ne != null) predicate = predicate.And(_ => _.seq != seq_ne);
			if (seq_lt != null) predicate = predicate.And(_ => _.seq < seq_lt);
			if (seq_gt != null) predicate = predicate.And(_ => _.seq > seq_gt);
			if (seq_le != null) predicate = predicate.And(_ => _.seq <= seq_le);
			if (seq_ge != null) predicate = predicate.And(_ => _.seq >= seq_ge);
			if (seq_in != null) predicate = predicate.And(_ => seq_in.Contains(_.seq));
			if (seq_ni != null) predicate = predicate.And(_ => !seq_ni.Contains(_.seq));
			#endregion
			#region address_type_id
			if (address_type_id_eq != null) predicate = predicate.And(_ => _.address_type_id == address_type_id_eq);
			if (address_type_id_ne != null) predicate = predicate.And(_ => _.address_type_id != address_type_id_ne);
			if (address_type_id_lt != null) predicate = predicate.And(_ => _.address_type_id < address_type_id_lt);
			if (address_type_id_gt != null) predicate = predicate.And(_ => _.address_type_id > address_type_id_gt);
			if (address_type_id_le != null) predicate = predicate.And(_ => _.address_type_id <= address_type_id_le);
			if (address_type_id_ge != null) predicate = predicate.And(_ => _.address_type_id >= address_type_id_ge);
			if (address_type_id_in != null) predicate = predicate.And(_ => address_type_id_in.Contains(_.address_type_id));
			if (address_type_id_ni != null) predicate = predicate.And(_ => !address_type_id_ni.Contains(_.address_type_id));
			#endregion
			#region postal_code
			if (postal_code_eq != null) predicate = predicate.And(_ => _.postal_code == postal_code_eq);
			if (postal_code_ne != null) predicate = predicate.And(_ => _.postal_code != postal_code_ne);
			if (postal_code_lt != null) predicate = predicate.And(_ => postal_code_lt.CompareTo(_.postal_code) > 0);
			if (postal_code_gt != null) predicate = predicate.And(_ => postal_code_gt.CompareTo(_.postal_code) < 0);
			if (postal_code_le != null) predicate = predicate.And(_ => postal_code_le.CompareTo(_.postal_code) >= 0);
			if (postal_code_ge != null) predicate = predicate.And(_ => postal_code_ge.CompareTo(_.postal_code) <= 0);
			if (postal_code_in != null) predicate = predicate.And(_ => postal_code_in.Contains(_.postal_code));
			if (postal_code_ni != null) predicate = predicate.And(_ => !postal_code_ni.Contains(_.postal_code));
			#endregion
			#region prefecture_code
			if (prefecture_code_eq != null) predicate = predicate.And(_ => _.prefecture_code == prefecture_code_eq);
			if (prefecture_code_ne != null) predicate = predicate.And(_ => _.prefecture_code != prefecture_code_ne);
			if (prefecture_code_lt != null) predicate = predicate.And(_ => _.prefecture_code < prefecture_code_lt);
			if (prefecture_code_gt != null) predicate = predicate.And(_ => _.prefecture_code > prefecture_code_gt);
			if (prefecture_code_le != null) predicate = predicate.And(_ => _.prefecture_code <= prefecture_code_le);
			if (prefecture_code_ge != null) predicate = predicate.And(_ => _.prefecture_code >= prefecture_code_ge);
			if (prefecture_code_in != null) predicate = predicate.And(_ => prefecture_code_in.Contains(_.prefecture_code));
			if (prefecture_code_ni != null) predicate = predicate.And(_ => !prefecture_code_ni.Contains(_.prefecture_code));
			#endregion
			#region address1
			if (address1_eq != null) predicate = predicate.And(_ => _.address1 == address1_eq);
			if (address1_ne != null) predicate = predicate.And(_ => _.address1 != address1_ne);
			if (address1_lt != null) predicate = predicate.And(_ => address1_lt.CompareTo(_.address1) > 0);
			if (address1_gt != null) predicate = predicate.And(_ => address1_gt.CompareTo(_.address1) < 0);
			if (address1_le != null) predicate = predicate.And(_ => address1_le.CompareTo(_.address1) >= 0);
			if (address1_ge != null) predicate = predicate.And(_ => address1_ge.CompareTo(_.address1) <= 0);
			if (address1_in != null) predicate = predicate.And(_ => address1_in.Contains(_.address1));
			if (address1_ni != null) predicate = predicate.And(_ => !address1_ni.Contains(_.address1));
			#endregion
			#region address2
			if (address2_eq != null) predicate = predicate.And(_ => _.address2 == address2_eq);
			if (address2_ne != null) predicate = predicate.And(_ => _.address2 != address2_ne);
			if (address2_lt != null) predicate = predicate.And(_ => address2_lt.CompareTo(_.address2) > 0);
			if (address2_gt != null) predicate = predicate.And(_ => address2_gt.CompareTo(_.address2) < 0);
			if (address2_le != null) predicate = predicate.And(_ => address2_le.CompareTo(_.address2) >= 0);
			if (address2_ge != null) predicate = predicate.And(_ => address2_ge.CompareTo(_.address2) <= 0);
			if (address2_in != null) predicate = predicate.And(_ => address2_in.Contains(_.address2));
			if (address2_ni != null) predicate = predicate.And(_ => !address2_ni.Contains(_.address2));
			#endregion
			#region address3
			if (address3_eq != null) predicate = predicate.And(_ => _.address3 == address3_eq);
			if (address3_ne != null) predicate = predicate.And(_ => _.address3 != address3_ne);
			if (address3_lt != null) predicate = predicate.And(_ => address3_lt.CompareTo(_.address3) > 0);
			if (address3_gt != null) predicate = predicate.And(_ => address3_gt.CompareTo(_.address3) < 0);
			if (address3_le != null) predicate = predicate.And(_ => address3_le.CompareTo(_.address3) >= 0);
			if (address3_ge != null) predicate = predicate.And(_ => address3_ge.CompareTo(_.address3) <= 0);
			if (address3_in != null) predicate = predicate.And(_ => address3_in.Contains(_.address3));
			if (address3_ni != null) predicate = predicate.And(_ => !address3_ni.Contains(_.address3));
			#endregion
			#region latitude
			if (latitude_eq != null) predicate = predicate.And(_ => _.latitude == latitude_eq);
			if (latitude_ne != null) predicate = predicate.And(_ => _.latitude != latitude_ne);
			if (latitude_lt != null) predicate = predicate.And(_ => _.latitude < latitude_lt);
			if (latitude_gt != null) predicate = predicate.And(_ => _.latitude > latitude_gt);
			if (latitude_le != null) predicate = predicate.And(_ => _.latitude <= latitude_le);
			if (latitude_ge != null) predicate = predicate.And(_ => _.latitude >= latitude_ge);
			if (latitude_in != null) predicate = predicate.And(_ => latitude_in.Contains(_.latitude.Value));
			if (latitude_ni != null) predicate = predicate.And(_ => !latitude_ni.Contains(_.latitude.Value));
			if (latitude_isnull) predicate = predicate.And(_ => _.latitude == null);
			if (latitude_isnotnull) predicate = predicate.And(_ => _.latitude != null);
			#endregion
			#region longitude
			if (longitude_eq != null) predicate = predicate.And(_ => _.longitude == longitude_eq);
			if (longitude_ne != null) predicate = predicate.And(_ => _.longitude != longitude_ne);
			if (longitude_lt != null) predicate = predicate.And(_ => _.longitude < longitude_lt);
			if (longitude_gt != null) predicate = predicate.And(_ => _.longitude > longitude_gt);
			if (longitude_le != null) predicate = predicate.And(_ => _.longitude <= longitude_le);
			if (longitude_ge != null) predicate = predicate.And(_ => _.longitude >= longitude_ge);
			if (longitude_in != null) predicate = predicate.And(_ => longitude_in.Contains(_.longitude.Value));
			if (longitude_ni != null) predicate = predicate.And(_ => !longitude_ni.Contains(_.longitude.Value));
			if (longitude_isnull) predicate = predicate.And(_ => _.longitude == null);
			if (longitude_isnotnull) predicate = predicate.And(_ => _.longitude != null);
			#endregion
			#region enter_date
			if (enter_date_eq != null) predicate = predicate.And(_ => _.enter_date == enter_date_eq);
			if (enter_date_ne != null) predicate = predicate.And(_ => _.enter_date != enter_date_ne);
			if (enter_date_lt != null) predicate = predicate.And(_ => _.enter_date < enter_date_lt);
			if (enter_date_gt != null) predicate = predicate.And(_ => _.enter_date > enter_date_gt);
			if (enter_date_le != null) predicate = predicate.And(_ => _.enter_date <= enter_date_le);
			if (enter_date_ge != null) predicate = predicate.And(_ => _.enter_date >= enter_date_ge);
			if (enter_date_in != null) predicate = predicate.And(_ => enter_date_in.Contains(_.enter_date.Value));
			if (enter_date_ni != null) predicate = predicate.And(_ => !enter_date_ni.Contains(_.enter_date.Value));
			if (enter_date_isnull) predicate = predicate.And(_ => _.enter_date == null);
			if (enter_date_isnotnull) predicate = predicate.And(_ => _.enter_date != null);
			#endregion
			#region leave_date
			if (leave_date_eq != null) predicate = predicate.And(_ => _.leave_date == leave_date_eq);
			if (leave_date_ne != null) predicate = predicate.And(_ => _.leave_date != leave_date_ne);
			if (leave_date_lt != null) predicate = predicate.And(_ => _.leave_date < leave_date_lt);
			if (leave_date_gt != null) predicate = predicate.And(_ => _.leave_date > leave_date_gt);
			if (leave_date_le != null) predicate = predicate.And(_ => _.leave_date <= leave_date_le);
			if (leave_date_ge != null) predicate = predicate.And(_ => _.leave_date >= leave_date_ge);
			if (leave_date_in != null) predicate = predicate.And(_ => leave_date_in.Contains(_.leave_date.Value));
			if (leave_date_ni != null) predicate = predicate.And(_ => !leave_date_ni.Contains(_.leave_date.Value));
			if (leave_date_isnull) predicate = predicate.And(_ => _.leave_date == null);
			if (leave_date_isnotnull) predicate = predicate.And(_ => _.leave_date != null);
			#endregion
			#region created_at
			if (created_at_eq != null) predicate = predicate.And(_ => _.created_at == created_at_eq);
			if (created_at_ne != null) predicate = predicate.And(_ => _.created_at != created_at_ne);
			if (created_at_lt != null) predicate = predicate.And(_ => _.created_at < created_at_lt);
			if (created_at_gt != null) predicate = predicate.And(_ => _.created_at > created_at_gt);
			if (created_at_le != null) predicate = predicate.And(_ => _.created_at <= created_at_le);
			if (created_at_ge != null) predicate = predicate.And(_ => _.created_at >= created_at_ge);
			if (created_at_in != null) predicate = predicate.And(_ => created_at_in.Contains(_.created_at));
			if (created_at_ni != null) predicate = predicate.And(_ => !created_at_ni.Contains(_.created_at));
			#endregion
			#region created_by
			if (created_by_eq != null) predicate = predicate.And(_ => _.created_by == created_by_eq);
			if (created_by_ne != null) predicate = predicate.And(_ => _.created_by != created_by_ne);
			if (created_by_lt != null) predicate = predicate.And(_ => _.created_by < created_by_lt);
			if (created_by_gt != null) predicate = predicate.And(_ => _.created_by > created_by_gt);
			if (created_by_le != null) predicate = predicate.And(_ => _.created_by <= created_by_le);
			if (created_by_ge != null) predicate = predicate.And(_ => _.created_by >= created_by_ge);
			if (created_by_in != null) predicate = predicate.And(_ => created_by_in.Contains(_.created_by.Value));
			if (created_by_ni != null) predicate = predicate.And(_ => !created_by_ni.Contains(_.created_by.Value));
			if (created_by_isnull) predicate = predicate.And(_ => _.created_by == null);
			if (created_by_isnotnull) predicate = predicate.And(_ => _.created_by != null);
			#endregion
			#region modified_at
			if (modified_at_eq != null) predicate = predicate.And(_ => _.modified_at == modified_at_eq);
			if (modified_at_ne != null) predicate = predicate.And(_ => _.modified_at != modified_at_ne);
			if (modified_at_lt != null) predicate = predicate.And(_ => _.modified_at < modified_at_lt);
			if (modified_at_gt != null) predicate = predicate.And(_ => _.modified_at > modified_at_gt);
			if (modified_at_le != null) predicate = predicate.And(_ => _.modified_at <= modified_at_le);
			if (modified_at_ge != null) predicate = predicate.And(_ => _.modified_at >= modified_at_ge);
			if (modified_at_in != null) predicate = predicate.And(_ => modified_at_in.Contains(_.modified_at));
			if (modified_at_ni != null) predicate = predicate.And(_ => !modified_at_ni.Contains(_.modified_at));
			#endregion
			#region modified_by
			if (modified_by_eq != null) predicate = predicate.And(_ => _.modified_by == modified_by_eq);
			if (modified_by_ne != null) predicate = predicate.And(_ => _.modified_by != modified_by_ne);
			if (modified_by_lt != null) predicate = predicate.And(_ => _.modified_by < modified_by_lt);
			if (modified_by_gt != null) predicate = predicate.And(_ => _.modified_by > modified_by_gt);
			if (modified_by_le != null) predicate = predicate.And(_ => _.modified_by <= modified_by_le);
			if (modified_by_ge != null) predicate = predicate.And(_ => _.modified_by >= modified_by_ge);
			if (modified_by_in != null) predicate = predicate.And(_ => modified_by_in.Contains(_.modified_by.Value));
			if (modified_by_ni != null) predicate = predicate.And(_ => !modified_by_ni.Contains(_.modified_by.Value));
			if (modified_by_isnull) predicate = predicate.And(_ => _.modified_by == null);
			if (modified_by_isnotnull) predicate = predicate.And(_ => _.modified_by != null);
			#endregion
			#region row_version
			if (row_version_eq != null) predicate = predicate.And(_ => _.row_version == row_version_eq);
			if (row_version_ne != null) predicate = predicate.And(_ => _.row_version != row_version_ne);
			if (row_version_isnull) predicate = predicate.And(_ => _.row_version == null);
			if (row_version_isnotnull) predicate = predicate.And(_ => _.row_version != null);
			#endregion

			return predicate;
		}
		#endregion
	}
	#endregion
	#endregion
	#region 住所種別
	/// <summary>
	/// 住所種別
	/// </summary>
	[Table(Schema="Master", Name="AddressType"), DataContract]
	public partial class AddressType : TableBase<AddressType>, INotifyPropertyChanged
	{
		#region uid : int

		private int _uid;
		/// <summary>
		/// ユニークID
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull, Identity]
		public  int  uid
		{
			get { return _uid; }
			set
			{
				if (_uid != value)
				{
					BeforeuidChanged(value);
					_uid = value;
					AfteruidChanged();

					OnuidChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeuidChanged(int newValue);
		partial void AfteruidChanged();

		public const string NameOfuid = "uid";

		private static readonly PropertyChangedEventArgs _uidChangedEventArgs = new PropertyChangedEventArgs(NameOfuid);

		private void OnuidChanged()
		{
			OnPropertyChanged(_uidChangedEventArgs);
		}

		#endregion

		#endregion
		#region address_type_id : int

		private int _address_type_id;
		/// <summary>
		/// 住所種別ID
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull, PrimaryKey(Order = 1), System.ComponentModel.DataAnnotations.Required]
		public  int  address_type_id
		{
			get { return _address_type_id; }
			set
			{
				if (_address_type_id != value)
				{
					Beforeaddress_type_idChanged(value);
					_address_type_id = value;
					Afteraddress_type_idChanged();

					Onaddress_type_idChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeaddress_type_idChanged(int newValue);
		partial void Afteraddress_type_idChanged();

		public const string NameOfaddress_type_id = "address_type_id";

		private static readonly PropertyChangedEventArgs _address_type_idChangedEventArgs = new PropertyChangedEventArgs(NameOfaddress_type_id);

		private void Onaddress_type_idChanged()
		{
			OnPropertyChanged(_address_type_idChangedEventArgs);
		}

		#endregion

		#endregion
		#region name : string

		private string _name;
		/// <summary>
		/// 名称
		/// </summary>
		[Column(DbType="nvarchar(10)", DataType=DataType.NVarChar, Length=10), DataMember, NotNull, System.ComponentModel.DataAnnotations.Required]
		public  string  name
		{
			get { return _name; }
			set
			{
				if (_name != value)
				{
					BeforenameChanged(value);
					_name = value;
					AfternameChanged();

					OnnameChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforenameChanged(string newValue);
		partial void AfternameChanged();

		public const string NameOfname = "name";

		private static readonly PropertyChangedEventArgs _nameChangedEventArgs = new PropertyChangedEventArgs(NameOfname);

		private void OnnameChanged()
		{
			OnPropertyChanged(_nameChangedEventArgs);
		}

		#endregion

		#endregion
		#region description : string

		private string _description;
		/// <summary>
		/// 説明
		/// </summary>
		[Column(DbType="nvarchar(64)", DataType=DataType.NVarChar, Length=64), DataMember, NotNull]
		public  string  description
		{
			get { return _description; }
			set
			{
				if (_description != value)
				{
					BeforedescriptionChanged(value);
					_description = value;
					AfterdescriptionChanged();

					OndescriptionChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforedescriptionChanged(string newValue);
		partial void AfterdescriptionChanged();

		public const string NameOfdescription = "description";

		private static readonly PropertyChangedEventArgs _descriptionChangedEventArgs = new PropertyChangedEventArgs(NameOfdescription);

		private void OndescriptionChanged()
		{
			OnPropertyChanged(_descriptionChangedEventArgs);
		}

		#endregion

		#endregion
		#region display_order : int

		private int _display_order;
		/// <summary>
		/// 表示順
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull, System.ComponentModel.DataAnnotations.Required]
		public  int  display_order
		{
			get { return _display_order; }
			set
			{
				if (_display_order != value)
				{
					Beforedisplay_orderChanged(value);
					_display_order = value;
					Afterdisplay_orderChanged();

					Ondisplay_orderChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforedisplay_orderChanged(int newValue);
		partial void Afterdisplay_orderChanged();

		public const string NameOfdisplay_order = "display_order";

		private static readonly PropertyChangedEventArgs _display_orderChangedEventArgs = new PropertyChangedEventArgs(NameOfdisplay_order);

		private void Ondisplay_orderChanged()
		{
			OnPropertyChanged(_display_orderChangedEventArgs);
		}

		#endregion

		#endregion
		#region created_at : DateTime

		private DateTime _created_at;
		/// <summary>
		/// 作成日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, NotNull]
		public  DateTime  created_at
		{
			get { return _created_at; }
			set
			{
				if (_created_at != value)
				{
					Beforecreated_atChanged(value);
					_created_at = value;
					Aftercreated_atChanged();

					Oncreated_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecreated_atChanged(DateTime newValue);
		partial void Aftercreated_atChanged();

		public const string NameOfcreated_at = "created_at";

		private static readonly PropertyChangedEventArgs _created_atChangedEventArgs = new PropertyChangedEventArgs(NameOfcreated_at);

		private void Oncreated_atChanged()
		{
			OnPropertyChanged(_created_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region created_by : int?

		private int? _created_by;
		/// <summary>
		/// 作成者
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, Nullable]
		public  int?  created_by
		{
			get { return _created_by; }
			set
			{
				if (_created_by != value)
				{
					Beforecreated_byChanged(value);
					_created_by = value;
					Aftercreated_byChanged();

					Oncreated_byChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecreated_byChanged(int? newValue);
		partial void Aftercreated_byChanged();

		public const string NameOfcreated_by = "created_by";

		private static readonly PropertyChangedEventArgs _created_byChangedEventArgs = new PropertyChangedEventArgs(NameOfcreated_by);

		private void Oncreated_byChanged()
		{
			OnPropertyChanged(_created_byChangedEventArgs);
		}

		#endregion

		#endregion
		#region modified_at : DateTime

		private DateTime _modified_at;
		/// <summary>
		/// 更新日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, NotNull]
		public  DateTime  modified_at
		{
			get { return _modified_at; }
			set
			{
				if (_modified_at != value)
				{
					Beforemodified_atChanged(value);
					_modified_at = value;
					Aftermodified_atChanged();

					Onmodified_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforemodified_atChanged(DateTime newValue);
		partial void Aftermodified_atChanged();

		public const string NameOfmodified_at = "modified_at";

		private static readonly PropertyChangedEventArgs _modified_atChangedEventArgs = new PropertyChangedEventArgs(NameOfmodified_at);

		private void Onmodified_atChanged()
		{
			OnPropertyChanged(_modified_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region modified_by : int?

		private int? _modified_by;
		/// <summary>
		/// 更新者
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, Nullable]
		public  int?  modified_by
		{
			get { return _modified_by; }
			set
			{
				if (_modified_by != value)
				{
					Beforemodified_byChanged(value);
					_modified_by = value;
					Aftermodified_byChanged();

					Onmodified_byChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforemodified_byChanged(int? newValue);
		partial void Aftermodified_byChanged();

		public const string NameOfmodified_by = "modified_by";

		private static readonly PropertyChangedEventArgs _modified_byChangedEventArgs = new PropertyChangedEventArgs(NameOfmodified_by);

		private void Onmodified_byChanged()
		{
			OnPropertyChanged(_modified_byChangedEventArgs);
		}

		#endregion

		#endregion
		#region removed_at : DateTime?

		private DateTime? _removed_at;
		/// <summary>
		/// 削除日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, Nullable]
		public  DateTime?  removed_at
		{
			get { return _removed_at; }
			set
			{
				if (_removed_at != value)
				{
					Beforeremoved_atChanged(value);
					_removed_at = value;
					Afterremoved_atChanged();

					Onremoved_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeremoved_atChanged(DateTime? newValue);
		partial void Afterremoved_atChanged();

		public const string NameOfremoved_at = "removed_at";

		private static readonly PropertyChangedEventArgs _removed_atChangedEventArgs = new PropertyChangedEventArgs(NameOfremoved_at);

		private void Onremoved_atChanged()
		{
			OnPropertyChanged(_removed_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region row_version : byte[]

		private byte[] _row_version;
		/// <summary>
		/// 版
		/// </summary>
		[Column(DbType="timestamp", DataType=DataType.Timestamp, SkipOnInsert=true, SkipOnUpdate=true), DataMember, Nullable]
		public  byte[]  row_version
		{
			get { return _row_version; }
			set
			{
				if (_row_version != value)
				{
					Beforerow_versionChanged(value);
					_row_version = value;
					Afterrow_versionChanged();

					Onrow_versionChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforerow_versionChanged(byte[] newValue);
		partial void Afterrow_versionChanged();

		public const string NameOfrow_version = "row_version";

		private static readonly PropertyChangedEventArgs _row_versionChangedEventArgs = new PropertyChangedEventArgs(NameOfrow_version);

		private void Onrow_versionChanged()
		{
			OnPropertyChanged(_row_versionChangedEventArgs);
		}

		#endregion

		#endregion

		#region enum用アクセスラッパー
		#endregion

		#region Constructor

		public AddressType()
		{
			#region フィールド初期化
			uid = default(int);
			address_type_id = 0;
			name = "";
			description = "";
			display_order = 0;
			created_at = DateTime.UtcNow;
			created_by = null;
			modified_at = DateTime.UtcNow;
			modified_by = null;
			removed_at = null;
			row_version = default(byte[]);
			#endregion
		}

		#endregion

		#region Association


		#endregion

		#region INotifyPropertyChanged support

		[field : NonSerialized]
		public virtual event PropertyChangedEventHandler PropertyChanged;

		protected void OnPropertyChanged(string propertyName)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		protected void OnPropertyChanged(PropertyChangedEventArgs arg)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, arg);
			}
		}

		#endregion

	}
	#region 住所種別条件
	/// <summary>
	/// 住所種別条件
	/// </summary>
	[DataContract]
	public partial class AddressTypeCondition : AddressTypeConditionBase
	{
	}

	/// <summary>
	/// 住所種別条件ベース
	/// </summary>
	[DataContract]
	public class AddressTypeConditionBase : ConditionBase<AddressType>
	{
		#region properties
		#region uid
		/// <summary>
		/// uid_eqと等しい
		/// </summary>
		[DataMember] public int? uid_eq { get; set; }
		/// <summary>
		/// uid_neと等しくない
		/// </summary>
		[DataMember] public int? uid_ne { get; set; }
		/// <summary>
		/// uid_ltより小さい
		/// </summary>
		[DataMember] public int? uid_lt { get; set; }
		/// <summary>
		/// uid_gtより大きい
		/// </summary>
		[DataMember] public int? uid_gt { get; set; }
		/// <summary>
		/// uid_le以下
		/// </summary>
		[DataMember] public int? uid_le { get; set; }
		/// <summary>
		/// uid_ge以上
		/// </summary>
		[DataMember] public int? uid_ge { get; set; }
		/// <summary>
		/// uid_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> uid_in { get; set; }
		/// <summary>
		/// uid_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> uid_ni { get; set; }
		/// <summary>
		/// uid_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? uid_between { get; set; }
		#endregion
		#region address_type_id
		/// <summary>
		/// address_type_id_eqと等しい
		/// </summary>
		[DataMember] public int? address_type_id_eq { get; set; }
		/// <summary>
		/// address_type_id_neと等しくない
		/// </summary>
		[DataMember] public int? address_type_id_ne { get; set; }
		/// <summary>
		/// address_type_id_ltより小さい
		/// </summary>
		[DataMember] public int? address_type_id_lt { get; set; }
		/// <summary>
		/// address_type_id_gtより大きい
		/// </summary>
		[DataMember] public int? address_type_id_gt { get; set; }
		/// <summary>
		/// address_type_id_le以下
		/// </summary>
		[DataMember] public int? address_type_id_le { get; set; }
		/// <summary>
		/// address_type_id_ge以上
		/// </summary>
		[DataMember] public int? address_type_id_ge { get; set; }
		/// <summary>
		/// address_type_id_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> address_type_id_in { get; set; }
		/// <summary>
		/// address_type_id_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> address_type_id_ni { get; set; }
		/// <summary>
		/// address_type_id_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? address_type_id_between { get; set; }
		#endregion
		#region name
		/// <summary>
		/// name_eqと等しい
		/// </summary>
		[DataMember] public string name_eq { get; set; }
		/// <summary>
		/// name_neと等しくない
		/// </summary>
		[DataMember] public string name_ne { get; set; }
		/// <summary>
		/// name_ltより小さい
		/// </summary>
		[DataMember] public string name_lt { get; set; }
		/// <summary>
		/// name_gtより大きい
		/// </summary>
		[DataMember] public string name_gt { get; set; }
		/// <summary>
		/// name_le以下
		/// </summary>
		[DataMember] public string name_le { get; set; }
		/// <summary>
		/// name_ge以上
		/// </summary>
		[DataMember] public string name_ge { get; set; }
		/// <summary>
		/// name_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> name_in { get; set; }
		/// <summary>
		/// name_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> name_ni { get; set; }
		/// <summary>
		/// name_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? name_between { get; set; }
		/// <summary>
		/// name_likeと部分一致する
		/// </summary>
		[DataMember] public string name_like { get; set; }
		#endregion
		#region description
		/// <summary>
		/// description_eqと等しい
		/// </summary>
		[DataMember] public string description_eq { get; set; }
		/// <summary>
		/// description_neと等しくない
		/// </summary>
		[DataMember] public string description_ne { get; set; }
		/// <summary>
		/// description_ltより小さい
		/// </summary>
		[DataMember] public string description_lt { get; set; }
		/// <summary>
		/// description_gtより大きい
		/// </summary>
		[DataMember] public string description_gt { get; set; }
		/// <summary>
		/// description_le以下
		/// </summary>
		[DataMember] public string description_le { get; set; }
		/// <summary>
		/// description_ge以上
		/// </summary>
		[DataMember] public string description_ge { get; set; }
		/// <summary>
		/// description_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> description_in { get; set; }
		/// <summary>
		/// description_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> description_ni { get; set; }
		/// <summary>
		/// description_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? description_between { get; set; }
		/// <summary>
		/// description_likeと部分一致する
		/// </summary>
		[DataMember] public string description_like { get; set; }
		#endregion
		#region display_order
		/// <summary>
		/// display_order_eqと等しい
		/// </summary>
		[DataMember] public int? display_order_eq { get; set; }
		/// <summary>
		/// display_order_neと等しくない
		/// </summary>
		[DataMember] public int? display_order_ne { get; set; }
		/// <summary>
		/// display_order_ltより小さい
		/// </summary>
		[DataMember] public int? display_order_lt { get; set; }
		/// <summary>
		/// display_order_gtより大きい
		/// </summary>
		[DataMember] public int? display_order_gt { get; set; }
		/// <summary>
		/// display_order_le以下
		/// </summary>
		[DataMember] public int? display_order_le { get; set; }
		/// <summary>
		/// display_order_ge以上
		/// </summary>
		[DataMember] public int? display_order_ge { get; set; }
		/// <summary>
		/// display_order_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> display_order_in { get; set; }
		/// <summary>
		/// display_order_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> display_order_ni { get; set; }
		/// <summary>
		/// display_order_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? display_order_between { get; set; }
		#endregion
		#region created_at
		/// <summary>
		/// created_at_eqと等しい
		/// </summary>
		[DataMember] public DateTime? created_at_eq { get; set; }
		/// <summary>
		/// created_at_neと等しくない
		/// </summary>
		[DataMember] public DateTime? created_at_ne { get; set; }
		/// <summary>
		/// created_at_ltより小さい
		/// </summary>
		[DataMember] public DateTime? created_at_lt { get; set; }
		/// <summary>
		/// created_at_gtより大きい
		/// </summary>
		[DataMember] public DateTime? created_at_gt { get; set; }
		/// <summary>
		/// created_at_le以下
		/// </summary>
		[DataMember] public DateTime? created_at_le { get; set; }
		/// <summary>
		/// created_at_ge以上
		/// </summary>
		[DataMember] public DateTime? created_at_ge { get; set; }
		/// <summary>
		/// created_at_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> created_at_in { get; set; }
		/// <summary>
		/// created_at_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> created_at_ni { get; set; }
		/// <summary>
		/// created_at_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? created_at_between { get; set; }
		#endregion
		#region created_by
		/// <summary>
		/// created_by_eqと等しい
		/// </summary>
		[DataMember] public int? created_by_eq { get; set; }
		/// <summary>
		/// created_by_neと等しくない
		/// </summary>
		[DataMember] public int? created_by_ne { get; set; }
		/// <summary>
		/// created_by_ltより小さい
		/// </summary>
		[DataMember] public int? created_by_lt { get; set; }
		/// <summary>
		/// created_by_gtより大きい
		/// </summary>
		[DataMember] public int? created_by_gt { get; set; }
		/// <summary>
		/// created_by_le以下
		/// </summary>
		[DataMember] public int? created_by_le { get; set; }
		/// <summary>
		/// created_by_ge以上
		/// </summary>
		[DataMember] public int? created_by_ge { get; set; }
		/// <summary>
		/// created_by_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> created_by_in { get; set; }
		/// <summary>
		/// created_by_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> created_by_ni { get; set; }
		/// <summary>
		/// created_by_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? created_by_between { get; set; }
		/// <summary>
		/// created_byがNULLか
		/// </summary>
		[DataMember] public bool created_by_isnull { get; set; } =  false ;
		/// <summary>
		/// created_byがNULLではないか
		/// </summary>
		[DataMember] public bool created_by_isnotnull { get; set; } = false;
		#endregion
		#region modified_at
		/// <summary>
		/// modified_at_eqと等しい
		/// </summary>
		[DataMember] public DateTime? modified_at_eq { get; set; }
		/// <summary>
		/// modified_at_neと等しくない
		/// </summary>
		[DataMember] public DateTime? modified_at_ne { get; set; }
		/// <summary>
		/// modified_at_ltより小さい
		/// </summary>
		[DataMember] public DateTime? modified_at_lt { get; set; }
		/// <summary>
		/// modified_at_gtより大きい
		/// </summary>
		[DataMember] public DateTime? modified_at_gt { get; set; }
		/// <summary>
		/// modified_at_le以下
		/// </summary>
		[DataMember] public DateTime? modified_at_le { get; set; }
		/// <summary>
		/// modified_at_ge以上
		/// </summary>
		[DataMember] public DateTime? modified_at_ge { get; set; }
		/// <summary>
		/// modified_at_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> modified_at_in { get; set; }
		/// <summary>
		/// modified_at_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> modified_at_ni { get; set; }
		/// <summary>
		/// modified_at_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? modified_at_between { get; set; }
		#endregion
		#region modified_by
		/// <summary>
		/// modified_by_eqと等しい
		/// </summary>
		[DataMember] public int? modified_by_eq { get; set; }
		/// <summary>
		/// modified_by_neと等しくない
		/// </summary>
		[DataMember] public int? modified_by_ne { get; set; }
		/// <summary>
		/// modified_by_ltより小さい
		/// </summary>
		[DataMember] public int? modified_by_lt { get; set; }
		/// <summary>
		/// modified_by_gtより大きい
		/// </summary>
		[DataMember] public int? modified_by_gt { get; set; }
		/// <summary>
		/// modified_by_le以下
		/// </summary>
		[DataMember] public int? modified_by_le { get; set; }
		/// <summary>
		/// modified_by_ge以上
		/// </summary>
		[DataMember] public int? modified_by_ge { get; set; }
		/// <summary>
		/// modified_by_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> modified_by_in { get; set; }
		/// <summary>
		/// modified_by_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> modified_by_ni { get; set; }
		/// <summary>
		/// modified_by_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? modified_by_between { get; set; }
		/// <summary>
		/// modified_byがNULLか
		/// </summary>
		[DataMember] public bool modified_by_isnull { get; set; } =  false ;
		/// <summary>
		/// modified_byがNULLではないか
		/// </summary>
		[DataMember] public bool modified_by_isnotnull { get; set; } = false;
		#endregion
		#region removed_at
		/// <summary>
		/// removed_at_eqと等しい
		/// </summary>
		[DataMember] public DateTime? removed_at_eq { get; set; }
		/// <summary>
		/// removed_at_neと等しくない
		/// </summary>
		[DataMember] public DateTime? removed_at_ne { get; set; }
		/// <summary>
		/// removed_at_ltより小さい
		/// </summary>
		[DataMember] public DateTime? removed_at_lt { get; set; }
		/// <summary>
		/// removed_at_gtより大きい
		/// </summary>
		[DataMember] public DateTime? removed_at_gt { get; set; }
		/// <summary>
		/// removed_at_le以下
		/// </summary>
		[DataMember] public DateTime? removed_at_le { get; set; }
		/// <summary>
		/// removed_at_ge以上
		/// </summary>
		[DataMember] public DateTime? removed_at_ge { get; set; }
		/// <summary>
		/// removed_at_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> removed_at_in { get; set; }
		/// <summary>
		/// removed_at_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> removed_at_ni { get; set; }
		/// <summary>
		/// removed_at_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? removed_at_between { get; set; }
		/// <summary>
		/// removed_atがNULLか
		/// </summary>
		[DataMember] public bool removed_at_isnull { get; set; } =  true ;
		/// <summary>
		/// removed_atがNULLではないか
		/// </summary>
		[DataMember] public bool removed_at_isnotnull { get; set; } = false;
		#endregion
		#region row_version
		/// <summary>
		/// row_version_eqと等しい
		/// </summary>
		[DataMember] public byte[] row_version_eq { get; set; }
		/// <summary>
		/// row_version_neと等しくない
		/// </summary>
		[DataMember] public byte[] row_version_ne { get; set; }
		/// <summary>
		/// row_versionがNULLか
		/// </summary>
		[DataMember] public bool row_version_isnull { get; set; } =  false ;
		/// <summary>
		/// row_versionがNULLではないか
		/// </summary>
		[DataMember] public bool row_version_isnotnull { get; set; } = false;
		#endregion
		#endregion

		#region override
		override public Expression<Func<AddressType, bool>> CreatePredicate()
		{
			var predicate = base.CreatePredicate();

			#region uid
			if (uid_eq != null) predicate = predicate.And(_ => _.uid == uid_eq);
			if (uid_ne != null) predicate = predicate.And(_ => _.uid != uid_ne);
			if (uid_lt != null) predicate = predicate.And(_ => _.uid < uid_lt);
			if (uid_gt != null) predicate = predicate.And(_ => _.uid > uid_gt);
			if (uid_le != null) predicate = predicate.And(_ => _.uid <= uid_le);
			if (uid_ge != null) predicate = predicate.And(_ => _.uid >= uid_ge);
			if (uid_in != null) predicate = predicate.And(_ => uid_in.Contains(_.uid));
			if (uid_ni != null) predicate = predicate.And(_ => !uid_ni.Contains(_.uid));
			#endregion
			#region address_type_id
			if (address_type_id_eq != null) predicate = predicate.And(_ => _.address_type_id == address_type_id_eq);
			if (address_type_id_ne != null) predicate = predicate.And(_ => _.address_type_id != address_type_id_ne);
			if (address_type_id_lt != null) predicate = predicate.And(_ => _.address_type_id < address_type_id_lt);
			if (address_type_id_gt != null) predicate = predicate.And(_ => _.address_type_id > address_type_id_gt);
			if (address_type_id_le != null) predicate = predicate.And(_ => _.address_type_id <= address_type_id_le);
			if (address_type_id_ge != null) predicate = predicate.And(_ => _.address_type_id >= address_type_id_ge);
			if (address_type_id_in != null) predicate = predicate.And(_ => address_type_id_in.Contains(_.address_type_id));
			if (address_type_id_ni != null) predicate = predicate.And(_ => !address_type_id_ni.Contains(_.address_type_id));
			#endregion
			#region name
			if (name_eq != null) predicate = predicate.And(_ => _.name == name_eq);
			if (name_ne != null) predicate = predicate.And(_ => _.name != name_ne);
			if (name_lt != null) predicate = predicate.And(_ => name_lt.CompareTo(_.name) > 0);
			if (name_gt != null) predicate = predicate.And(_ => name_gt.CompareTo(_.name) < 0);
			if (name_le != null) predicate = predicate.And(_ => name_le.CompareTo(_.name) >= 0);
			if (name_ge != null) predicate = predicate.And(_ => name_ge.CompareTo(_.name) <= 0);
			if (name_in != null) predicate = predicate.And(_ => name_in.Contains(_.name));
			if (name_ni != null) predicate = predicate.And(_ => !name_ni.Contains(_.name));
			#endregion
			#region description
			if (description_eq != null) predicate = predicate.And(_ => _.description == description_eq);
			if (description_ne != null) predicate = predicate.And(_ => _.description != description_ne);
			if (description_lt != null) predicate = predicate.And(_ => description_lt.CompareTo(_.description) > 0);
			if (description_gt != null) predicate = predicate.And(_ => description_gt.CompareTo(_.description) < 0);
			if (description_le != null) predicate = predicate.And(_ => description_le.CompareTo(_.description) >= 0);
			if (description_ge != null) predicate = predicate.And(_ => description_ge.CompareTo(_.description) <= 0);
			if (description_in != null) predicate = predicate.And(_ => description_in.Contains(_.description));
			if (description_ni != null) predicate = predicate.And(_ => !description_ni.Contains(_.description));
			#endregion
			#region display_order
			if (display_order_eq != null) predicate = predicate.And(_ => _.display_order == display_order_eq);
			if (display_order_ne != null) predicate = predicate.And(_ => _.display_order != display_order_ne);
			if (display_order_lt != null) predicate = predicate.And(_ => _.display_order < display_order_lt);
			if (display_order_gt != null) predicate = predicate.And(_ => _.display_order > display_order_gt);
			if (display_order_le != null) predicate = predicate.And(_ => _.display_order <= display_order_le);
			if (display_order_ge != null) predicate = predicate.And(_ => _.display_order >= display_order_ge);
			if (display_order_in != null) predicate = predicate.And(_ => display_order_in.Contains(_.display_order));
			if (display_order_ni != null) predicate = predicate.And(_ => !display_order_ni.Contains(_.display_order));
			#endregion
			#region created_at
			if (created_at_eq != null) predicate = predicate.And(_ => _.created_at == created_at_eq);
			if (created_at_ne != null) predicate = predicate.And(_ => _.created_at != created_at_ne);
			if (created_at_lt != null) predicate = predicate.And(_ => _.created_at < created_at_lt);
			if (created_at_gt != null) predicate = predicate.And(_ => _.created_at > created_at_gt);
			if (created_at_le != null) predicate = predicate.And(_ => _.created_at <= created_at_le);
			if (created_at_ge != null) predicate = predicate.And(_ => _.created_at >= created_at_ge);
			if (created_at_in != null) predicate = predicate.And(_ => created_at_in.Contains(_.created_at));
			if (created_at_ni != null) predicate = predicate.And(_ => !created_at_ni.Contains(_.created_at));
			#endregion
			#region created_by
			if (created_by_eq != null) predicate = predicate.And(_ => _.created_by == created_by_eq);
			if (created_by_ne != null) predicate = predicate.And(_ => _.created_by != created_by_ne);
			if (created_by_lt != null) predicate = predicate.And(_ => _.created_by < created_by_lt);
			if (created_by_gt != null) predicate = predicate.And(_ => _.created_by > created_by_gt);
			if (created_by_le != null) predicate = predicate.And(_ => _.created_by <= created_by_le);
			if (created_by_ge != null) predicate = predicate.And(_ => _.created_by >= created_by_ge);
			if (created_by_in != null) predicate = predicate.And(_ => created_by_in.Contains(_.created_by.Value));
			if (created_by_ni != null) predicate = predicate.And(_ => !created_by_ni.Contains(_.created_by.Value));
			if (created_by_isnull) predicate = predicate.And(_ => _.created_by == null);
			if (created_by_isnotnull) predicate = predicate.And(_ => _.created_by != null);
			#endregion
			#region modified_at
			if (modified_at_eq != null) predicate = predicate.And(_ => _.modified_at == modified_at_eq);
			if (modified_at_ne != null) predicate = predicate.And(_ => _.modified_at != modified_at_ne);
			if (modified_at_lt != null) predicate = predicate.And(_ => _.modified_at < modified_at_lt);
			if (modified_at_gt != null) predicate = predicate.And(_ => _.modified_at > modified_at_gt);
			if (modified_at_le != null) predicate = predicate.And(_ => _.modified_at <= modified_at_le);
			if (modified_at_ge != null) predicate = predicate.And(_ => _.modified_at >= modified_at_ge);
			if (modified_at_in != null) predicate = predicate.And(_ => modified_at_in.Contains(_.modified_at));
			if (modified_at_ni != null) predicate = predicate.And(_ => !modified_at_ni.Contains(_.modified_at));
			#endregion
			#region modified_by
			if (modified_by_eq != null) predicate = predicate.And(_ => _.modified_by == modified_by_eq);
			if (modified_by_ne != null) predicate = predicate.And(_ => _.modified_by != modified_by_ne);
			if (modified_by_lt != null) predicate = predicate.And(_ => _.modified_by < modified_by_lt);
			if (modified_by_gt != null) predicate = predicate.And(_ => _.modified_by > modified_by_gt);
			if (modified_by_le != null) predicate = predicate.And(_ => _.modified_by <= modified_by_le);
			if (modified_by_ge != null) predicate = predicate.And(_ => _.modified_by >= modified_by_ge);
			if (modified_by_in != null) predicate = predicate.And(_ => modified_by_in.Contains(_.modified_by.Value));
			if (modified_by_ni != null) predicate = predicate.And(_ => !modified_by_ni.Contains(_.modified_by.Value));
			if (modified_by_isnull) predicate = predicate.And(_ => _.modified_by == null);
			if (modified_by_isnotnull) predicate = predicate.And(_ => _.modified_by != null);
			#endregion
			#region removed_at
			if (removed_at_eq != null) predicate = predicate.And(_ => _.removed_at == removed_at_eq);
			if (removed_at_ne != null) predicate = predicate.And(_ => _.removed_at != removed_at_ne);
			if (removed_at_lt != null) predicate = predicate.And(_ => _.removed_at < removed_at_lt);
			if (removed_at_gt != null) predicate = predicate.And(_ => _.removed_at > removed_at_gt);
			if (removed_at_le != null) predicate = predicate.And(_ => _.removed_at <= removed_at_le);
			if (removed_at_ge != null) predicate = predicate.And(_ => _.removed_at >= removed_at_ge);
			if (removed_at_in != null) predicate = predicate.And(_ => removed_at_in.Contains(_.removed_at.Value));
			if (removed_at_ni != null) predicate = predicate.And(_ => !removed_at_ni.Contains(_.removed_at.Value));
			if (removed_at_isnull) predicate = predicate.And(_ => _.removed_at == null);
			if (removed_at_isnotnull) predicate = predicate.And(_ => _.removed_at != null);
			#endregion
			#region row_version
			if (row_version_eq != null) predicate = predicate.And(_ => _.row_version == row_version_eq);
			if (row_version_ne != null) predicate = predicate.And(_ => _.row_version != row_version_ne);
			if (row_version_isnull) predicate = predicate.And(_ => _.row_version == null);
			if (row_version_isnotnull) predicate = predicate.And(_ => _.row_version != null);
			#endregion

			return predicate;
		}
		#endregion
	}
	#endregion
	#endregion
	#region 連絡先
	/// <summary>
	/// 連絡先
	/// </summary>
	[Table(Schema="Common", Name="Contact"), DataContract]
	public partial class Contact : TableBase<Contact>, INotifyPropertyChanged
	{
		#region uid : int

		private int _uid;
		/// <summary>
		/// ユニークID
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull, Identity]
		public  int  uid
		{
			get { return _uid; }
			set
			{
				if (_uid != value)
				{
					BeforeuidChanged(value);
					_uid = value;
					AfteruidChanged();

					OnuidChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeuidChanged(int newValue);
		partial void AfteruidChanged();

		public const string NameOfuid = "uid";

		private static readonly PropertyChangedEventArgs _uidChangedEventArgs = new PropertyChangedEventArgs(NameOfuid);

		private void OnuidChanged()
		{
			OnPropertyChanged(_uidChangedEventArgs);
		}

		#endregion

		#endregion
		#region user_type : int

		private int _user_type;
		/// <summary>
		/// 利用者種別
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull, PrimaryKey(Order = 1), System.ComponentModel.DataAnnotations.Required]
		public  int  user_type
		{
			get { return _user_type; }
			set
			{
				if (_user_type != value)
				{
					Beforeuser_typeChanged(value);
					_user_type = value;
					Afteruser_typeChanged();

					Onuser_typeChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeuser_typeChanged(int newValue);
		partial void Afteruser_typeChanged();

		public const string NameOfuser_type = "user_type";

		private static readonly PropertyChangedEventArgs _user_typeChangedEventArgs = new PropertyChangedEventArgs(NameOfuser_type);

		private void Onuser_typeChanged()
		{
			OnPropertyChanged(_user_typeChangedEventArgs);
		}

		#endregion

		#endregion
		#region generic_user_no : string

		private string _generic_user_no;
		/// <summary>
		/// 利用者番号
		/// </summary>
		[Column(DbType="varchar(16)", DataType=DataType.VarChar, Length=16), DataMember, NotNull, PrimaryKey(Order = 2), System.ComponentModel.DataAnnotations.Required]
		public  string  generic_user_no
		{
			get { return _generic_user_no; }
			set
			{
				if (_generic_user_no != value)
				{
					Beforegeneric_user_noChanged(value);
					_generic_user_no = value;
					Aftergeneric_user_noChanged();

					Ongeneric_user_noChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforegeneric_user_noChanged(string newValue);
		partial void Aftergeneric_user_noChanged();

		public const string NameOfgeneric_user_no = "generic_user_no";

		private static readonly PropertyChangedEventArgs _generic_user_noChangedEventArgs = new PropertyChangedEventArgs(NameOfgeneric_user_no);

		private void Ongeneric_user_noChanged()
		{
			OnPropertyChanged(_generic_user_noChangedEventArgs);
		}

		#endregion

		#endregion
		#region seq : int

		private int _seq;
		/// <summary>
		/// 連番
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull, PrimaryKey(Order = 3), System.ComponentModel.DataAnnotations.Required]
		public  int  seq
		{
			get { return _seq; }
			set
			{
				if (_seq != value)
				{
					BeforeseqChanged(value);
					_seq = value;
					AfterseqChanged();

					OnseqChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeseqChanged(int newValue);
		partial void AfterseqChanged();

		public const string NameOfseq = "seq";

		private static readonly PropertyChangedEventArgs _seqChangedEventArgs = new PropertyChangedEventArgs(NameOfseq);

		private void OnseqChanged()
		{
			OnPropertyChanged(_seqChangedEventArgs);
		}

		#endregion

		#endregion
		#region contact_type_id : int

		private int _contact_type_id;
		/// <summary>
		/// 連絡先種別
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull, System.ComponentModel.DataAnnotations.Required]
		public  int  contact_type_id
		{
			get { return _contact_type_id; }
			set
			{
				if (_contact_type_id != value)
				{
					Beforecontact_type_idChanged(value);
					_contact_type_id = value;
					Aftercontact_type_idChanged();

					Oncontact_type_idChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecontact_type_idChanged(int newValue);
		partial void Aftercontact_type_idChanged();

		public const string NameOfcontact_type_id = "contact_type_id";

		private static readonly PropertyChangedEventArgs _contact_type_idChangedEventArgs = new PropertyChangedEventArgs(NameOfcontact_type_id);

		private void Oncontact_type_idChanged()
		{
			OnPropertyChanged(_contact_type_idChangedEventArgs);
		}

		#endregion

		#endregion
		#region contact : string

		private string _contact;
		/// <summary>
		/// 連絡先
		/// </summary>
		[Column(DbType="nvarchar(20)", DataType=DataType.NVarChar, Length=20), DataMember, NotNull, System.ComponentModel.DataAnnotations.Required]
		public  string  contact
		{
			get { return _contact; }
			set
			{
				if (_contact != value)
				{
					BeforecontactChanged(value);
					_contact = value;
					AftercontactChanged();

					OncontactChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforecontactChanged(string newValue);
		partial void AftercontactChanged();

		public const string NameOfcontact = "contact";

		private static readonly PropertyChangedEventArgs _contactChangedEventArgs = new PropertyChangedEventArgs(NameOfcontact);

		private void OncontactChanged()
		{
			OnPropertyChanged(_contactChangedEventArgs);
		}

		#endregion

		#endregion
		#region note : string

		private string _note;
		/// <summary>
		/// 備考
		/// </summary>
		[Column(DbType="nvarchar(200)", DataType=DataType.NVarChar, Length=200), DataMember, NotNull]
		public  string  note
		{
			get { return _note; }
			set
			{
				if (_note != value)
				{
					BeforenoteChanged(value);
					_note = value;
					AfternoteChanged();

					OnnoteChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforenoteChanged(string newValue);
		partial void AfternoteChanged();

		public const string NameOfnote = "note";

		private static readonly PropertyChangedEventArgs _noteChangedEventArgs = new PropertyChangedEventArgs(NameOfnote);

		private void OnnoteChanged()
		{
			OnPropertyChanged(_noteChangedEventArgs);
		}

		#endregion

		#endregion
		#region created_at : DateTime

		private DateTime _created_at;
		/// <summary>
		/// 作成日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, NotNull]
		public  DateTime  created_at
		{
			get { return _created_at; }
			set
			{
				if (_created_at != value)
				{
					Beforecreated_atChanged(value);
					_created_at = value;
					Aftercreated_atChanged();

					Oncreated_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecreated_atChanged(DateTime newValue);
		partial void Aftercreated_atChanged();

		public const string NameOfcreated_at = "created_at";

		private static readonly PropertyChangedEventArgs _created_atChangedEventArgs = new PropertyChangedEventArgs(NameOfcreated_at);

		private void Oncreated_atChanged()
		{
			OnPropertyChanged(_created_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region created_by : int?

		private int? _created_by;
		/// <summary>
		/// 作成者
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, Nullable]
		public  int?  created_by
		{
			get { return _created_by; }
			set
			{
				if (_created_by != value)
				{
					Beforecreated_byChanged(value);
					_created_by = value;
					Aftercreated_byChanged();

					Oncreated_byChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecreated_byChanged(int? newValue);
		partial void Aftercreated_byChanged();

		public const string NameOfcreated_by = "created_by";

		private static readonly PropertyChangedEventArgs _created_byChangedEventArgs = new PropertyChangedEventArgs(NameOfcreated_by);

		private void Oncreated_byChanged()
		{
			OnPropertyChanged(_created_byChangedEventArgs);
		}

		#endregion

		#endregion
		#region modified_at : DateTime

		private DateTime _modified_at;
		/// <summary>
		/// 更新日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, NotNull]
		public  DateTime  modified_at
		{
			get { return _modified_at; }
			set
			{
				if (_modified_at != value)
				{
					Beforemodified_atChanged(value);
					_modified_at = value;
					Aftermodified_atChanged();

					Onmodified_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforemodified_atChanged(DateTime newValue);
		partial void Aftermodified_atChanged();

		public const string NameOfmodified_at = "modified_at";

		private static readonly PropertyChangedEventArgs _modified_atChangedEventArgs = new PropertyChangedEventArgs(NameOfmodified_at);

		private void Onmodified_atChanged()
		{
			OnPropertyChanged(_modified_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region modified_by : int?

		private int? _modified_by;
		/// <summary>
		/// 更新者
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, Nullable]
		public  int?  modified_by
		{
			get { return _modified_by; }
			set
			{
				if (_modified_by != value)
				{
					Beforemodified_byChanged(value);
					_modified_by = value;
					Aftermodified_byChanged();

					Onmodified_byChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforemodified_byChanged(int? newValue);
		partial void Aftermodified_byChanged();

		public const string NameOfmodified_by = "modified_by";

		private static readonly PropertyChangedEventArgs _modified_byChangedEventArgs = new PropertyChangedEventArgs(NameOfmodified_by);

		private void Onmodified_byChanged()
		{
			OnPropertyChanged(_modified_byChangedEventArgs);
		}

		#endregion

		#endregion
		#region row_version : byte[]

		private byte[] _row_version;
		/// <summary>
		/// 版
		/// </summary>
		[Column(DbType="timestamp", DataType=DataType.Timestamp, SkipOnInsert=true, SkipOnUpdate=true), DataMember, Nullable]
		public  byte[]  row_version
		{
			get { return _row_version; }
			set
			{
				if (_row_version != value)
				{
					Beforerow_versionChanged(value);
					_row_version = value;
					Afterrow_versionChanged();

					Onrow_versionChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforerow_versionChanged(byte[] newValue);
		partial void Afterrow_versionChanged();

		public const string NameOfrow_version = "row_version";

		private static readonly PropertyChangedEventArgs _row_versionChangedEventArgs = new PropertyChangedEventArgs(NameOfrow_version);

		private void Onrow_versionChanged()
		{
			OnPropertyChanged(_row_versionChangedEventArgs);
		}

		#endregion

		#endregion

		#region enum用アクセスラッパー
		/// <summary>
		/// user_typeのenumラッパー
		/// </summary>
		[ColumnAlias("user_type")]
		public UserType UserType
		{
			get => (UserType)user_type;
			set => user_type = value.Val();
		}
		#endregion

		#region Constructor

		public Contact()
		{
			#region フィールド初期化
			uid = default(int);
			user_type = 99;
			generic_user_no = null;
			seq = 0;
			contact_type_id = 0;
			contact = "";
			note = "";
			created_at = DateTime.UtcNow;
			created_by = null;
			modified_at = DateTime.UtcNow;
			modified_by = null;
			row_version = default(byte[]);
			#endregion
		}

		#endregion

		#region Association

		#region ContactType : contact_type_id (FK_Contact_ContactType)

		private ContactType _ContactType;
		/// <summary>
		/// FK_Contact_ContactType
		/// </summary>
		[Association(ThisKey="contact_type_id", OtherKey="contact_type_id", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_Contact_ContactType", BackReferenceName="Contact"), DataMember]
		public  ContactType  ContactType
		{
			get { return _ContactType; }
			set
			{
				if (_ContactType != value)
				{
					BeforeContactTypeChanged(value);
					_ContactType = value;
					AfterContactTypeChanged();

					OnContactTypeChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeContactTypeChanged(ContactType newValue);
		partial void AfterContactTypeChanged ();

		public const string NameOfContactType = "ContactType";

		private static readonly PropertyChangedEventArgs _ContactTypeChangedEventArgs = new PropertyChangedEventArgs(NameOfContactType);

		private void OnContactTypeChanged()
		{
			OnPropertyChanged(_ContactTypeChangedEventArgs);
		}

		#endregion

		#endregion
		#region Staff : user_type,generic_user_no (FK_Contact_Staff)

		private Staff _Staff;
		/// <summary>
		/// FK_Contact_Staff
		/// </summary>
		[Association(ThisKey="user_type,generic_user_no", OtherKey="user_type,staff_no", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_Contact_Staff", BackReferenceName="Contact"), DataMember]
		public  Staff  Staff
		{
			get { return _Staff; }
			set
			{
				if (_Staff != value)
				{
					BeforeStaffChanged(value);
					_Staff = value;
					AfterStaffChanged();

					OnStaffChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeStaffChanged(Staff newValue);
		partial void AfterStaffChanged ();

		public const string NameOfStaff = "Staff";

		private static readonly PropertyChangedEventArgs _StaffChangedEventArgs = new PropertyChangedEventArgs(NameOfStaff);

		private void OnStaffChanged()
		{
			OnPropertyChanged(_StaffChangedEventArgs);
		}

		#endregion

		#endregion
		#region Teacher : user_type,generic_user_no (FK_Contack_Teacher)

		private Teacher _Teacher;
		/// <summary>
		/// FK_Contack_Teacher
		/// </summary>
		[Association(ThisKey="user_type,generic_user_no", OtherKey="user_type,teacher_no", CanBeNull=true, Relationship=Relationship.ManyToOne, KeyName="FK_Contack_Teacher", BackReferenceName="Contact"), DataMember]
		public  Teacher  Teacher
		{
			get { return _Teacher; }
			set
			{
				if (_Teacher != value)
				{
					BeforeTeacherChanged(value);
					_Teacher = value;
					AfterTeacherChanged();

					OnTeacherChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeTeacherChanged(Teacher newValue);
		partial void AfterTeacherChanged ();

		public const string NameOfTeacher = "Teacher";

		private static readonly PropertyChangedEventArgs _TeacherChangedEventArgs = new PropertyChangedEventArgs(NameOfTeacher);

		private void OnTeacherChanged()
		{
			OnPropertyChanged(_TeacherChangedEventArgs);
		}

		#endregion

		#endregion

		#endregion

		#region INotifyPropertyChanged support

		[field : NonSerialized]
		public virtual event PropertyChangedEventHandler PropertyChanged;

		protected void OnPropertyChanged(string propertyName)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		protected void OnPropertyChanged(PropertyChangedEventArgs arg)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, arg);
			}
		}

		#endregion

	}
	#region 連絡先条件
	/// <summary>
	/// 連絡先条件
	/// </summary>
	[DataContract]
	public partial class ContactCondition : ContactConditionBase
	{
	}

	/// <summary>
	/// 連絡先条件ベース
	/// </summary>
	[DataContract]
	public class ContactConditionBase : ConditionBase<Contact>
	{
		#region properties
		#region uid
		/// <summary>
		/// uid_eqと等しい
		/// </summary>
		[DataMember] public int? uid_eq { get; set; }
		/// <summary>
		/// uid_neと等しくない
		/// </summary>
		[DataMember] public int? uid_ne { get; set; }
		/// <summary>
		/// uid_ltより小さい
		/// </summary>
		[DataMember] public int? uid_lt { get; set; }
		/// <summary>
		/// uid_gtより大きい
		/// </summary>
		[DataMember] public int? uid_gt { get; set; }
		/// <summary>
		/// uid_le以下
		/// </summary>
		[DataMember] public int? uid_le { get; set; }
		/// <summary>
		/// uid_ge以上
		/// </summary>
		[DataMember] public int? uid_ge { get; set; }
		/// <summary>
		/// uid_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> uid_in { get; set; }
		/// <summary>
		/// uid_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> uid_ni { get; set; }
		/// <summary>
		/// uid_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? uid_between { get; set; }
		#endregion
		#region user_type (UserType)
		private int? _user_type_eq;
		/// <summary>
		/// UserType_eqと等しい
		/// </summary>
		[DataMember] public UserType? UserType_eq
		{
			get => _user_type_eq?.ToUserType();
			set => _user_type_eq = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _user_type_ne;
		/// <summary>
		/// UserType_neと等しくない
		/// </summary>
		[DataMember] public UserType? UserType_ne
		{
			get => _user_type_ne?.ToUserType();
			set => _user_type_ne = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _user_type_lt;
		/// <summary>
		/// UserType_ltより小さい
		/// </summary>
		[DataMember] public UserType? UserType_lt
		{
			get => _user_type_lt?.ToUserType();
			set => _user_type_lt = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _user_type_gt;
		/// <summary>
		/// UserType_gtより大きい
		/// </summary>
		[DataMember] public UserType? UserType_gt
		{
			get => _user_type_gt?.ToUserType();
			set => _user_type_gt = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _user_type_le;
		/// <summary>
		/// UserType_le以下
		/// </summary>
		[DataMember] public UserType? UserType_le
		{
			get => _user_type_le?.ToUserType();
			set => _user_type_le = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private int? _user_type_ge;
		/// <summary>
		/// UserType_ge以上
		/// </summary>
		[DataMember] public UserType? UserType_ge
		{
			get => _user_type_ge?.ToUserType();
			set => _user_type_ge = value.HasValue ? value.Value.Val() : (int?)null;
		}
		private IEnumerable<int> _user_type_in;
		/// <summary>
		/// UserType_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<UserType> UserType_in
		{
			get => _user_type_in?.Select(_ => _.ToUserType().Value) ?? Enumerable.Empty<UserType>();
			set => _user_type_in = value.Select(_ => _.Val());
		}
		private IEnumerable<int> _user_type_ni;
		/// <summary>
		/// UserType_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<UserType> UserType_ni
		{
			get => _user_type_ni?.Select(_ => _.ToUserType().Value) ?? Enumerable.Empty<UserType>();
			set => _user_type_ni = value.Select(_ => _.Val());
		}
		private (int low, int high)? _user_type_between;
		/// <summary>
		/// UserType_betweenの範囲内にある
		/// </summary>
		[DataMember] public (UserType low, UserType high)? UserType_between
		{
			get => _user_type_between.HasValue ? (_user_type_between.Value.low.ToUserType().Value, _user_type_between.Value.high.ToUserType().Value) : ((UserType, UserType)?)null;
			set => _user_type_between = value.HasValue ? (value.Value.low.Val(), value.Value.high.Val()) : ((int, int)?)null;
		}
		#endregion
		#region generic_user_no
		/// <summary>
		/// generic_user_no_eqと等しい
		/// </summary>
		[DataMember] public string generic_user_no_eq { get; set; }
		/// <summary>
		/// generic_user_no_neと等しくない
		/// </summary>
		[DataMember] public string generic_user_no_ne { get; set; }
		/// <summary>
		/// generic_user_no_ltより小さい
		/// </summary>
		[DataMember] public string generic_user_no_lt { get; set; }
		/// <summary>
		/// generic_user_no_gtより大きい
		/// </summary>
		[DataMember] public string generic_user_no_gt { get; set; }
		/// <summary>
		/// generic_user_no_le以下
		/// </summary>
		[DataMember] public string generic_user_no_le { get; set; }
		/// <summary>
		/// generic_user_no_ge以上
		/// </summary>
		[DataMember] public string generic_user_no_ge { get; set; }
		/// <summary>
		/// generic_user_no_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> generic_user_no_in { get; set; }
		/// <summary>
		/// generic_user_no_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> generic_user_no_ni { get; set; }
		/// <summary>
		/// generic_user_no_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? generic_user_no_between { get; set; }
		/// <summary>
		/// generic_user_no_likeと部分一致する
		/// </summary>
		[DataMember] public string generic_user_no_like { get; set; }
		#endregion
		#region seq
		/// <summary>
		/// seq_eqと等しい
		/// </summary>
		[DataMember] public int? seq_eq { get; set; }
		/// <summary>
		/// seq_neと等しくない
		/// </summary>
		[DataMember] public int? seq_ne { get; set; }
		/// <summary>
		/// seq_ltより小さい
		/// </summary>
		[DataMember] public int? seq_lt { get; set; }
		/// <summary>
		/// seq_gtより大きい
		/// </summary>
		[DataMember] public int? seq_gt { get; set; }
		/// <summary>
		/// seq_le以下
		/// </summary>
		[DataMember] public int? seq_le { get; set; }
		/// <summary>
		/// seq_ge以上
		/// </summary>
		[DataMember] public int? seq_ge { get; set; }
		/// <summary>
		/// seq_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> seq_in { get; set; }
		/// <summary>
		/// seq_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> seq_ni { get; set; }
		/// <summary>
		/// seq_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? seq_between { get; set; }
		#endregion
		#region contact_type_id
		/// <summary>
		/// contact_type_id_eqと等しい
		/// </summary>
		[DataMember] public int? contact_type_id_eq { get; set; }
		/// <summary>
		/// contact_type_id_neと等しくない
		/// </summary>
		[DataMember] public int? contact_type_id_ne { get; set; }
		/// <summary>
		/// contact_type_id_ltより小さい
		/// </summary>
		[DataMember] public int? contact_type_id_lt { get; set; }
		/// <summary>
		/// contact_type_id_gtより大きい
		/// </summary>
		[DataMember] public int? contact_type_id_gt { get; set; }
		/// <summary>
		/// contact_type_id_le以下
		/// </summary>
		[DataMember] public int? contact_type_id_le { get; set; }
		/// <summary>
		/// contact_type_id_ge以上
		/// </summary>
		[DataMember] public int? contact_type_id_ge { get; set; }
		/// <summary>
		/// contact_type_id_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> contact_type_id_in { get; set; }
		/// <summary>
		/// contact_type_id_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> contact_type_id_ni { get; set; }
		/// <summary>
		/// contact_type_id_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? contact_type_id_between { get; set; }
		#endregion
		#region contact
		/// <summary>
		/// contact_eqと等しい
		/// </summary>
		[DataMember] public string contact_eq { get; set; }
		/// <summary>
		/// contact_neと等しくない
		/// </summary>
		[DataMember] public string contact_ne { get; set; }
		/// <summary>
		/// contact_ltより小さい
		/// </summary>
		[DataMember] public string contact_lt { get; set; }
		/// <summary>
		/// contact_gtより大きい
		/// </summary>
		[DataMember] public string contact_gt { get; set; }
		/// <summary>
		/// contact_le以下
		/// </summary>
		[DataMember] public string contact_le { get; set; }
		/// <summary>
		/// contact_ge以上
		/// </summary>
		[DataMember] public string contact_ge { get; set; }
		/// <summary>
		/// contact_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> contact_in { get; set; }
		/// <summary>
		/// contact_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> contact_ni { get; set; }
		/// <summary>
		/// contact_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? contact_between { get; set; }
		/// <summary>
		/// contact_likeと部分一致する
		/// </summary>
		[DataMember] public string contact_like { get; set; }
		#endregion
		#region note
		/// <summary>
		/// note_eqと等しい
		/// </summary>
		[DataMember] public string note_eq { get; set; }
		/// <summary>
		/// note_neと等しくない
		/// </summary>
		[DataMember] public string note_ne { get; set; }
		/// <summary>
		/// note_ltより小さい
		/// </summary>
		[DataMember] public string note_lt { get; set; }
		/// <summary>
		/// note_gtより大きい
		/// </summary>
		[DataMember] public string note_gt { get; set; }
		/// <summary>
		/// note_le以下
		/// </summary>
		[DataMember] public string note_le { get; set; }
		/// <summary>
		/// note_ge以上
		/// </summary>
		[DataMember] public string note_ge { get; set; }
		/// <summary>
		/// note_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> note_in { get; set; }
		/// <summary>
		/// note_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> note_ni { get; set; }
		/// <summary>
		/// note_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? note_between { get; set; }
		/// <summary>
		/// note_likeと部分一致する
		/// </summary>
		[DataMember] public string note_like { get; set; }
		#endregion
		#region created_at
		/// <summary>
		/// created_at_eqと等しい
		/// </summary>
		[DataMember] public DateTime? created_at_eq { get; set; }
		/// <summary>
		/// created_at_neと等しくない
		/// </summary>
		[DataMember] public DateTime? created_at_ne { get; set; }
		/// <summary>
		/// created_at_ltより小さい
		/// </summary>
		[DataMember] public DateTime? created_at_lt { get; set; }
		/// <summary>
		/// created_at_gtより大きい
		/// </summary>
		[DataMember] public DateTime? created_at_gt { get; set; }
		/// <summary>
		/// created_at_le以下
		/// </summary>
		[DataMember] public DateTime? created_at_le { get; set; }
		/// <summary>
		/// created_at_ge以上
		/// </summary>
		[DataMember] public DateTime? created_at_ge { get; set; }
		/// <summary>
		/// created_at_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> created_at_in { get; set; }
		/// <summary>
		/// created_at_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> created_at_ni { get; set; }
		/// <summary>
		/// created_at_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? created_at_between { get; set; }
		#endregion
		#region created_by
		/// <summary>
		/// created_by_eqと等しい
		/// </summary>
		[DataMember] public int? created_by_eq { get; set; }
		/// <summary>
		/// created_by_neと等しくない
		/// </summary>
		[DataMember] public int? created_by_ne { get; set; }
		/// <summary>
		/// created_by_ltより小さい
		/// </summary>
		[DataMember] public int? created_by_lt { get; set; }
		/// <summary>
		/// created_by_gtより大きい
		/// </summary>
		[DataMember] public int? created_by_gt { get; set; }
		/// <summary>
		/// created_by_le以下
		/// </summary>
		[DataMember] public int? created_by_le { get; set; }
		/// <summary>
		/// created_by_ge以上
		/// </summary>
		[DataMember] public int? created_by_ge { get; set; }
		/// <summary>
		/// created_by_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> created_by_in { get; set; }
		/// <summary>
		/// created_by_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> created_by_ni { get; set; }
		/// <summary>
		/// created_by_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? created_by_between { get; set; }
		/// <summary>
		/// created_byがNULLか
		/// </summary>
		[DataMember] public bool created_by_isnull { get; set; } =  false ;
		/// <summary>
		/// created_byがNULLではないか
		/// </summary>
		[DataMember] public bool created_by_isnotnull { get; set; } = false;
		#endregion
		#region modified_at
		/// <summary>
		/// modified_at_eqと等しい
		/// </summary>
		[DataMember] public DateTime? modified_at_eq { get; set; }
		/// <summary>
		/// modified_at_neと等しくない
		/// </summary>
		[DataMember] public DateTime? modified_at_ne { get; set; }
		/// <summary>
		/// modified_at_ltより小さい
		/// </summary>
		[DataMember] public DateTime? modified_at_lt { get; set; }
		/// <summary>
		/// modified_at_gtより大きい
		/// </summary>
		[DataMember] public DateTime? modified_at_gt { get; set; }
		/// <summary>
		/// modified_at_le以下
		/// </summary>
		[DataMember] public DateTime? modified_at_le { get; set; }
		/// <summary>
		/// modified_at_ge以上
		/// </summary>
		[DataMember] public DateTime? modified_at_ge { get; set; }
		/// <summary>
		/// modified_at_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> modified_at_in { get; set; }
		/// <summary>
		/// modified_at_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> modified_at_ni { get; set; }
		/// <summary>
		/// modified_at_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? modified_at_between { get; set; }
		#endregion
		#region modified_by
		/// <summary>
		/// modified_by_eqと等しい
		/// </summary>
		[DataMember] public int? modified_by_eq { get; set; }
		/// <summary>
		/// modified_by_neと等しくない
		/// </summary>
		[DataMember] public int? modified_by_ne { get; set; }
		/// <summary>
		/// modified_by_ltより小さい
		/// </summary>
		[DataMember] public int? modified_by_lt { get; set; }
		/// <summary>
		/// modified_by_gtより大きい
		/// </summary>
		[DataMember] public int? modified_by_gt { get; set; }
		/// <summary>
		/// modified_by_le以下
		/// </summary>
		[DataMember] public int? modified_by_le { get; set; }
		/// <summary>
		/// modified_by_ge以上
		/// </summary>
		[DataMember] public int? modified_by_ge { get; set; }
		/// <summary>
		/// modified_by_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> modified_by_in { get; set; }
		/// <summary>
		/// modified_by_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> modified_by_ni { get; set; }
		/// <summary>
		/// modified_by_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? modified_by_between { get; set; }
		/// <summary>
		/// modified_byがNULLか
		/// </summary>
		[DataMember] public bool modified_by_isnull { get; set; } =  false ;
		/// <summary>
		/// modified_byがNULLではないか
		/// </summary>
		[DataMember] public bool modified_by_isnotnull { get; set; } = false;
		#endregion
		#region row_version
		/// <summary>
		/// row_version_eqと等しい
		/// </summary>
		[DataMember] public byte[] row_version_eq { get; set; }
		/// <summary>
		/// row_version_neと等しくない
		/// </summary>
		[DataMember] public byte[] row_version_ne { get; set; }
		/// <summary>
		/// row_versionがNULLか
		/// </summary>
		[DataMember] public bool row_version_isnull { get; set; } =  false ;
		/// <summary>
		/// row_versionがNULLではないか
		/// </summary>
		[DataMember] public bool row_version_isnotnull { get; set; } = false;
		#endregion
		#endregion

		#region override
		override public Expression<Func<Contact, bool>> CreatePredicate()
		{
			var predicate = base.CreatePredicate();

			#region uid
			if (uid_eq != null) predicate = predicate.And(_ => _.uid == uid_eq);
			if (uid_ne != null) predicate = predicate.And(_ => _.uid != uid_ne);
			if (uid_lt != null) predicate = predicate.And(_ => _.uid < uid_lt);
			if (uid_gt != null) predicate = predicate.And(_ => _.uid > uid_gt);
			if (uid_le != null) predicate = predicate.And(_ => _.uid <= uid_le);
			if (uid_ge != null) predicate = predicate.And(_ => _.uid >= uid_ge);
			if (uid_in != null) predicate = predicate.And(_ => uid_in.Contains(_.uid));
			if (uid_ni != null) predicate = predicate.And(_ => !uid_ni.Contains(_.uid));
			#endregion
			#region user_type
			if (_user_type_eq != null) predicate = predicate.And(_ => _.user_type == _user_type_eq);
			if (_user_type_ne != null) predicate = predicate.And(_ => _.user_type != _user_type_ne);
			if (_user_type_lt != null) predicate = predicate.And(_ => _.user_type < _user_type_lt);
			if (_user_type_gt != null) predicate = predicate.And(_ => _.user_type > _user_type_gt);
			if (_user_type_le != null) predicate = predicate.And(_ => _.user_type <= _user_type_le);
			if (_user_type_ge != null) predicate = predicate.And(_ => _.user_type >= _user_type_ge);
			if (_user_type_in != null) predicate = predicate.And(_ => _user_type_in.Contains(_.user_type));
			if (_user_type_ni != null) predicate = predicate.And(_ => !_user_type_ni.Contains(_.user_type));
			#endregion
			#region generic_user_no
			if (generic_user_no_eq != null) predicate = predicate.And(_ => _.generic_user_no == generic_user_no_eq);
			if (generic_user_no_ne != null) predicate = predicate.And(_ => _.generic_user_no != generic_user_no_ne);
			if (generic_user_no_lt != null) predicate = predicate.And(_ => generic_user_no_lt.CompareTo(_.generic_user_no) > 0);
			if (generic_user_no_gt != null) predicate = predicate.And(_ => generic_user_no_gt.CompareTo(_.generic_user_no) < 0);
			if (generic_user_no_le != null) predicate = predicate.And(_ => generic_user_no_le.CompareTo(_.generic_user_no) >= 0);
			if (generic_user_no_ge != null) predicate = predicate.And(_ => generic_user_no_ge.CompareTo(_.generic_user_no) <= 0);
			if (generic_user_no_in != null) predicate = predicate.And(_ => generic_user_no_in.Contains(_.generic_user_no));
			if (generic_user_no_ni != null) predicate = predicate.And(_ => !generic_user_no_ni.Contains(_.generic_user_no));
			#endregion
			#region seq
			if (seq_eq != null) predicate = predicate.And(_ => _.seq == seq_eq);
			if (seq_ne != null) predicate = predicate.And(_ => _.seq != seq_ne);
			if (seq_lt != null) predicate = predicate.And(_ => _.seq < seq_lt);
			if (seq_gt != null) predicate = predicate.And(_ => _.seq > seq_gt);
			if (seq_le != null) predicate = predicate.And(_ => _.seq <= seq_le);
			if (seq_ge != null) predicate = predicate.And(_ => _.seq >= seq_ge);
			if (seq_in != null) predicate = predicate.And(_ => seq_in.Contains(_.seq));
			if (seq_ni != null) predicate = predicate.And(_ => !seq_ni.Contains(_.seq));
			#endregion
			#region contact_type_id
			if (contact_type_id_eq != null) predicate = predicate.And(_ => _.contact_type_id == contact_type_id_eq);
			if (contact_type_id_ne != null) predicate = predicate.And(_ => _.contact_type_id != contact_type_id_ne);
			if (contact_type_id_lt != null) predicate = predicate.And(_ => _.contact_type_id < contact_type_id_lt);
			if (contact_type_id_gt != null) predicate = predicate.And(_ => _.contact_type_id > contact_type_id_gt);
			if (contact_type_id_le != null) predicate = predicate.And(_ => _.contact_type_id <= contact_type_id_le);
			if (contact_type_id_ge != null) predicate = predicate.And(_ => _.contact_type_id >= contact_type_id_ge);
			if (contact_type_id_in != null) predicate = predicate.And(_ => contact_type_id_in.Contains(_.contact_type_id));
			if (contact_type_id_ni != null) predicate = predicate.And(_ => !contact_type_id_ni.Contains(_.contact_type_id));
			#endregion
			#region contact
			if (contact_eq != null) predicate = predicate.And(_ => _.contact == contact_eq);
			if (contact_ne != null) predicate = predicate.And(_ => _.contact != contact_ne);
			if (contact_lt != null) predicate = predicate.And(_ => contact_lt.CompareTo(_.contact) > 0);
			if (contact_gt != null) predicate = predicate.And(_ => contact_gt.CompareTo(_.contact) < 0);
			if (contact_le != null) predicate = predicate.And(_ => contact_le.CompareTo(_.contact) >= 0);
			if (contact_ge != null) predicate = predicate.And(_ => contact_ge.CompareTo(_.contact) <= 0);
			if (contact_in != null) predicate = predicate.And(_ => contact_in.Contains(_.contact));
			if (contact_ni != null) predicate = predicate.And(_ => !contact_ni.Contains(_.contact));
			#endregion
			#region note
			if (note_eq != null) predicate = predicate.And(_ => _.note == note_eq);
			if (note_ne != null) predicate = predicate.And(_ => _.note != note_ne);
			if (note_lt != null) predicate = predicate.And(_ => note_lt.CompareTo(_.note) > 0);
			if (note_gt != null) predicate = predicate.And(_ => note_gt.CompareTo(_.note) < 0);
			if (note_le != null) predicate = predicate.And(_ => note_le.CompareTo(_.note) >= 0);
			if (note_ge != null) predicate = predicate.And(_ => note_ge.CompareTo(_.note) <= 0);
			if (note_in != null) predicate = predicate.And(_ => note_in.Contains(_.note));
			if (note_ni != null) predicate = predicate.And(_ => !note_ni.Contains(_.note));
			#endregion
			#region created_at
			if (created_at_eq != null) predicate = predicate.And(_ => _.created_at == created_at_eq);
			if (created_at_ne != null) predicate = predicate.And(_ => _.created_at != created_at_ne);
			if (created_at_lt != null) predicate = predicate.And(_ => _.created_at < created_at_lt);
			if (created_at_gt != null) predicate = predicate.And(_ => _.created_at > created_at_gt);
			if (created_at_le != null) predicate = predicate.And(_ => _.created_at <= created_at_le);
			if (created_at_ge != null) predicate = predicate.And(_ => _.created_at >= created_at_ge);
			if (created_at_in != null) predicate = predicate.And(_ => created_at_in.Contains(_.created_at));
			if (created_at_ni != null) predicate = predicate.And(_ => !created_at_ni.Contains(_.created_at));
			#endregion
			#region created_by
			if (created_by_eq != null) predicate = predicate.And(_ => _.created_by == created_by_eq);
			if (created_by_ne != null) predicate = predicate.And(_ => _.created_by != created_by_ne);
			if (created_by_lt != null) predicate = predicate.And(_ => _.created_by < created_by_lt);
			if (created_by_gt != null) predicate = predicate.And(_ => _.created_by > created_by_gt);
			if (created_by_le != null) predicate = predicate.And(_ => _.created_by <= created_by_le);
			if (created_by_ge != null) predicate = predicate.And(_ => _.created_by >= created_by_ge);
			if (created_by_in != null) predicate = predicate.And(_ => created_by_in.Contains(_.created_by.Value));
			if (created_by_ni != null) predicate = predicate.And(_ => !created_by_ni.Contains(_.created_by.Value));
			if (created_by_isnull) predicate = predicate.And(_ => _.created_by == null);
			if (created_by_isnotnull) predicate = predicate.And(_ => _.created_by != null);
			#endregion
			#region modified_at
			if (modified_at_eq != null) predicate = predicate.And(_ => _.modified_at == modified_at_eq);
			if (modified_at_ne != null) predicate = predicate.And(_ => _.modified_at != modified_at_ne);
			if (modified_at_lt != null) predicate = predicate.And(_ => _.modified_at < modified_at_lt);
			if (modified_at_gt != null) predicate = predicate.And(_ => _.modified_at > modified_at_gt);
			if (modified_at_le != null) predicate = predicate.And(_ => _.modified_at <= modified_at_le);
			if (modified_at_ge != null) predicate = predicate.And(_ => _.modified_at >= modified_at_ge);
			if (modified_at_in != null) predicate = predicate.And(_ => modified_at_in.Contains(_.modified_at));
			if (modified_at_ni != null) predicate = predicate.And(_ => !modified_at_ni.Contains(_.modified_at));
			#endregion
			#region modified_by
			if (modified_by_eq != null) predicate = predicate.And(_ => _.modified_by == modified_by_eq);
			if (modified_by_ne != null) predicate = predicate.And(_ => _.modified_by != modified_by_ne);
			if (modified_by_lt != null) predicate = predicate.And(_ => _.modified_by < modified_by_lt);
			if (modified_by_gt != null) predicate = predicate.And(_ => _.modified_by > modified_by_gt);
			if (modified_by_le != null) predicate = predicate.And(_ => _.modified_by <= modified_by_le);
			if (modified_by_ge != null) predicate = predicate.And(_ => _.modified_by >= modified_by_ge);
			if (modified_by_in != null) predicate = predicate.And(_ => modified_by_in.Contains(_.modified_by.Value));
			if (modified_by_ni != null) predicate = predicate.And(_ => !modified_by_ni.Contains(_.modified_by.Value));
			if (modified_by_isnull) predicate = predicate.And(_ => _.modified_by == null);
			if (modified_by_isnotnull) predicate = predicate.And(_ => _.modified_by != null);
			#endregion
			#region row_version
			if (row_version_eq != null) predicate = predicate.And(_ => _.row_version == row_version_eq);
			if (row_version_ne != null) predicate = predicate.And(_ => _.row_version != row_version_ne);
			if (row_version_isnull) predicate = predicate.And(_ => _.row_version == null);
			if (row_version_isnotnull) predicate = predicate.And(_ => _.row_version != null);
			#endregion

			return predicate;
		}
		#endregion
	}
	#endregion
	#endregion
	#region 連絡先種別
	/// <summary>
	/// 連絡先種別
	/// </summary>
	[Table(Schema="Master", Name="ContactType"), DataContract]
	public partial class ContactType : TableBase<ContactType>, INotifyPropertyChanged
	{
		#region uid : int

		private int _uid;
		/// <summary>
		/// ユニークID
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull, Identity]
		public  int  uid
		{
			get { return _uid; }
			set
			{
				if (_uid != value)
				{
					BeforeuidChanged(value);
					_uid = value;
					AfteruidChanged();

					OnuidChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforeuidChanged(int newValue);
		partial void AfteruidChanged();

		public const string NameOfuid = "uid";

		private static readonly PropertyChangedEventArgs _uidChangedEventArgs = new PropertyChangedEventArgs(NameOfuid);

		private void OnuidChanged()
		{
			OnPropertyChanged(_uidChangedEventArgs);
		}

		#endregion

		#endregion
		#region contact_type_id : int

		private int _contact_type_id;
		/// <summary>
		/// 連絡先種別ID
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull, PrimaryKey(Order = 1), System.ComponentModel.DataAnnotations.Required]
		public  int  contact_type_id
		{
			get { return _contact_type_id; }
			set
			{
				if (_contact_type_id != value)
				{
					Beforecontact_type_idChanged(value);
					_contact_type_id = value;
					Aftercontact_type_idChanged();

					Oncontact_type_idChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecontact_type_idChanged(int newValue);
		partial void Aftercontact_type_idChanged();

		public const string NameOfcontact_type_id = "contact_type_id";

		private static readonly PropertyChangedEventArgs _contact_type_idChangedEventArgs = new PropertyChangedEventArgs(NameOfcontact_type_id);

		private void Oncontact_type_idChanged()
		{
			OnPropertyChanged(_contact_type_idChangedEventArgs);
		}

		#endregion

		#endregion
		#region name : string

		private string _name;
		/// <summary>
		/// 名称
		/// </summary>
		[Column(DbType="nvarchar(10)", DataType=DataType.NVarChar, Length=10), DataMember, NotNull, System.ComponentModel.DataAnnotations.Required]
		public  string  name
		{
			get { return _name; }
			set
			{
				if (_name != value)
				{
					BeforenameChanged(value);
					_name = value;
					AfternameChanged();

					OnnameChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforenameChanged(string newValue);
		partial void AfternameChanged();

		public const string NameOfname = "name";

		private static readonly PropertyChangedEventArgs _nameChangedEventArgs = new PropertyChangedEventArgs(NameOfname);

		private void OnnameChanged()
		{
			OnPropertyChanged(_nameChangedEventArgs);
		}

		#endregion

		#endregion
		#region description : string

		private string _description;
		/// <summary>
		/// 説明
		/// </summary>
		[Column(DbType="nvarchar(64)", DataType=DataType.NVarChar, Length=64), DataMember, NotNull]
		public  string  description
		{
			get { return _description; }
			set
			{
				if (_description != value)
				{
					BeforedescriptionChanged(value);
					_description = value;
					AfterdescriptionChanged();

					OndescriptionChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void BeforedescriptionChanged(string newValue);
		partial void AfterdescriptionChanged();

		public const string NameOfdescription = "description";

		private static readonly PropertyChangedEventArgs _descriptionChangedEventArgs = new PropertyChangedEventArgs(NameOfdescription);

		private void OndescriptionChanged()
		{
			OnPropertyChanged(_descriptionChangedEventArgs);
		}

		#endregion

		#endregion
		#region display_order : int

		private int _display_order;
		/// <summary>
		/// 表示順
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, NotNull, System.ComponentModel.DataAnnotations.Required]
		public  int  display_order
		{
			get { return _display_order; }
			set
			{
				if (_display_order != value)
				{
					Beforedisplay_orderChanged(value);
					_display_order = value;
					Afterdisplay_orderChanged();

					Ondisplay_orderChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforedisplay_orderChanged(int newValue);
		partial void Afterdisplay_orderChanged();

		public const string NameOfdisplay_order = "display_order";

		private static readonly PropertyChangedEventArgs _display_orderChangedEventArgs = new PropertyChangedEventArgs(NameOfdisplay_order);

		private void Ondisplay_orderChanged()
		{
			OnPropertyChanged(_display_orderChangedEventArgs);
		}

		#endregion

		#endregion
		#region created_at : DateTime

		private DateTime _created_at;
		/// <summary>
		/// 作成日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, NotNull]
		public  DateTime  created_at
		{
			get { return _created_at; }
			set
			{
				if (_created_at != value)
				{
					Beforecreated_atChanged(value);
					_created_at = value;
					Aftercreated_atChanged();

					Oncreated_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecreated_atChanged(DateTime newValue);
		partial void Aftercreated_atChanged();

		public const string NameOfcreated_at = "created_at";

		private static readonly PropertyChangedEventArgs _created_atChangedEventArgs = new PropertyChangedEventArgs(NameOfcreated_at);

		private void Oncreated_atChanged()
		{
			OnPropertyChanged(_created_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region created_by : int?

		private int? _created_by;
		/// <summary>
		/// 作成者
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, Nullable]
		public  int?  created_by
		{
			get { return _created_by; }
			set
			{
				if (_created_by != value)
				{
					Beforecreated_byChanged(value);
					_created_by = value;
					Aftercreated_byChanged();

					Oncreated_byChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforecreated_byChanged(int? newValue);
		partial void Aftercreated_byChanged();

		public const string NameOfcreated_by = "created_by";

		private static readonly PropertyChangedEventArgs _created_byChangedEventArgs = new PropertyChangedEventArgs(NameOfcreated_by);

		private void Oncreated_byChanged()
		{
			OnPropertyChanged(_created_byChangedEventArgs);
		}

		#endregion

		#endregion
		#region modified_at : DateTime

		private DateTime _modified_at;
		/// <summary>
		/// 更新日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, NotNull]
		public  DateTime  modified_at
		{
			get { return _modified_at; }
			set
			{
				if (_modified_at != value)
				{
					Beforemodified_atChanged(value);
					_modified_at = value;
					Aftermodified_atChanged();

					Onmodified_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforemodified_atChanged(DateTime newValue);
		partial void Aftermodified_atChanged();

		public const string NameOfmodified_at = "modified_at";

		private static readonly PropertyChangedEventArgs _modified_atChangedEventArgs = new PropertyChangedEventArgs(NameOfmodified_at);

		private void Onmodified_atChanged()
		{
			OnPropertyChanged(_modified_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region modified_by : int?

		private int? _modified_by;
		/// <summary>
		/// 更新者
		/// </summary>
		[Column(DbType="int", DataType=DataType.Int32), DataMember, Nullable]
		public  int?  modified_by
		{
			get { return _modified_by; }
			set
			{
				if (_modified_by != value)
				{
					Beforemodified_byChanged(value);
					_modified_by = value;
					Aftermodified_byChanged();

					Onmodified_byChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforemodified_byChanged(int? newValue);
		partial void Aftermodified_byChanged();

		public const string NameOfmodified_by = "modified_by";

		private static readonly PropertyChangedEventArgs _modified_byChangedEventArgs = new PropertyChangedEventArgs(NameOfmodified_by);

		private void Onmodified_byChanged()
		{
			OnPropertyChanged(_modified_byChangedEventArgs);
		}

		#endregion

		#endregion
		#region removed_at : DateTime?

		private DateTime? _removed_at;
		/// <summary>
		/// 削除日時
		/// </summary>
		[Column(DbType="datetime2(7)", DataType=DataType.DateTime2, Precision=7), DataMember, Nullable]
		public  DateTime?  removed_at
		{
			get { return _removed_at; }
			set
			{
				if (_removed_at != value)
				{
					Beforeremoved_atChanged(value);
					_removed_at = value;
					Afterremoved_atChanged();

					Onremoved_atChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforeremoved_atChanged(DateTime? newValue);
		partial void Afterremoved_atChanged();

		public const string NameOfremoved_at = "removed_at";

		private static readonly PropertyChangedEventArgs _removed_atChangedEventArgs = new PropertyChangedEventArgs(NameOfremoved_at);

		private void Onremoved_atChanged()
		{
			OnPropertyChanged(_removed_atChangedEventArgs);
		}

		#endregion

		#endregion
		#region row_version : byte[]

		private byte[] _row_version;
		/// <summary>
		/// 版
		/// </summary>
		[Column(DbType="timestamp", DataType=DataType.Timestamp, SkipOnInsert=true, SkipOnUpdate=true), DataMember, Nullable]
		public  byte[]  row_version
		{
			get { return _row_version; }
			set
			{
				if (_row_version != value)
				{
					Beforerow_versionChanged(value);
					_row_version = value;
					Afterrow_versionChanged();

					Onrow_versionChanged();
				}
			}
		}

		#region INotifyPropertyChanged support

		partial void Beforerow_versionChanged(byte[] newValue);
		partial void Afterrow_versionChanged();

		public const string NameOfrow_version = "row_version";

		private static readonly PropertyChangedEventArgs _row_versionChangedEventArgs = new PropertyChangedEventArgs(NameOfrow_version);

		private void Onrow_versionChanged()
		{
			OnPropertyChanged(_row_versionChangedEventArgs);
		}

		#endregion

		#endregion

		#region enum用アクセスラッパー
		#endregion

		#region Constructor

		public ContactType()
		{
			#region フィールド初期化
			uid = default(int);
			contact_type_id = 0;
			name = "";
			description = "";
			display_order = 0;
			created_at = DateTime.UtcNow;
			created_by = null;
			modified_at = DateTime.UtcNow;
			modified_by = null;
			removed_at = null;
			row_version = default(byte[]);
			#endregion
		}

		#endregion

		#region Association


		#endregion

		#region INotifyPropertyChanged support

		[field : NonSerialized]
		public virtual event PropertyChangedEventHandler PropertyChanged;

		protected void OnPropertyChanged(string propertyName)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		protected void OnPropertyChanged(PropertyChangedEventArgs arg)
		{
			var propertyChanged = PropertyChanged;

			if (propertyChanged != null)
			{
				propertyChanged(this, arg);
			}
		}

		#endregion

	}
	#region 連絡先種別条件
	/// <summary>
	/// 連絡先種別条件
	/// </summary>
	[DataContract]
	public partial class ContactTypeCondition : ContactTypeConditionBase
	{
	}

	/// <summary>
	/// 連絡先種別条件ベース
	/// </summary>
	[DataContract]
	public class ContactTypeConditionBase : ConditionBase<ContactType>
	{
		#region properties
		#region uid
		/// <summary>
		/// uid_eqと等しい
		/// </summary>
		[DataMember] public int? uid_eq { get; set; }
		/// <summary>
		/// uid_neと等しくない
		/// </summary>
		[DataMember] public int? uid_ne { get; set; }
		/// <summary>
		/// uid_ltより小さい
		/// </summary>
		[DataMember] public int? uid_lt { get; set; }
		/// <summary>
		/// uid_gtより大きい
		/// </summary>
		[DataMember] public int? uid_gt { get; set; }
		/// <summary>
		/// uid_le以下
		/// </summary>
		[DataMember] public int? uid_le { get; set; }
		/// <summary>
		/// uid_ge以上
		/// </summary>
		[DataMember] public int? uid_ge { get; set; }
		/// <summary>
		/// uid_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> uid_in { get; set; }
		/// <summary>
		/// uid_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> uid_ni { get; set; }
		/// <summary>
		/// uid_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? uid_between { get; set; }
		#endregion
		#region contact_type_id
		/// <summary>
		/// contact_type_id_eqと等しい
		/// </summary>
		[DataMember] public int? contact_type_id_eq { get; set; }
		/// <summary>
		/// contact_type_id_neと等しくない
		/// </summary>
		[DataMember] public int? contact_type_id_ne { get; set; }
		/// <summary>
		/// contact_type_id_ltより小さい
		/// </summary>
		[DataMember] public int? contact_type_id_lt { get; set; }
		/// <summary>
		/// contact_type_id_gtより大きい
		/// </summary>
		[DataMember] public int? contact_type_id_gt { get; set; }
		/// <summary>
		/// contact_type_id_le以下
		/// </summary>
		[DataMember] public int? contact_type_id_le { get; set; }
		/// <summary>
		/// contact_type_id_ge以上
		/// </summary>
		[DataMember] public int? contact_type_id_ge { get; set; }
		/// <summary>
		/// contact_type_id_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> contact_type_id_in { get; set; }
		/// <summary>
		/// contact_type_id_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> contact_type_id_ni { get; set; }
		/// <summary>
		/// contact_type_id_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? contact_type_id_between { get; set; }
		#endregion
		#region name
		/// <summary>
		/// name_eqと等しい
		/// </summary>
		[DataMember] public string name_eq { get; set; }
		/// <summary>
		/// name_neと等しくない
		/// </summary>
		[DataMember] public string name_ne { get; set; }
		/// <summary>
		/// name_ltより小さい
		/// </summary>
		[DataMember] public string name_lt { get; set; }
		/// <summary>
		/// name_gtより大きい
		/// </summary>
		[DataMember] public string name_gt { get; set; }
		/// <summary>
		/// name_le以下
		/// </summary>
		[DataMember] public string name_le { get; set; }
		/// <summary>
		/// name_ge以上
		/// </summary>
		[DataMember] public string name_ge { get; set; }
		/// <summary>
		/// name_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> name_in { get; set; }
		/// <summary>
		/// name_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> name_ni { get; set; }
		/// <summary>
		/// name_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? name_between { get; set; }
		/// <summary>
		/// name_likeと部分一致する
		/// </summary>
		[DataMember] public string name_like { get; set; }
		#endregion
		#region description
		/// <summary>
		/// description_eqと等しい
		/// </summary>
		[DataMember] public string description_eq { get; set; }
		/// <summary>
		/// description_neと等しくない
		/// </summary>
		[DataMember] public string description_ne { get; set; }
		/// <summary>
		/// description_ltより小さい
		/// </summary>
		[DataMember] public string description_lt { get; set; }
		/// <summary>
		/// description_gtより大きい
		/// </summary>
		[DataMember] public string description_gt { get; set; }
		/// <summary>
		/// description_le以下
		/// </summary>
		[DataMember] public string description_le { get; set; }
		/// <summary>
		/// description_ge以上
		/// </summary>
		[DataMember] public string description_ge { get; set; }
		/// <summary>
		/// description_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<string> description_in { get; set; }
		/// <summary>
		/// description_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<string> description_ni { get; set; }
		/// <summary>
		/// description_betweenの範囲内にある
		/// </summary>
		[DataMember] public (string low, string high)? description_between { get; set; }
		/// <summary>
		/// description_likeと部分一致する
		/// </summary>
		[DataMember] public string description_like { get; set; }
		#endregion
		#region display_order
		/// <summary>
		/// display_order_eqと等しい
		/// </summary>
		[DataMember] public int? display_order_eq { get; set; }
		/// <summary>
		/// display_order_neと等しくない
		/// </summary>
		[DataMember] public int? display_order_ne { get; set; }
		/// <summary>
		/// display_order_ltより小さい
		/// </summary>
		[DataMember] public int? display_order_lt { get; set; }
		/// <summary>
		/// display_order_gtより大きい
		/// </summary>
		[DataMember] public int? display_order_gt { get; set; }
		/// <summary>
		/// display_order_le以下
		/// </summary>
		[DataMember] public int? display_order_le { get; set; }
		/// <summary>
		/// display_order_ge以上
		/// </summary>
		[DataMember] public int? display_order_ge { get; set; }
		/// <summary>
		/// display_order_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> display_order_in { get; set; }
		/// <summary>
		/// display_order_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> display_order_ni { get; set; }
		/// <summary>
		/// display_order_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? display_order_between { get; set; }
		#endregion
		#region created_at
		/// <summary>
		/// created_at_eqと等しい
		/// </summary>
		[DataMember] public DateTime? created_at_eq { get; set; }
		/// <summary>
		/// created_at_neと等しくない
		/// </summary>
		[DataMember] public DateTime? created_at_ne { get; set; }
		/// <summary>
		/// created_at_ltより小さい
		/// </summary>
		[DataMember] public DateTime? created_at_lt { get; set; }
		/// <summary>
		/// created_at_gtより大きい
		/// </summary>
		[DataMember] public DateTime? created_at_gt { get; set; }
		/// <summary>
		/// created_at_le以下
		/// </summary>
		[DataMember] public DateTime? created_at_le { get; set; }
		/// <summary>
		/// created_at_ge以上
		/// </summary>
		[DataMember] public DateTime? created_at_ge { get; set; }
		/// <summary>
		/// created_at_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> created_at_in { get; set; }
		/// <summary>
		/// created_at_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> created_at_ni { get; set; }
		/// <summary>
		/// created_at_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? created_at_between { get; set; }
		#endregion
		#region created_by
		/// <summary>
		/// created_by_eqと等しい
		/// </summary>
		[DataMember] public int? created_by_eq { get; set; }
		/// <summary>
		/// created_by_neと等しくない
		/// </summary>
		[DataMember] public int? created_by_ne { get; set; }
		/// <summary>
		/// created_by_ltより小さい
		/// </summary>
		[DataMember] public int? created_by_lt { get; set; }
		/// <summary>
		/// created_by_gtより大きい
		/// </summary>
		[DataMember] public int? created_by_gt { get; set; }
		/// <summary>
		/// created_by_le以下
		/// </summary>
		[DataMember] public int? created_by_le { get; set; }
		/// <summary>
		/// created_by_ge以上
		/// </summary>
		[DataMember] public int? created_by_ge { get; set; }
		/// <summary>
		/// created_by_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> created_by_in { get; set; }
		/// <summary>
		/// created_by_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> created_by_ni { get; set; }
		/// <summary>
		/// created_by_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? created_by_between { get; set; }
		/// <summary>
		/// created_byがNULLか
		/// </summary>
		[DataMember] public bool created_by_isnull { get; set; } =  false ;
		/// <summary>
		/// created_byがNULLではないか
		/// </summary>
		[DataMember] public bool created_by_isnotnull { get; set; } = false;
		#endregion
		#region modified_at
		/// <summary>
		/// modified_at_eqと等しい
		/// </summary>
		[DataMember] public DateTime? modified_at_eq { get; set; }
		/// <summary>
		/// modified_at_neと等しくない
		/// </summary>
		[DataMember] public DateTime? modified_at_ne { get; set; }
		/// <summary>
		/// modified_at_ltより小さい
		/// </summary>
		[DataMember] public DateTime? modified_at_lt { get; set; }
		/// <summary>
		/// modified_at_gtより大きい
		/// </summary>
		[DataMember] public DateTime? modified_at_gt { get; set; }
		/// <summary>
		/// modified_at_le以下
		/// </summary>
		[DataMember] public DateTime? modified_at_le { get; set; }
		/// <summary>
		/// modified_at_ge以上
		/// </summary>
		[DataMember] public DateTime? modified_at_ge { get; set; }
		/// <summary>
		/// modified_at_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> modified_at_in { get; set; }
		/// <summary>
		/// modified_at_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> modified_at_ni { get; set; }
		/// <summary>
		/// modified_at_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? modified_at_between { get; set; }
		#endregion
		#region modified_by
		/// <summary>
		/// modified_by_eqと等しい
		/// </summary>
		[DataMember] public int? modified_by_eq { get; set; }
		/// <summary>
		/// modified_by_neと等しくない
		/// </summary>
		[DataMember] public int? modified_by_ne { get; set; }
		/// <summary>
		/// modified_by_ltより小さい
		/// </summary>
		[DataMember] public int? modified_by_lt { get; set; }
		/// <summary>
		/// modified_by_gtより大きい
		/// </summary>
		[DataMember] public int? modified_by_gt { get; set; }
		/// <summary>
		/// modified_by_le以下
		/// </summary>
		[DataMember] public int? modified_by_le { get; set; }
		/// <summary>
		/// modified_by_ge以上
		/// </summary>
		[DataMember] public int? modified_by_ge { get; set; }
		/// <summary>
		/// modified_by_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<int> modified_by_in { get; set; }
		/// <summary>
		/// modified_by_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<int> modified_by_ni { get; set; }
		/// <summary>
		/// modified_by_betweenの範囲内にある
		/// </summary>
		[DataMember] public (int? low, int? high)? modified_by_between { get; set; }
		/// <summary>
		/// modified_byがNULLか
		/// </summary>
		[DataMember] public bool modified_by_isnull { get; set; } =  false ;
		/// <summary>
		/// modified_byがNULLではないか
		/// </summary>
		[DataMember] public bool modified_by_isnotnull { get; set; } = false;
		#endregion
		#region removed_at
		/// <summary>
		/// removed_at_eqと等しい
		/// </summary>
		[DataMember] public DateTime? removed_at_eq { get; set; }
		/// <summary>
		/// removed_at_neと等しくない
		/// </summary>
		[DataMember] public DateTime? removed_at_ne { get; set; }
		/// <summary>
		/// removed_at_ltより小さい
		/// </summary>
		[DataMember] public DateTime? removed_at_lt { get; set; }
		/// <summary>
		/// removed_at_gtより大きい
		/// </summary>
		[DataMember] public DateTime? removed_at_gt { get; set; }
		/// <summary>
		/// removed_at_le以下
		/// </summary>
		[DataMember] public DateTime? removed_at_le { get; set; }
		/// <summary>
		/// removed_at_ge以上
		/// </summary>
		[DataMember] public DateTime? removed_at_ge { get; set; }
		/// <summary>
		/// removed_at_inに含まれる
		/// </summary>
		[DataMember] public IEnumerable<DateTime> removed_at_in { get; set; }
		/// <summary>
		/// removed_at_niに含まれない
		/// </summary>
		[DataMember] public IEnumerable<DateTime> removed_at_ni { get; set; }
		/// <summary>
		/// removed_at_betweenの範囲内にある
		/// </summary>
		[DataMember] public (DateTime? low, DateTime? high)? removed_at_between { get; set; }
		/// <summary>
		/// removed_atがNULLか
		/// </summary>
		[DataMember] public bool removed_at_isnull { get; set; } =  true ;
		/// <summary>
		/// removed_atがNULLではないか
		/// </summary>
		[DataMember] public bool removed_at_isnotnull { get; set; } = false;
		#endregion
		#region row_version
		/// <summary>
		/// row_version_eqと等しい
		/// </summary>
		[DataMember] public byte[] row_version_eq { get; set; }
		/// <summary>
		/// row_version_neと等しくない
		/// </summary>
		[DataMember] public byte[] row_version_ne { get; set; }
		/// <summary>
		/// row_versionがNULLか
		/// </summary>
		[DataMember] public bool row_version_isnull { get; set; } =  false ;
		/// <summary>
		/// row_versionがNULLではないか
		/// </summary>
		[DataMember] public bool row_version_isnotnull { get; set; } = false;
		#endregion
		#endregion

		#region override
		override public Expression<Func<ContactType, bool>> CreatePredicate()
		{
			var predicate = base.CreatePredicate();

			#region uid
			if (uid_eq != null) predicate = predicate.And(_ => _.uid == uid_eq);
			if (uid_ne != null) predicate = predicate.And(_ => _.uid != uid_ne);
			if (uid_lt != null) predicate = predicate.And(_ => _.uid < uid_lt);
			if (uid_gt != null) predicate = predicate.And(_ => _.uid > uid_gt);
			if (uid_le != null) predicate = predicate.And(_ => _.uid <= uid_le);
			if (uid_ge != null) predicate = predicate.And(_ => _.uid >= uid_ge);
			if (uid_in != null) predicate = predicate.And(_ => uid_in.Contains(_.uid));
			if (uid_ni != null) predicate = predicate.And(_ => !uid_ni.Contains(_.uid));
			#endregion
			#region contact_type_id
			if (contact_type_id_eq != null) predicate = predicate.And(_ => _.contact_type_id == contact_type_id_eq);
			if (contact_type_id_ne != null) predicate = predicate.And(_ => _.contact_type_id != contact_type_id_ne);
			if (contact_type_id_lt != null) predicate = predicate.And(_ => _.contact_type_id < contact_type_id_lt);
			if (contact_type_id_gt != null) predicate = predicate.And(_ => _.contact_type_id > contact_type_id_gt);
			if (contact_type_id_le != null) predicate = predicate.And(_ => _.contact_type_id <= contact_type_id_le);
			if (contact_type_id_ge != null) predicate = predicate.And(_ => _.contact_type_id >= contact_type_id_ge);
			if (contact_type_id_in != null) predicate = predicate.And(_ => contact_type_id_in.Contains(_.contact_type_id));
			if (contact_type_id_ni != null) predicate = predicate.And(_ => !contact_type_id_ni.Contains(_.contact_type_id));
			#endregion
			#region name
			if (name_eq != null) predicate = predicate.And(_ => _.name == name_eq);
			if (name_ne != null) predicate = predicate.And(_ => _.name != name_ne);
			if (name_lt != null) predicate = predicate.And(_ => name_lt.CompareTo(_.name) > 0);
			if (name_gt != null) predicate = predicate.And(_ => name_gt.CompareTo(_.name) < 0);
			if (name_le != null) predicate = predicate.And(_ => name_le.CompareTo(_.name) >= 0);
			if (name_ge != null) predicate = predicate.And(_ => name_ge.CompareTo(_.name) <= 0);
			if (name_in != null) predicate = predicate.And(_ => name_in.Contains(_.name));
			if (name_ni != null) predicate = predicate.And(_ => !name_ni.Contains(_.name));
			#endregion
			#region description
			if (description_eq != null) predicate = predicate.And(_ => _.description == description_eq);
			if (description_ne != null) predicate = predicate.And(_ => _.description != description_ne);
			if (description_lt != null) predicate = predicate.And(_ => description_lt.CompareTo(_.description) > 0);
			if (description_gt != null) predicate = predicate.And(_ => description_gt.CompareTo(_.description) < 0);
			if (description_le != null) predicate = predicate.And(_ => description_le.CompareTo(_.description) >= 0);
			if (description_ge != null) predicate = predicate.And(_ => description_ge.CompareTo(_.description) <= 0);
			if (description_in != null) predicate = predicate.And(_ => description_in.Contains(_.description));
			if (description_ni != null) predicate = predicate.And(_ => !description_ni.Contains(_.description));
			#endregion
			#region display_order
			if (display_order_eq != null) predicate = predicate.And(_ => _.display_order == display_order_eq);
			if (display_order_ne != null) predicate = predicate.And(_ => _.display_order != display_order_ne);
			if (display_order_lt != null) predicate = predicate.And(_ => _.display_order < display_order_lt);
			if (display_order_gt != null) predicate = predicate.And(_ => _.display_order > display_order_gt);
			if (display_order_le != null) predicate = predicate.And(_ => _.display_order <= display_order_le);
			if (display_order_ge != null) predicate = predicate.And(_ => _.display_order >= display_order_ge);
			if (display_order_in != null) predicate = predicate.And(_ => display_order_in.Contains(_.display_order));
			if (display_order_ni != null) predicate = predicate.And(_ => !display_order_ni.Contains(_.display_order));
			#endregion
			#region created_at
			if (created_at_eq != null) predicate = predicate.And(_ => _.created_at == created_at_eq);
			if (created_at_ne != null) predicate = predicate.And(_ => _.created_at != created_at_ne);
			if (created_at_lt != null) predicate = predicate.And(_ => _.created_at < created_at_lt);
			if (created_at_gt != null) predicate = predicate.And(_ => _.created_at > created_at_gt);
			if (created_at_le != null) predicate = predicate.And(_ => _.created_at <= created_at_le);
			if (created_at_ge != null) predicate = predicate.And(_ => _.created_at >= created_at_ge);
			if (created_at_in != null) predicate = predicate.And(_ => created_at_in.Contains(_.created_at));
			if (created_at_ni != null) predicate = predicate.And(_ => !created_at_ni.Contains(_.created_at));
			#endregion
			#region created_by
			if (created_by_eq != null) predicate = predicate.And(_ => _.created_by == created_by_eq);
			if (created_by_ne != null) predicate = predicate.And(_ => _.created_by != created_by_ne);
			if (created_by_lt != null) predicate = predicate.And(_ => _.created_by < created_by_lt);
			if (created_by_gt != null) predicate = predicate.And(_ => _.created_by > created_by_gt);
			if (created_by_le != null) predicate = predicate.And(_ => _.created_by <= created_by_le);
			if (created_by_ge != null) predicate = predicate.And(_ => _.created_by >= created_by_ge);
			if (created_by_in != null) predicate = predicate.And(_ => created_by_in.Contains(_.created_by.Value));
			if (created_by_ni != null) predicate = predicate.And(_ => !created_by_ni.Contains(_.created_by.Value));
			if (created_by_isnull) predicate = predicate.And(_ => _.created_by == null);
			if (created_by_isnotnull) predicate = predicate.And(_ => _.created_by != null);
			#endregion
			#region modified_at
			if (modified_at_eq != null) predicate = predicate.And(_ => _.modified_at == modified_at_eq);
			if (modified_at_ne != null) predicate = predicate.And(_ => _.modified_at != modified_at_ne);
			if (modified_at_lt != null) predicate = predicate.And(_ => _.modified_at < modified_at_lt);
			if (modified_at_gt != null) predicate = predicate.And(_ => _.modified_at > modified_at_gt);
			if (modified_at_le != null) predicate = predicate.And(_ => _.modified_at <= modified_at_le);
			if (modified_at_ge != null) predicate = predicate.And(_ => _.modified_at >= modified_at_ge);
			if (modified_at_in != null) predicate = predicate.And(_ => modified_at_in.Contains(_.modified_at));
			if (modified_at_ni != null) predicate = predicate.And(_ => !modified_at_ni.Contains(_.modified_at));
			#endregion
			#region modified_by
			if (modified_by_eq != null) predicate = predicate.And(_ => _.modified_by == modified_by_eq);
			if (modified_by_ne != null) predicate = predicate.And(_ => _.modified_by != modified_by_ne);
			if (modified_by_lt != null) predicate = predicate.And(_ => _.modified_by < modified_by_lt);
			if (modified_by_gt != null) predicate = predicate.And(_ => _.modified_by > modified_by_gt);
			if (modified_by_le != null) predicate = predicate.And(_ => _.modified_by <= modified_by_le);
			if (modified_by_ge != null) predicate = predicate.And(_ => _.modified_by >= modified_by_ge);
			if (modified_by_in != null) predicate = predicate.And(_ => modified_by_in.Contains(_.modified_by.Value));
			if (modified_by_ni != null) predicate = predicate.And(_ => !modified_by_ni.Contains(_.modified_by.Value));
			if (modified_by_isnull) predicate = predicate.And(_ => _.modified_by == null);
			if (modified_by_isnotnull) predicate = predicate.And(_ => _.modified_by != null);
			#endregion
			#region removed_at
			if (removed_at_eq != null) predicate = predicate.And(_ => _.removed_at == removed_at_eq);
			if (removed_at_ne != null) predicate = predicate.And(_ => _.removed_at != removed_at_ne);
			if (removed_at_lt != null) predicate = predicate.And(_ => _.removed_at < removed_at_lt);
			if (removed_at_gt != null) predicate = predicate.And(_ => _.removed_at > removed_at_gt);
			if (removed_at_le != null) predicate = predicate.And(_ => _.removed_at <= removed_at_le);
			if (removed_at_ge != null) predicate = predicate.And(_ => _.removed_at >= removed_at_ge);
			if (removed_at_in != null) predicate = predicate.And(_ => removed_at_in.Contains(_.removed_at.Value));
			if (removed_at_ni != null) predicate = predicate.And(_ => !removed_at_ni.Contains(_.removed_at.Value));
			if (removed_at_isnull) predicate = predicate.And(_ => _.removed_at == null);
			if (removed_at_isnotnull) predicate = predicate.And(_ => _.removed_at != null);
			#endregion
			#region row_version
			if (row_version_eq != null) predicate = predicate.And(_ => _.row_version == row_version_eq);
			if (row_version_ne != null) predicate = predicate.And(_ => _.row_version != row_version_ne);
			if (row_version_isnull) predicate = predicate.And(_ => _.row_version == null);
			if (row_version_isnotnull) predicate = predicate.And(_ => _.row_version != null);
			#endregion

			return predicate;
		}
		#endregion
	}
	#endregion
	#endregion

	#region peppaDB拡張
	public static partial class peppaDBExtend
	{
		#region Findメソッド
		/// <summary>
		/// 主キーを指定してTestデータ取得
		/// </summary>
		/// <param name="table"></param>
		/// <param name="p_uid">ユニークID(uid)</param>
		/// <returns></returns>
		public static Test Find(this ITable<Test> table, int p_uid)
		{
			return table.SingleOrDefault(_ => _.uid == p_uid);
		}
		/// <summary>
		/// 主キーを指定してRoleデータ取得
		/// </summary>
		/// <param name="table"></param>
		/// <param name="p_role_id">ロールID(role_id)</param>
		/// <returns></returns>
		public static Role Find(this ITable<Role> table, string p_role_id)
		{
			return table.SingleOrDefault(_ => _.role_id == p_role_id);
		}
		/// <summary>
		/// 主キーを指定してRolePermissionデータ取得
		/// </summary>
		/// <param name="table"></param>
		/// <param name="p_role_id">ロールID(role_id)</param>
		/// <param name="p_permission_id">権限ID(permission_id)</param>
		/// <returns></returns>
		public static RolePermission Find(this ITable<RolePermission> table, string p_role_id, string p_permission_id)
		{
			return table.SingleOrDefault(_ => _.role_id == p_role_id && _.permission_id == p_permission_id);
		}
		/// <summary>
		/// 主キーを指定してAccountデータ取得
		/// </summary>
		/// <param name="table"></param>
		/// <param name="p_account_id">アカウントID(account_id)</param>
		/// <returns></returns>
		public static Account Find(this ITable<Account> table, int p_account_id)
		{
			return table.SingleOrDefault(_ => _.account_id == p_account_id);
		}
		/// <summary>
		/// 主キーを指定してPasswordデータ取得
		/// </summary>
		/// <param name="table"></param>
		/// <param name="p_account_id">アカウントID(account_id)</param>
		/// <returns></returns>
		public static Password Find(this ITable<Password> table, int p_account_id)
		{
			return table.SingleOrDefault(_ => _.account_id == p_account_id);
		}
		/// <summary>
		/// 主キーを指定してAccountRoleデータ取得
		/// </summary>
		/// <param name="table"></param>
		/// <param name="p_account_id">アカウントID(account_id)</param>
		/// <param name="p_role_id">ロールID(role_id)</param>
		/// <returns></returns>
		public static AccountRole Find(this ITable<AccountRole> table, int p_account_id, string p_role_id)
		{
			return table.SingleOrDefault(_ => _.account_id == p_account_id && _.role_id == p_role_id);
		}
		/// <summary>
		/// 主キーを指定してErrorLogデータ取得
		/// </summary>
		/// <param name="table"></param>
		/// <param name="p_uid">ユニークID(uid)</param>
		/// <returns></returns>
		public static ErrorLog Find(this ITable<ErrorLog> table, int p_uid)
		{
			return table.SingleOrDefault(_ => _.uid == p_uid);
		}
		/// <summary>
		/// 主キーを指定してStaffデータ取得
		/// </summary>
		/// <param name="table"></param>
		/// <param name="p_staff_no">職員番号(staff_no)</param>
		/// <returns></returns>
		public static Staff Find(this ITable<Staff> table, string p_staff_no)
		{
			return table.SingleOrDefault(_ => _.staff_no == p_staff_no);
		}
		/// <summary>
		/// 主キーを指定してTeacherデータ取得
		/// </summary>
		/// <param name="table"></param>
		/// <param name="p_teacher_no">教員番号(teacher_no)</param>
		/// <returns></returns>
		public static Teacher Find(this ITable<Teacher> table, string p_teacher_no)
		{
			return table.SingleOrDefault(_ => _.teacher_no == p_teacher_no);
		}
		/// <summary>
		/// 主キーを指定してUserデータ取得
		/// </summary>
		/// <param name="table"></param>
		/// <param name="p_user_no">利用者番号(user_no)</param>
		/// <returns></returns>
		public static User Find(this ITable<User> table, string p_user_no)
		{
			return table.SingleOrDefault(_ => _.user_no == p_user_no);
		}
		/// <summary>
		/// 主キーを指定してSexTypeデータ取得
		/// </summary>
		/// <param name="table"></param>
		/// <param name="p_sex_type_id">性別区分ID(sex_type_id)</param>
		/// <returns></returns>
		public static SexType Find(this ITable<SexType> table, int p_sex_type_id)
		{
			return table.SingleOrDefault(_ => _.sex_type_id == p_sex_type_id);
		}
		/// <summary>
		/// 主キーを指定してWorkStyleTypeデータ取得
		/// </summary>
		/// <param name="table"></param>
		/// <param name="p_work_style_type_id">勤務形態種別ID(work_style_type_id)</param>
		/// <returns></returns>
		public static WorkStyleType Find(this ITable<WorkStyleType> table, int p_work_style_type_id)
		{
			return table.SingleOrDefault(_ => _.work_style_type_id == p_work_style_type_id);
		}
		/// <summary>
		/// 主キーを指定してPositionTypeデータ取得
		/// </summary>
		/// <param name="table"></param>
		/// <param name="p_position_type_id">職階ID(position_type_id)</param>
		/// <returns></returns>
		public static PositionType Find(this ITable<PositionType> table, int p_position_type_id)
		{
			return table.SingleOrDefault(_ => _.position_type_id == p_position_type_id);
		}
		/// <summary>
		/// 主キーを指定してTeacherLisenceTypeデータ取得
		/// </summary>
		/// <param name="table"></param>
		/// <param name="p_teacher_lisence_type_id">教員資格種別ID(teacher_lisence_type_id)</param>
		/// <returns></returns>
		public static TeacherLisenceType Find(this ITable<TeacherLisenceType> table, int p_teacher_lisence_type_id)
		{
			return table.SingleOrDefault(_ => _.teacher_lisence_type_id == p_teacher_lisence_type_id);
		}
		/// <summary>
		/// 主キーを指定してPersonNameデータ取得
		/// </summary>
		/// <param name="table"></param>
		/// <param name="p_user_type">利用者種別(user_type)</param>
		/// <param name="p_generic_user_no">利用者番号(generic_user_no)</param>
		/// <param name="p_seq">連番(seq)</param>
		/// <returns></returns>
		public static PersonName Find(this ITable<PersonName> table, int p_user_type, string p_generic_user_no, int p_seq)
		{
			return table.SingleOrDefault(_ => _.user_type == p_user_type && _.generic_user_no == p_generic_user_no && _.seq == p_seq);
		}
		/// <summary>
		/// 主キーを指定してPersonNameTypeデータ取得
		/// </summary>
		/// <param name="table"></param>
		/// <param name="p_person_name_type_id">人名種別ID(person_name_type_id)</param>
		/// <returns></returns>
		public static PersonNameType Find(this ITable<PersonNameType> table, int p_person_name_type_id)
		{
			return table.SingleOrDefault(_ => _.person_name_type_id == p_person_name_type_id);
		}
		/// <summary>
		/// 主キーを指定してAddressデータ取得
		/// </summary>
		/// <param name="table"></param>
		/// <param name="p_user_type">利用者種別(user_type)</param>
		/// <param name="p_generic_user_no">利用者番号(generic_user_no)</param>
		/// <param name="p_seq">連番(seq)</param>
		/// <returns></returns>
		public static Address Find(this ITable<Address> table, int p_user_type, string p_generic_user_no, int p_seq)
		{
			return table.SingleOrDefault(_ => _.user_type == p_user_type && _.generic_user_no == p_generic_user_no && _.seq == p_seq);
		}
		/// <summary>
		/// 主キーを指定してAddressTypeデータ取得
		/// </summary>
		/// <param name="table"></param>
		/// <param name="p_address_type_id">住所種別ID(address_type_id)</param>
		/// <returns></returns>
		public static AddressType Find(this ITable<AddressType> table, int p_address_type_id)
		{
			return table.SingleOrDefault(_ => _.address_type_id == p_address_type_id);
		}
		/// <summary>
		/// 主キーを指定してContactデータ取得
		/// </summary>
		/// <param name="table"></param>
		/// <param name="p_user_type">利用者種別(user_type)</param>
		/// <param name="p_generic_user_no">利用者番号(generic_user_no)</param>
		/// <param name="p_seq">連番(seq)</param>
		/// <returns></returns>
		public static Contact Find(this ITable<Contact> table, int p_user_type, string p_generic_user_no, int p_seq)
		{
			return table.SingleOrDefault(_ => _.user_type == p_user_type && _.generic_user_no == p_generic_user_no && _.seq == p_seq);
		}
		/// <summary>
		/// 主キーを指定してContactTypeデータ取得
		/// </summary>
		/// <param name="table"></param>
		/// <param name="p_contact_type_id">連絡先種別ID(contact_type_id)</param>
		/// <returns></returns>
		public static ContactType Find(this ITable<ContactType> table, int p_contact_type_id)
		{
			return table.SingleOrDefault(_ => _.contact_type_id == p_contact_type_id);
		}
		#endregion
	}
	#endregion

}

#pragma warning restore 1591
